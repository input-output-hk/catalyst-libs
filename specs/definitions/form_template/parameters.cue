// Definitions of the field parameters within a template.
package form_template

import (
	"list"
	"regexp"
	"github.com/input-output-hk/catalyst-libs/specs/generic:optional"
)

// Supported field `type`
// Same as Json Schema minus `null`
#fieldType: "array" |
	"array" |
	"boolean" |
	"integer" |
	"number" |
	"object" |
	*"string"

// List of properties allowed in the `property` field of `jsonParameter`
#properties: "oneOf"

#parameter: {
	property?:   #properties // Name of the property, IF its not the same as the parameter.
	description: string
	required:    optional.#field

	// The following constrain the value of the parameter
	// within a template.
	// They DO NOT constrain the value of the field element
	// The parameter relates to.  
	// The Field element is constrained by the parameters value.
	// Their purpose is to assist creation of templates to set
	// the appropriate form element parameters within the template properties.
	type: #fieldType

	// All parameters when defined require an example of their use
	// within the 
	example?: _ // Set to `null` ONLY when the example is autogenerated.

	// If the parameter is a `string` it can be constrained with the following
	// options.
	if type == "string" {
		format?:           #formatChoices
		contentMediaType?: #contentMediaTypeChoices
		pattern?:          regexp.Valid
		minLength?:        int // Only to enforce that the field can not be empty (such as when used in lists)
		choices?:          list.UniqueItems
		choices?: [...string]
	}

	// If the parameter is a `array` it can be constrained with the following
	// options.
	if type == "array" {
		items?: #parameter
	}

	// If the parameter is a `integer` it can be constrained with the following
	// options.
	if type == "integer" {
		choices?: list.UniqueItems
		choices?: [...int]
		minimum?: int
		maximum?: int
	}

}

// The parameters supported by a particular field definition
_allParameters: {
	title?: #parameter & {
		description:      _ | *"The label attached to the field."
		required:         "yes"
		contentMediaType: _ | *"text/plain"
	}
	description?: #parameter & {
		description:      _ | *"The description of the field presented to the user during data entry."
		required:         "optional"
		contentMediaType: "text/markdown; template=handlebars"
	}
	required?: #parameter & {
		required: _ | *"optional"
	}
	default?: #parameter & {
		required: _ | *"yes"
	}
	const?: #parameter & {
		required: _ | *"yes"
	}
	properties?: #parameter & {
		required:    _ | *"yes"
		description: _ | *"All sub fields contained in the object."
		required:    "yes"
		//example:     null // Example properties are generated from child properties.
	}
	minLength?: #parameter & {
		type:        "integer"
		description: _ | *"Minimum number of characters allowed in the field."
		required:    "optional"
	}
	maxLength?: #parameter & {
		type:        "integer"
		description: _ | *"Maximum number of characters allowed in the field."
		required:    "yes"
	}
	enum?: #parameter & {
		type: "array"
		items: {
			description: "An element of the Enum."
			type:        "string"
			required:    "yes"
		}
		description: _ | *"An array of string values that may be selected."
		required:    "yes"
	}
	minItems?: #parameter & {
		type:        "integer"
		description: _ | *#"An array instance is valid against "minItems" if its size is greater than, or equal to, the value of this keyword."#
		required:    "optional"
	}
	maxItems?: #parameter & {
		type:        "integer"
		description: _ | *#"An array instance is valid against "maxItems" if its size is less than, or equal to, the value of this keyword."#
		required:    "yes"
	}
	contains?: #parameter & {
		type: "array"
		items: {
			description: "An individual Choice."
			type:        "string"
		}
		description: _ | *"The choices the multi select can contain."
		required:    "yes"
	}
	oneOf_groupedTags?: #parameter & {
		property: "oneOf"
		type:     "array"
		items: {
			description: """
					An array of grouped tag objects, of which one can be selected.
					Each object *MUST* have the form:
					
					```json
					"properties": {
						"group": {
							"$ref": "$def/tagGroup",
							"const": <group name string>
						},
						"tag": {
							"$ref": "$def/tagSelection",
							"enum": [
								<tag 1 string>,
								<tag 2 string>,
								...
							]
						}
					}
					```
				"""
			type: "object"
		}
		description: "A set of tags with a group selector."
	}
	"x-guidance"?: #parameter & {
		description:      _ | *"Long form Markdown formatted description to give guidance about how the field is to be completed."
		required:         "optional"
		contentMediaType: "text/markdown; template=handlebars"
	}
	"x-placeholder"?: #parameter & {
		description: _ | *"Placeholder text to display inside the field if it is empty."
		required:    "optional"
	}
	"x-icon"?: #parameter & {
		description: _ | *"The name of the Icon to display with the field."
		required:    "optional"
		choices:     _allIcons
	}
	"x-order"?: #parameter & {
		required: "yes"
		description: """
			The ordering of the properties to be enforced when displayed.
			Any field not listed here will get displayed in an alphabetical order following the listed fields.
			"""
	}
	"x-flatten"?: #parameter & {
		type:     "boolean"
		required: "optional"
		description: """
			If present, and true, then form element is to be flattened into its parent.
			Typically this parameter is only present in sections.
			The UI is free to decide how it presents flattened sections.
			"""
	}
}
