{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Project Catalyst - Catalyst Library \u00b6 How the docs are built \u00b6 MkDocs Material for MkDocs","title":"Home"},{"location":"#project-catalyst-catalyst-library","text":"","title":"Project Catalyst - Catalyst Library"},{"location":"#how-the-docs-are-built","text":"MkDocs Material for MkDocs","title":"How the docs are built"},{"location":"appendix/","text":"Appendix \u00b6 The appendix contains collections of extra information and examples relevant to Catalyst Library.","title":"Appendix"},{"location":"appendix/#appendix","text":"The appendix contains collections of extra information and examples relevant to Catalyst Library.","title":"Appendix"},{"location":"appendix/tags/","text":"Tag Index \u00b6 ADR \u00b6 0002 Architecture Decision Records api \u00b6 0006 Cursor-based pagination for Catalyst Data Service arc42 \u00b6 Index 0001 Architecture Documentation Standard 0002 Architecture Decision Records dart \u00b6 0003 Flutter for Catalyst Voting Frontend flutter \u00b6 0003 Flutter for Catalyst Voting Frontend 0005 Catalyst Voices Frontend App Architecture images \u00b6 0004 Store/Display images in WebP format.","title":"Tag Index"},{"location":"appendix/tags/#tag-index","text":"","title":"Tag Index"},{"location":"appendix/tags/#adr","text":"0002 Architecture Decision Records","title":"ADR"},{"location":"appendix/tags/#api","text":"0006 Cursor-based pagination for Catalyst Data Service","title":"api"},{"location":"appendix/tags/#arc42","text":"Index 0001 Architecture Documentation Standard 0002 Architecture Decision Records","title":"arc42"},{"location":"appendix/tags/#dart","text":"0003 Flutter for Catalyst Voting Frontend","title":"dart"},{"location":"appendix/tags/#flutter","text":"0003 Flutter for Catalyst Voting Frontend 0005 Catalyst Voices Frontend App Architecture","title":"flutter"},{"location":"appendix/tags/#images","text":"0004 Store/Display images in WebP format.","title":"images"},{"location":"appendix/important/","text":"Important \u00b6","title":"Important"},{"location":"appendix/important/#important","text":"","title":"Important"},{"location":"appendix/important/coc/","text":"Contributor Covenant Code of Conduct \u00b6 Our Pledge \u00b6 We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation. We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community. Our Standards \u00b6 Examples of behavior that contributes to a positive environment for our community include: Demonstrating empathy and kindness toward other people Being respectful of differing opinions, viewpoints, and experiences Giving and gracefully accepting constructive feedback Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience Focusing on what is best not just for us as individuals, but for the overall community Examples of unacceptable behavior include: The use of sexualized language or imagery, and sexual attention or advances of any kind Trolling, insulting or derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or email address, without their explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting Enforcement Responsibilities \u00b6 Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful. Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate. Scope \u00b6 This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Enforcement \u00b6 Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at conduct@iohk.io . All complaints will be reviewed and investigated promptly and fairly. All community leaders are obligated to respect the privacy and security of the reporter of any incident. Enforcement Guidelines \u00b6 Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct: 1. Correction \u00b6 Community Impact : Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community. Consequence : A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested. 2. Warning \u00b6 Community Impact : A violation through a single incident or series of actions. Consequence : A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban. 3. Temporary Ban \u00b6 Community Impact : A serious violation of community standards, including sustained inappropriate behavior. Consequence : A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban. 4. Permanent Ban \u00b6 Community Impact : Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals. Consequence : A permanent ban from any sort of public interaction within the community. Attribution \u00b6 This Code of Conduct is adapted from the Contributor Covenant , version 2.0, available at https://www.contributor-covenant.org/version/2/0/code_of_conduct.html . Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder . For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq . Translations are available at https://www.contributor-covenant.org/translations .","title":"Code of Conduct"},{"location":"appendix/important/coc/#contributor-covenant-code-of-conduct","text":"","title":"Contributor Covenant Code of Conduct"},{"location":"appendix/important/coc/#our-pledge","text":"We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation. We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.","title":"Our Pledge"},{"location":"appendix/important/coc/#our-standards","text":"Examples of behavior that contributes to a positive environment for our community include: Demonstrating empathy and kindness toward other people Being respectful of differing opinions, viewpoints, and experiences Giving and gracefully accepting constructive feedback Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience Focusing on what is best not just for us as individuals, but for the overall community Examples of unacceptable behavior include: The use of sexualized language or imagery, and sexual attention or advances of any kind Trolling, insulting or derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or email address, without their explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting","title":"Our Standards"},{"location":"appendix/important/coc/#enforcement-responsibilities","text":"Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful. Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.","title":"Enforcement Responsibilities"},{"location":"appendix/important/coc/#scope","text":"This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.","title":"Scope"},{"location":"appendix/important/coc/#enforcement","text":"Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at conduct@iohk.io . All complaints will be reviewed and investigated promptly and fairly. All community leaders are obligated to respect the privacy and security of the reporter of any incident.","title":"Enforcement"},{"location":"appendix/important/coc/#enforcement-guidelines","text":"Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:","title":"Enforcement Guidelines"},{"location":"appendix/important/coc/#1-correction","text":"Community Impact : Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community. Consequence : A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.","title":"1. Correction"},{"location":"appendix/important/coc/#2-warning","text":"Community Impact : A violation through a single incident or series of actions. Consequence : A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.","title":"2. Warning"},{"location":"appendix/important/coc/#3-temporary-ban","text":"Community Impact : A serious violation of community standards, including sustained inappropriate behavior. Consequence : A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.","title":"3. Temporary Ban"},{"location":"appendix/important/coc/#4-permanent-ban","text":"Community Impact : Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals. Consequence : A permanent ban from any sort of public interaction within the community.","title":"4. Permanent Ban"},{"location":"appendix/important/coc/#attribution","text":"This Code of Conduct is adapted from the Contributor Covenant , version 2.0, available at https://www.contributor-covenant.org/version/2/0/code_of_conduct.html . Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder . For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq . Translations are available at https://www.contributor-covenant.org/translations .","title":"Attribution"},{"location":"appendix/important/contributing/","text":"Contributing to Catalyst Libs \u00b6 First off, thanks for taking the time to contribute! \u2764\ufe0f Contributing to Catalyst Libs Code of Conduct I Have a Question I Want To Contribute Reporting Bugs Before Submitting a Bug Report How Do I Submit a Good Bug Report? Suggesting Enhancements Before Submitting an Enhancement How Do I Submit a Good Enhancement Suggestion? Your First Code Contribution Improving The Documentation Style guides Rust Dart Flutter Commit Messages All types of contributions are encouraged and valued. Please make sure to read the relevant section before making your contribution. It will make it a lot easier for us maintainers and smooth out the experience for all involved. The community looks forward to your contributions. \ud83c\udf89 Code of Conduct \u00b6 This project and everyone participating in it is governed by the catalyst-libs Code of Conduct . By participating, you are expected to uphold this code. Please report unacceptable behavior to code-of-conduct@iohk.io . I Have a Question \u00b6 If you want to ask a question, we assume that you have read the available Documentation . Before you ask a question, it is best to search for existing Issues that might help you. In case you have found a suitable issue and still need clarification, you can write your question here . It is also advisable to search the internet for answers first. If you then still feel the need to ask a question and need clarification, we recommend the following: Open an Issue . Provide as much context as you can about what you're running into. Provide project and platform versions ( rustc --version --verbose , flutter doctor -v , etc), depending on what seems relevant. We will then take care of the issue as soon as possible. I Want To Contribute \u00b6 Reporting Bugs \u00b6 Before Submitting a Bug Report \u00b6 A good bug report shouldn't leave others needing to chase you up for more information. Therefore, we ask you to investigate carefully, collect information and describe the issue in detail in your report. Please complete the following steps in advance to help us fix any potential bug as fast as possible. Make sure that you are using the latest version. Determine if your bug is really a bug and not an error on your side. e.g. using incompatible environment components/versions (Make sure that you have read the documentation . If you are looking for support, you might want to check this section . To see if other users have experienced (and potentially already solved) the same issue you are having. Check if there is not already a bug report existing for your bug or error in the bug tracker . Also make sure to search the internet (including Stack Overflow) to see if users outside the GitHub community have discussed the issue. Collect information about the bug: Stack trace (Traceback) OS, Platform and Version (Windows, Linux, macOS, x86, ARM) Version of the interpreter, compiler, SDK, runtime environment, package manager, depending on what seems relevant. Possibly your input and the output Can you reliably reproduce the issue? And can you also reproduce it with older versions? How Do I Submit a Good Bug Report? \u00b6 You must never report security related issues, vulnerabilities or bugs including sensitive information to the issue tracker, or elsewhere in public. Instead sensitive bugs must be sent by email to security@iohk.io . We use GitHub issues to track bugs and errors. If you run into an issue with the project: Open an Issue . (Since we can't be sure at this point whether it is a bug or not, we ask you not to talk about a bug yet and not to label the issue.) Explain the behavior you would expect and the actual behavior. Please provide as much context as possible. Describe the reproduction steps that someone else can follow to recreate the issue on their own. This usually includes your code. For good bug reports you should isolate the problem and create a reduced test case. Provide the information you collected in the previous section. Once it's filed: The project team will label the issue accordingly. A team member will try to reproduce the issue with your provided steps. If there are no reproduction steps or no obvious way to reproduce the issue, the team will ask you for those steps. The issue would then be marked as needs-repro . Bugs with the needs-repro tag will not be addressed until they are reproduced. If the team is able to reproduce the issue, it will be marked bug . It may possibly be marked with other tags (such as critical ). The issue will then be left to be implemented by someone . Suggesting Enhancements \u00b6 This section guides you through submitting an enhancement suggestion for catalyst-libs, including completely new features and minor improvements to existing functionality . Following these guidelines will help maintainers and the community to understand your suggestion and find related suggestions. Before Submitting an Enhancement \u00b6 Make sure that you are using the latest version. Read the documentation carefully. Find out if the functionality is already covered, maybe by an individual configuration. Perform a search to see if the enhancement has already been suggested. If it has, add a comment to the existing issue instead of opening a new one. Find out whether your idea fits with the scope and aims of the project. It's up to you to make a strong case to convince the project's developers of the merits of this feature. Keep in mind that we want features that will be useful to the majority of our users and not just a small subset. If you're just targeting a minority of users, consider writing an add-on/plugin library. How Do I Submit a Good Enhancement Suggestion? \u00b6 Enhancement suggestions are tracked as GitHub issues . Use a clear and descriptive title for the issue to identify the suggestion. Provide a step-by-step description of the suggested enhancement in as many details as possible. Describe the current behavior and explain which behavior you expected to see instead and why. At this point you can also tell which alternatives do not work for you. You may want to include screenshots and animated GIFs . This can help you demonstrate the steps or point out the part which the suggestion is related to. You can use this tool to record GIFs on macOS and Windows, and this tool or this tool on Linux. Explain why this enhancement would be useful to most catalyst-libs users. You may also want to point out the other projects that solved it better and which could serve as inspiration. Your First Code Contribution \u00b6 Embarking on your first code contribution can be an exhilarating yet intimidating endeavor. Here at catalyst-libs, we foster a welcoming and supportive environment to ensure that everyone can contribute to the codebase irrespective of their experience level. Below is a step-by-step guide to making your first code contribution to our repository: Set Up Your Environment : Fork the repository to your GitHub account. Clone your fork locally on your machine. Set up the development environment following the instructions in the README. Pick an Issue : Browse through the open issues in the GitHub repository. Pick an issue that interests you and aligns with your skills. Beginners might look for issues tagged as good first issue or beginner-friendly . Understand the Issue : Thoroughly read through the issue to understand the problem. Ask clarifying questions in the issue thread if necessary. Branch Out : Create a new branch on your local machine to work on the issue. It's a good practice to name your branch descriptively, e.g., fix-button-bug. Work on the Issue : Work on the issue in your local development environment. Adhere to the coding standards and guidelines provided in the Style guides section. Test Your Changes : Ensure that your changes are well-tested. Verify that your changes don't break any existing functionality. Commit Your Changes : Write a clear and concise commit message following the Style guides -> Commit Messages section guidelines. Push Your Changes : Push your changes to your fork on GitHub. Open a Pull Request : Open a pull request from your fork to the main repository. Provide a detailed description of your changes, the issue it addresses, and any additional information that might help maintainers review your contribution. Review and Revision : Respond to any feedback from the maintainers. Make necessary revisions to your code. Merge and Celebrate : Once your pull request is approved, it will be merged into the main codebase. Celebrate your contribution and share it with the community! Remember, every contributor was new at some point, and we are thrilled to welcome new members to our community. The journey of becoming an adept open-source contributor is rewarding and educational. Your contribution, no matter how small, can make a significant impact. Happy coding! Improving The Documentation \u00b6 Documentation is a cornerstone of any successful open-source project. It aids developers in understanding the purpose, structure, and functioning of the code, making the project accessible to all, irrespective of their level of expertise. Our project thrives on the contributions from the community, and improving the documentation is one of the significant ways you can contribute. Here are some ways you could help improve our documentation: Clarification : If you find any ambiguous or unclear documentation, feel free to clarify the wording or suggest improvements through a pull request. Expansion : If areas of the documentation are lacking in detail or missing altogether, contributing expanded explanations or new sections is highly encouraged. Correction : Spot a mistake? Whether it's a spelling error, grammatical error, or incorrect information, your corrections are welcome. Examples : Adding examples to the documentation can significantly enhance utility. If you have examples that illustrate the use of our code, we'd love to include them. Consistency : Ensure the documentation maintains a consistent style and tone. Adhering to the style guidelines specified in our Style guides section is crucial. Technical Accuracy : Ensure that the documentation reflects the current state of the codebase and is technically accurate. Your contributions should follow the guidelines specified in our Style guides section to maintain high quality and consistency. Before making a substantial change, it's a good practice to open an issue to discuss the proposed changes or find an existing issue to work on. Together, we can ensure that our documentation is a valuable resource for all new and experienced developers. Style guides \u00b6 Rust \u00b6 For Rust, we follow the Rust Style Guide . Dart \u00b6 For Dart, we follow the Effective Dart style guide. Flutter \u00b6 For Flutter, we follow the Flutter Style Guide . Commit Messages \u00b6 Clear and consistent commit messages are crucial for maintaining a readable history in our collaborative environment. Adhering to a structured commit message format also enables us to generate changelogs and navigate through the project's history more efficiently. We follow the Conventional Commits standard for all commit messages in this repository. Here's a brief overview of the Conventional Commits standard: Type : The type of change being made (e.g., feat, fix, chore, docs, style, refactor, perf, test). Scope (Optional) : The scope of the change, denoting what part of the codebase is being altered. Description : A short, descriptive message of the change, written in the imperative mood. Format: <type>(<scope>): <description> Example: feat(button): add a 'submit' button to form component fix(modal): resolve issue with modal overlay not closing chore(tests): update unit tests for utilities module Breaking Changes : If your commit introduces a breaking change, it should be flagged with a ! after the type. Include BREAKING CHANGE: in the body or footer of the commit message to describe what changed and its implications. Example: feat!(dropdown): change the behavior of dropdown component BREAKING CHANGE: alters dropdown trigger to be activated on hover instead of on click. Footer (Optional) : Any additional metadata regarding your commit, such as related issue trackers or BREAKING CHANGE annotations. Following this format makes the version control history readable and reflects professionalism and foresight in maintaining a clean, well-documented codebase.","title":"Contributing"},{"location":"appendix/important/contributing/#contributing-to-catalyst-libs","text":"First off, thanks for taking the time to contribute! \u2764\ufe0f Contributing to Catalyst Libs Code of Conduct I Have a Question I Want To Contribute Reporting Bugs Before Submitting a Bug Report How Do I Submit a Good Bug Report? Suggesting Enhancements Before Submitting an Enhancement How Do I Submit a Good Enhancement Suggestion? Your First Code Contribution Improving The Documentation Style guides Rust Dart Flutter Commit Messages All types of contributions are encouraged and valued. Please make sure to read the relevant section before making your contribution. It will make it a lot easier for us maintainers and smooth out the experience for all involved. The community looks forward to your contributions. \ud83c\udf89","title":"Contributing to Catalyst Libs"},{"location":"appendix/important/contributing/#code-of-conduct","text":"This project and everyone participating in it is governed by the catalyst-libs Code of Conduct . By participating, you are expected to uphold this code. Please report unacceptable behavior to code-of-conduct@iohk.io .","title":"Code of Conduct"},{"location":"appendix/important/contributing/#i-have-a-question","text":"If you want to ask a question, we assume that you have read the available Documentation . Before you ask a question, it is best to search for existing Issues that might help you. In case you have found a suitable issue and still need clarification, you can write your question here . It is also advisable to search the internet for answers first. If you then still feel the need to ask a question and need clarification, we recommend the following: Open an Issue . Provide as much context as you can about what you're running into. Provide project and platform versions ( rustc --version --verbose , flutter doctor -v , etc), depending on what seems relevant. We will then take care of the issue as soon as possible.","title":"I Have a Question"},{"location":"appendix/important/contributing/#i-want-to-contribute","text":"","title":"I Want To Contribute"},{"location":"appendix/important/contributing/#reporting-bugs","text":"","title":"Reporting Bugs"},{"location":"appendix/important/contributing/#before-submitting-a-bug-report","text":"A good bug report shouldn't leave others needing to chase you up for more information. Therefore, we ask you to investigate carefully, collect information and describe the issue in detail in your report. Please complete the following steps in advance to help us fix any potential bug as fast as possible. Make sure that you are using the latest version. Determine if your bug is really a bug and not an error on your side. e.g. using incompatible environment components/versions (Make sure that you have read the documentation . If you are looking for support, you might want to check this section . To see if other users have experienced (and potentially already solved) the same issue you are having. Check if there is not already a bug report existing for your bug or error in the bug tracker . Also make sure to search the internet (including Stack Overflow) to see if users outside the GitHub community have discussed the issue. Collect information about the bug: Stack trace (Traceback) OS, Platform and Version (Windows, Linux, macOS, x86, ARM) Version of the interpreter, compiler, SDK, runtime environment, package manager, depending on what seems relevant. Possibly your input and the output Can you reliably reproduce the issue? And can you also reproduce it with older versions?","title":"Before Submitting a Bug Report"},{"location":"appendix/important/contributing/#how-do-i-submit-a-good-bug-report","text":"You must never report security related issues, vulnerabilities or bugs including sensitive information to the issue tracker, or elsewhere in public. Instead sensitive bugs must be sent by email to security@iohk.io . We use GitHub issues to track bugs and errors. If you run into an issue with the project: Open an Issue . (Since we can't be sure at this point whether it is a bug or not, we ask you not to talk about a bug yet and not to label the issue.) Explain the behavior you would expect and the actual behavior. Please provide as much context as possible. Describe the reproduction steps that someone else can follow to recreate the issue on their own. This usually includes your code. For good bug reports you should isolate the problem and create a reduced test case. Provide the information you collected in the previous section. Once it's filed: The project team will label the issue accordingly. A team member will try to reproduce the issue with your provided steps. If there are no reproduction steps or no obvious way to reproduce the issue, the team will ask you for those steps. The issue would then be marked as needs-repro . Bugs with the needs-repro tag will not be addressed until they are reproduced. If the team is able to reproduce the issue, it will be marked bug . It may possibly be marked with other tags (such as critical ). The issue will then be left to be implemented by someone .","title":"How Do I Submit a Good Bug Report?"},{"location":"appendix/important/contributing/#suggesting-enhancements","text":"This section guides you through submitting an enhancement suggestion for catalyst-libs, including completely new features and minor improvements to existing functionality . Following these guidelines will help maintainers and the community to understand your suggestion and find related suggestions.","title":"Suggesting Enhancements"},{"location":"appendix/important/contributing/#before-submitting-an-enhancement","text":"Make sure that you are using the latest version. Read the documentation carefully. Find out if the functionality is already covered, maybe by an individual configuration. Perform a search to see if the enhancement has already been suggested. If it has, add a comment to the existing issue instead of opening a new one. Find out whether your idea fits with the scope and aims of the project. It's up to you to make a strong case to convince the project's developers of the merits of this feature. Keep in mind that we want features that will be useful to the majority of our users and not just a small subset. If you're just targeting a minority of users, consider writing an add-on/plugin library.","title":"Before Submitting an Enhancement"},{"location":"appendix/important/contributing/#how-do-i-submit-a-good-enhancement-suggestion","text":"Enhancement suggestions are tracked as GitHub issues . Use a clear and descriptive title for the issue to identify the suggestion. Provide a step-by-step description of the suggested enhancement in as many details as possible. Describe the current behavior and explain which behavior you expected to see instead and why. At this point you can also tell which alternatives do not work for you. You may want to include screenshots and animated GIFs . This can help you demonstrate the steps or point out the part which the suggestion is related to. You can use this tool to record GIFs on macOS and Windows, and this tool or this tool on Linux. Explain why this enhancement would be useful to most catalyst-libs users. You may also want to point out the other projects that solved it better and which could serve as inspiration.","title":"How Do I Submit a Good Enhancement Suggestion?"},{"location":"appendix/important/contributing/#your-first-code-contribution","text":"Embarking on your first code contribution can be an exhilarating yet intimidating endeavor. Here at catalyst-libs, we foster a welcoming and supportive environment to ensure that everyone can contribute to the codebase irrespective of their experience level. Below is a step-by-step guide to making your first code contribution to our repository: Set Up Your Environment : Fork the repository to your GitHub account. Clone your fork locally on your machine. Set up the development environment following the instructions in the README. Pick an Issue : Browse through the open issues in the GitHub repository. Pick an issue that interests you and aligns with your skills. Beginners might look for issues tagged as good first issue or beginner-friendly . Understand the Issue : Thoroughly read through the issue to understand the problem. Ask clarifying questions in the issue thread if necessary. Branch Out : Create a new branch on your local machine to work on the issue. It's a good practice to name your branch descriptively, e.g., fix-button-bug. Work on the Issue : Work on the issue in your local development environment. Adhere to the coding standards and guidelines provided in the Style guides section. Test Your Changes : Ensure that your changes are well-tested. Verify that your changes don't break any existing functionality. Commit Your Changes : Write a clear and concise commit message following the Style guides -> Commit Messages section guidelines. Push Your Changes : Push your changes to your fork on GitHub. Open a Pull Request : Open a pull request from your fork to the main repository. Provide a detailed description of your changes, the issue it addresses, and any additional information that might help maintainers review your contribution. Review and Revision : Respond to any feedback from the maintainers. Make necessary revisions to your code. Merge and Celebrate : Once your pull request is approved, it will be merged into the main codebase. Celebrate your contribution and share it with the community! Remember, every contributor was new at some point, and we are thrilled to welcome new members to our community. The journey of becoming an adept open-source contributor is rewarding and educational. Your contribution, no matter how small, can make a significant impact. Happy coding!","title":"Your First Code Contribution"},{"location":"appendix/important/contributing/#improving-the-documentation","text":"Documentation is a cornerstone of any successful open-source project. It aids developers in understanding the purpose, structure, and functioning of the code, making the project accessible to all, irrespective of their level of expertise. Our project thrives on the contributions from the community, and improving the documentation is one of the significant ways you can contribute. Here are some ways you could help improve our documentation: Clarification : If you find any ambiguous or unclear documentation, feel free to clarify the wording or suggest improvements through a pull request. Expansion : If areas of the documentation are lacking in detail or missing altogether, contributing expanded explanations or new sections is highly encouraged. Correction : Spot a mistake? Whether it's a spelling error, grammatical error, or incorrect information, your corrections are welcome. Examples : Adding examples to the documentation can significantly enhance utility. If you have examples that illustrate the use of our code, we'd love to include them. Consistency : Ensure the documentation maintains a consistent style and tone. Adhering to the style guidelines specified in our Style guides section is crucial. Technical Accuracy : Ensure that the documentation reflects the current state of the codebase and is technically accurate. Your contributions should follow the guidelines specified in our Style guides section to maintain high quality and consistency. Before making a substantial change, it's a good practice to open an issue to discuss the proposed changes or find an existing issue to work on. Together, we can ensure that our documentation is a valuable resource for all new and experienced developers.","title":"Improving The Documentation"},{"location":"appendix/important/contributing/#style-guides","text":"","title":"Style guides"},{"location":"appendix/important/contributing/#rust","text":"For Rust, we follow the Rust Style Guide .","title":"Rust"},{"location":"appendix/important/contributing/#dart","text":"For Dart, we follow the Effective Dart style guide.","title":"Dart"},{"location":"appendix/important/contributing/#flutter","text":"For Flutter, we follow the Flutter Style Guide .","title":"Flutter"},{"location":"appendix/important/contributing/#commit-messages","text":"Clear and consistent commit messages are crucial for maintaining a readable history in our collaborative environment. Adhering to a structured commit message format also enables us to generate changelogs and navigate through the project's history more efficiently. We follow the Conventional Commits standard for all commit messages in this repository. Here's a brief overview of the Conventional Commits standard: Type : The type of change being made (e.g., feat, fix, chore, docs, style, refactor, perf, test). Scope (Optional) : The scope of the change, denoting what part of the codebase is being altered. Description : A short, descriptive message of the change, written in the imperative mood. Format: <type>(<scope>): <description> Example: feat(button): add a 'submit' button to form component fix(modal): resolve issue with modal overlay not closing chore(tests): update unit tests for utilities module Breaking Changes : If your commit introduces a breaking change, it should be flagged with a ! after the type. Include BREAKING CHANGE: in the body or footer of the commit message to describe what changed and its implications. Example: feat!(dropdown): change the behavior of dropdown component BREAKING CHANGE: alters dropdown trigger to be activated on hover instead of on click. Footer (Optional) : Any additional metadata regarding your commit, such as related issue trackers or BREAKING CHANGE annotations. Following this format makes the version control history readable and reflects professionalism and foresight in maintaining a clean, well-documented codebase.","title":"Commit Messages"},{"location":"appendix/important/license/","text":"License \u00b6 Apache 2 License Apache License Version 2.0, January 2004 http://www.apache.org/licenses/ TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION 1. Definitions. \"License\" shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document. \"Licensor\" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License. \"Legal Entity\" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, \"control\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. \"You\" (or \"Your\") shall mean an individual or Legal Entity exercising permissions granted by this License. \"Source\" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. \"Object\" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. \"Work\" shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below). \"Derivative Works\" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof. \"Contribution\" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \"submitted\" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \"Not a Contribution.\" \"Contributor\" shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work. 2. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form. 3. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed. 4. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions: (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and (b) You must cause any modified files to carry prominent notices stating that You changed the files; and (c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and (d) If the Work includes a \"NOTICE\" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License. 5. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions. 6. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file. 7. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License. 8. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages. 9. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability. END OF TERMS AND CONDITIONS APPENDIX: How to apply the Apache License to your work. To apply the Apache License to your work, attach the following boilerplate notice, with the fields enclosed by brackets \"[]\" replaced with your own identifying information. (Don't include the brackets!) The text should be enclosed in the appropriate comment syntax for the file format. We also recommend that a file or class name and description of purpose be included on the same \"printed page\" as the copyright notice for easier identification within third-party archives. Copyright (c) 2023 Input Output (IOG). Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and MIT License Copyright (c) 2023 Input Output (IOG). Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER","title":"License"},{"location":"appendix/important/license/#license","text":"Apache 2 License Apache License Version 2.0, January 2004 http://www.apache.org/licenses/ TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION 1. Definitions. \"License\" shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document. \"Licensor\" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License. \"Legal Entity\" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, \"control\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. \"You\" (or \"Your\") shall mean an individual or Legal Entity exercising permissions granted by this License. \"Source\" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. \"Object\" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. \"Work\" shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below). \"Derivative Works\" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof. \"Contribution\" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \"submitted\" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \"Not a Contribution.\" \"Contributor\" shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work. 2. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form. 3. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed. 4. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions: (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and (b) You must cause any modified files to carry prominent notices stating that You changed the files; and (c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and (d) If the Work includes a \"NOTICE\" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License. 5. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions. 6. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file. 7. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License. 8. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages. 9. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability. END OF TERMS AND CONDITIONS APPENDIX: How to apply the Apache License to your work. To apply the Apache License to your work, attach the following boilerplate notice, with the fields enclosed by brackets \"[]\" replaced with your own identifying information. (Don't include the brackets!) The text should be enclosed in the appropriate comment syntax for the file format. We also recommend that a file or class name and description of purpose be included on the same \"printed page\" as the copyright notice for easier identification within third-party archives. Copyright (c) 2023 Input Output (IOG). Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and MIT License Copyright (c) 2023 Input Output (IOG). Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER","title":"License"},{"location":"appendix/important/security/","text":"Security \u00b6 Reporting a Vulnerability \u00b6 Please report (suspected) security vulnerabilities to security@iohk.io . You will receive a response from us within 48 hours. If the issue is confirmed, we will release a patch as soon as possible. Please provide a clear and concise description of the vulnerability, including: the affected version(s), steps that can be followed to exercise the vulnerability, any workarounds or mitigations. If you have developed any code or utilities that can help demonstrate the suspected vulnerability, please mention them in your email but DO NOT attempt to include them as attachments as this may cause your Email to be blocked by spam filters.","title":"Security"},{"location":"appendix/important/security/#security","text":"","title":"Security"},{"location":"appendix/important/security/#reporting-a-vulnerability","text":"Please report (suspected) security vulnerabilities to security@iohk.io . You will receive a response from us within 48 hours. If the issue is confirmed, we will release a patch as soon as possible. Please provide a clear and concise description of the vulnerability, including: the affected version(s), steps that can be followed to exercise the vulnerability, any workarounds or mitigations. If you have developed any code or utilities that can help demonstrate the suspected vulnerability, please mention them in your email but DO NOT attempt to include them as attachments as this may cause your Email to be blocked by spam filters.","title":"Reporting a Vulnerability"},{"location":"architecture/","text":"Architecture \u00b6 About arc42 \u00b6 The architecture documentation is based upon the Arc42 documentation standard . arc42, the template for documentation of software and system architecture. Template Version 8.2 EN. (based upon AsciiDoc version), January 2023 Created, maintained and \u00a9 by Dr. Peter Hruschka, Dr. Gernot Starke and contributors. See https://arc42.org .","title":"Index"},{"location":"architecture/#architecture","text":"","title":"Architecture"},{"location":"architecture/#about-arc42","text":"The architecture documentation is based upon the Arc42 documentation standard . arc42, the template for documentation of software and system architecture. Template Version 8.2 EN. (based upon AsciiDoc version), January 2023 Created, maintained and \u00a9 by Dr. Peter Hruschka, Dr. Gernot Starke and contributors. See https://arc42.org .","title":"About arc42"},{"location":"architecture/01_introduction_and_goals/","text":"Introduction and Goals \u00b6 Requirements Overview \u00b6 Quality Goals \u00b6 Main quality goals: Quality Category Quality Description Usable User experience The libraries should offer an intuitive and easy-to-navigate interface Usable Correctness The functionality provided by the libraries should deliver accurate and expected results Secure Access control Role-Based Access Control Secure Privacy User information are kept private Secure Accountability Actions and results generated by the libraries should be traceable and auditable by authorized parties Reliable Fail-safe In case of failures, the libraries should be designed to prevent data loss and ensure system stability Stakeholders \u00b6 Role/Name Contact Product-Owner Mike Developers Catalyst-Team Users Catalyst-Community Admin Danny SRE Josh Testers Catalyst-QA-Team","title":"Introduction and Goals"},{"location":"architecture/01_introduction_and_goals/#introduction-and-goals","text":"","title":"Introduction and Goals"},{"location":"architecture/01_introduction_and_goals/#requirements-overview","text":"","title":"Requirements Overview"},{"location":"architecture/01_introduction_and_goals/#quality-goals","text":"Main quality goals: Quality Category Quality Description Usable User experience The libraries should offer an intuitive and easy-to-navigate interface Usable Correctness The functionality provided by the libraries should deliver accurate and expected results Secure Access control Role-Based Access Control Secure Privacy User information are kept private Secure Accountability Actions and results generated by the libraries should be traceable and auditable by authorized parties Reliable Fail-safe In case of failures, the libraries should be designed to prevent data loss and ensure system stability","title":"Quality Goals"},{"location":"architecture/01_introduction_and_goals/#stakeholders","text":"Role/Name Contact Product-Owner Mike Developers Catalyst-Team Users Catalyst-Community Admin Danny SRE Josh Testers Catalyst-QA-Team","title":"Stakeholders"},{"location":"architecture/02_architecture_constraints/","text":"Architecture Constraints \u00b6","title":"Architecture Constraints"},{"location":"architecture/02_architecture_constraints/#architecture-constraints","text":"","title":"Architecture Constraints"},{"location":"architecture/03_system_scope_and_context/","text":"System Scope and Context \u00b6 Business Context \u00b6 ... ~Diagram or Table~ ... ~optionally: Explanation of external domain interfaces~ Technical Context \u00b6 ... ~Diagram or Table~ ... ~optionally: Explanation of technical interfaces~ ... ~Mapping Input/Output to Channels~","title":"System Scope and Context"},{"location":"architecture/03_system_scope_and_context/#system-scope-and-context","text":"","title":"System Scope and Context"},{"location":"architecture/03_system_scope_and_context/#business-context","text":"... ~Diagram or Table~ ... ~optionally: Explanation of external domain interfaces~","title":"Business Context"},{"location":"architecture/03_system_scope_and_context/#technical-context","text":"... ~Diagram or Table~ ... ~optionally: Explanation of technical interfaces~ ... ~Mapping Input/Output to Channels~","title":"Technical Context"},{"location":"architecture/04_solution_strategy/","text":"Solution Strategy \u00b6","title":"Solution Strategy"},{"location":"architecture/04_solution_strategy/#solution-strategy","text":"","title":"Solution Strategy"},{"location":"architecture/05_building_block_view/","text":"Building Block View \u00b6 White box Overall System \u00b6 ... ~Overview Diagram~ Motivation ... ~text explanation~ Contained Building Blocks ... ~Description of contained building block (black boxes)~ Important Interfaces ... ~Description of important interfaces~ ~Name black box 1~ \u00b6 ... Purpose/Responsibility ... Interface(s) ... ~(Optional) Quality/Performance Characteristics~ ... ~(Optional) Directory/File Location~ ... ~(Optional) Fulfilled Requirements~ ... ~(optional) Open Issues/Problems/Risks~ ~Name black box 2~ \u00b6 ... ~black box template~ ~Name black box n~ \u00b6 ... ~black box template~ ~Name interface 1~ \u00b6 \u2026 ~Name interface m~ \u00b6 Level 2 \u00b6 White Box ~building block 1~ \u00b6 ... ~white box template~ White Box ~building block 2~ \u00b6 ... ~white box template~ \u2026 White Box ~building block m~ \u00b6 ... ~white box template~ Level 3 \u00b6 White Box ~_building block x.1_~ \u00b6 ... ~white box template~ White Box ~_building block x.2_~ \u00b6 ... ~white box template~ White Box ~_building block y.1_~ \u00b6 ... ~white box template~","title":"Building Block View"},{"location":"architecture/05_building_block_view/#building-block-view","text":"","title":"Building Block View"},{"location":"architecture/05_building_block_view/#white-box-overall-system","text":"... ~Overview Diagram~ Motivation ... ~text explanation~ Contained Building Blocks ... ~Description of contained building block (black boxes)~ Important Interfaces ... ~Description of important interfaces~","title":"White box Overall System"},{"location":"architecture/05_building_block_view/#name-black-box-1","text":"... Purpose/Responsibility ... Interface(s) ... ~(Optional) Quality/Performance Characteristics~ ... ~(Optional) Directory/File Location~ ... ~(Optional) Fulfilled Requirements~ ... ~(optional) Open Issues/Problems/Risks~","title":"~Name black box 1~"},{"location":"architecture/05_building_block_view/#name-black-box-2","text":"... ~black box template~","title":"~Name black box 2~"},{"location":"architecture/05_building_block_view/#name-black-box-n","text":"... ~black box template~","title":"~Name black box n~"},{"location":"architecture/05_building_block_view/#name-interface-1","text":"\u2026","title":"~Name interface 1~"},{"location":"architecture/05_building_block_view/#name-interface-m","text":"","title":"~Name interface m~"},{"location":"architecture/05_building_block_view/#level-2","text":"","title":"Level 2"},{"location":"architecture/05_building_block_view/#white-box-building-block-1","text":"... ~white box template~","title":"White Box ~building block 1~"},{"location":"architecture/05_building_block_view/#white-box-building-block-2","text":"... ~white box template~ \u2026","title":"White Box ~building block 2~"},{"location":"architecture/05_building_block_view/#white-box-building-block-m","text":"... ~white box template~","title":"White Box ~building block m~"},{"location":"architecture/05_building_block_view/#level-3","text":"","title":"Level 3"},{"location":"architecture/05_building_block_view/#white-box-_building-block-x1_","text":"... ~white box template~","title":"White Box ~_building block x.1_~"},{"location":"architecture/05_building_block_view/#white-box-_building-block-x2_","text":"... ~white box template~","title":"White Box ~_building block x.2_~"},{"location":"architecture/05_building_block_view/#white-box-_building-block-y1_","text":"... ~white box template~","title":"White Box ~_building block y.1_~"},{"location":"architecture/06_runtime_view/","text":"Runtime View \u00b6 ~Runtime Scenario 1~ \u00b6 ~insert runtime diagram or textual description of the scenario~ ~insert description of the notable aspects of the interactions between the building block instances depicted in this diagram.~ ~Runtime Scenario 2~ \u00b6 \u2026 \u00b6 ~Runtime Scenario n~ \u00b6","title":"Runtime View"},{"location":"architecture/06_runtime_view/#runtime-view","text":"","title":"Runtime View"},{"location":"architecture/06_runtime_view/#runtime-scenario-1","text":"~insert runtime diagram or textual description of the scenario~ ~insert description of the notable aspects of the interactions between the building block instances depicted in this diagram.~","title":"~Runtime Scenario 1~"},{"location":"architecture/06_runtime_view/#runtime-scenario-2","text":"","title":"~Runtime Scenario 2~"},{"location":"architecture/06_runtime_view/#_1","text":"","title":"\u2026"},{"location":"architecture/06_runtime_view/#runtime-scenario-n","text":"","title":"~Runtime Scenario n~"},{"location":"architecture/07_deployment_view/","text":"Deployment View \u00b6 Infrastructure Level 1 \u00b6 ... ~Overview Diagram~ Motivation ... ~explanation in text form~ Quality and/or Performance Features ... ~explanation in text form~ Mapping of Building Blocks to Infrastructure ... ~description of the mapping~ Infrastructure Level 2 \u00b6 ~Infrastructure Element 1~ \u00b6 ... ~diagram + explanation~ ~Infrastructure Element 2~ \u00b6 ... ~diagram + explanation~ \u2026 ~Infrastructure Element n~ \u00b6 ... ~diagram + explanation~","title":"Deployment View"},{"location":"architecture/07_deployment_view/#deployment-view","text":"","title":"Deployment View"},{"location":"architecture/07_deployment_view/#infrastructure-level-1","text":"... ~Overview Diagram~ Motivation ... ~explanation in text form~ Quality and/or Performance Features ... ~explanation in text form~ Mapping of Building Blocks to Infrastructure ... ~description of the mapping~","title":"Infrastructure Level 1"},{"location":"architecture/07_deployment_view/#infrastructure-level-2","text":"","title":"Infrastructure Level 2"},{"location":"architecture/07_deployment_view/#infrastructure-element-1","text":"... ~diagram + explanation~","title":"~Infrastructure Element 1~"},{"location":"architecture/07_deployment_view/#infrastructure-element-2","text":"... ~diagram + explanation~ \u2026","title":"~Infrastructure Element 2~"},{"location":"architecture/07_deployment_view/#infrastructure-element-n","text":"... ~diagram + explanation~","title":"~Infrastructure Element n~"},{"location":"architecture/11_technical_risks/","text":"Risks and Technical Debts \u00b6","title":"Risks and Technical Debts"},{"location":"architecture/11_technical_risks/#risks-and-technical-debts","text":"","title":"Risks and Technical Debts"},{"location":"architecture/12_glossary/","text":"Glossary \u00b6 Term Definition Term-1 definition-1 Term-2 definition-2","title":"Glossary"},{"location":"architecture/12_glossary/#glossary","text":"Term Definition Term-1 definition-1 Term-2 definition-2","title":"Glossary"},{"location":"architecture/08_concepts/","text":"Cross-cutting Concepts \u00b6 Each Concept will be documented in its own set of markdown files/images under this folder.","title":"Cross-cutting Concepts"},{"location":"architecture/08_concepts/#cross-cutting-concepts","text":"Each Concept will be documented in its own set of markdown files/images under this folder.","title":"Cross-cutting Concepts"},{"location":"architecture/08_concepts/cardano_chain_follower/follower_instances/","text":"Cardano Chain Follower Instances \u00b6 This document details how the individual chain follower instances are organized within the Hermes runtime extension. Basic Principles \u00b6 There are 3 primary cardano networks, Mainnet, Preprod and Preview. We will often be syncing from TIP or Genesis, and after synchronization we will be syncing from Tip eventually. A node follower is a reasonably heavy process, and every connection to a relay node also adds load to the relay node itself. It is not efficient or necessary to have multiple followers syncing from the same point as the data stream is identical. Pool of Node followers \u00b6 We will maintain a Pool of active node followers. When a wasm module in an application subscribes to a Node followers data stream, IF there is a pre-existing node follower which can serve its needs, then it should simply receive the events from that stream. It will not create a new stream for every subscription. When the last subscriber to a Node followers connection/stream unsubscribes, it will stop the connection. This means that there is not one follower per application, there is one follower per stream type. For example, if a wasm module subscribes to a stream of events from Genesis, and Tip, it will have two active streams. If a second application also subscribes to Genesis, it can retrieve the same events and there is no need to start a third follower. Implementation details \u00b6 Application modules can subscribe to events from Tip, Genesis OR a particular block within the block chain. There are a number of considerations which should be handled to make stream selection efficient. There is also a case where a stream is requested to \"continue\" and it needs special handling to be efficient. Maximizing the number of listeners to an event stream \u00b6 We want to maximize the number of listeners to individual event streams. This will improve efficiency overall. If two applications both request a stream of blocks from mainnet, from Genesis. Then ideally they both listen to the same stream. However, both applications can start asynchronously, and there is no guarantee when each application or module will subscribe to the stream. This can cause the following situation (These event all happen in rapid succession in this example): App 1 subscribes to genesis. Connection to Node occurs, and block 1 is received, and sent to App 1. App 2 subscribes to genesis. The first connection can not be used because we are already past genesis on that stream, so we need to create a second stream. The problem here is we have two streams, but they are only 1 block apart. Further, based on timing it may be that either exceeds the other depending on how fast their individual connection to the relay is. This is not ideal. There are a number of ways this can be solved. Use a block cache for recent blocks, so that subscriptions that are close in time can use the same stream by re-using blocks from the cache. Delay when we connect a stream to allow for the maximum number of subscribers. Optimizing the streams on the fly. For example if 2 streams are at different points, but they could catch up and become equal. the moment they become equal one of the streams is closed and all block data is now taken from a single stream. This is likely to occur, for example a follower from Tip and Genesis. Once the Genesis follower has reached tip we now have two followers from Tip when only 1 is required. An ideal solution may need multiple techniques. Note: There may be other techniques and these are just some obvious solutions to the issue. For the initial implementation of the Follower, we will employ technique 2 and a limited version of Technique 3 ONLY. Delaying starting of the streams \u00b6 When a stream is subscribed, and it results in a new stream, then the connection to that relay node will not happen for 5 seconds. Any further subscriptions to the same stream can then be added to the pending connection. Once the connection is made, then further subscriptions will only be added to it if they are valid for that connection. Otherwise a second connection is established, again with its own 5 second start delay. This delay occurs regardless of where the stream is to start from Tip, Genesis or a particular block. Optimizing the streams \u00b6 If we have two followers for a particular network, and they are BOTH on TIP, then one is stopped and all subscribers for it are moved to the other. This needs to check that not only are they both reported to be on TIP, but that the TIPs are identical. We do not need to do any other stream optimization at this time. The purpose of this is to ensure that once followers have fully synced we are not running excessive followers that are doing the same work and reporting the same events. Handling \"Continue\" connections \u00b6 There is an option to listen to a stream from \"Continue\" but what does \"Continue\" actually mean? If there are multiple streams it could match on, which one does it match? We will use the rule that if \"Continue\" is specified, it means \"Follow the blockchain with the earliest blocks\". So if there are three followers, one from Genesis, one from block 10,000 and one from Tip. \"Continue\" will join the Genesis follower. There is a further condition for \"Continue\" which is what happens if \"Continue\" is specified but there are no blockchain followers running or pending for the same Application? This can only happen either at the start of world for a particular Application OR an Application has unsubscribed from all blockchain events. In this case the \"Continue\" subscription should be added to list of continue subscriptions for each application. When a block is received and about to be sent as an event to an application, we can check the \"Continue\" list for that app, If there are subscriptions in that list, and the event is from the oldest active follower for the app then they are removed from that list, and added as active subscriptions to the selected follower. Then all subscribed modules in the app (including any recently added from the continue list) are sent the event. Further Optimizations \u00b6 The initial set of connection optimizations are detailed here. Further connection optimization work will only be conducted after these are implemented and the characteristics of the followers running in a Hermes environment are better understood.","title":"Cardano Chain Follower Instances"},{"location":"architecture/08_concepts/cardano_chain_follower/follower_instances/#cardano-chain-follower-instances","text":"This document details how the individual chain follower instances are organized within the Hermes runtime extension.","title":"Cardano Chain Follower Instances"},{"location":"architecture/08_concepts/cardano_chain_follower/follower_instances/#basic-principles","text":"There are 3 primary cardano networks, Mainnet, Preprod and Preview. We will often be syncing from TIP or Genesis, and after synchronization we will be syncing from Tip eventually. A node follower is a reasonably heavy process, and every connection to a relay node also adds load to the relay node itself. It is not efficient or necessary to have multiple followers syncing from the same point as the data stream is identical.","title":"Basic Principles"},{"location":"architecture/08_concepts/cardano_chain_follower/follower_instances/#pool-of-node-followers","text":"We will maintain a Pool of active node followers. When a wasm module in an application subscribes to a Node followers data stream, IF there is a pre-existing node follower which can serve its needs, then it should simply receive the events from that stream. It will not create a new stream for every subscription. When the last subscriber to a Node followers connection/stream unsubscribes, it will stop the connection. This means that there is not one follower per application, there is one follower per stream type. For example, if a wasm module subscribes to a stream of events from Genesis, and Tip, it will have two active streams. If a second application also subscribes to Genesis, it can retrieve the same events and there is no need to start a third follower.","title":"Pool of Node followers"},{"location":"architecture/08_concepts/cardano_chain_follower/follower_instances/#implementation-details","text":"Application modules can subscribe to events from Tip, Genesis OR a particular block within the block chain. There are a number of considerations which should be handled to make stream selection efficient. There is also a case where a stream is requested to \"continue\" and it needs special handling to be efficient.","title":"Implementation details"},{"location":"architecture/08_concepts/cardano_chain_follower/follower_instances/#maximizing-the-number-of-listeners-to-an-event-stream","text":"We want to maximize the number of listeners to individual event streams. This will improve efficiency overall. If two applications both request a stream of blocks from mainnet, from Genesis. Then ideally they both listen to the same stream. However, both applications can start asynchronously, and there is no guarantee when each application or module will subscribe to the stream. This can cause the following situation (These event all happen in rapid succession in this example): App 1 subscribes to genesis. Connection to Node occurs, and block 1 is received, and sent to App 1. App 2 subscribes to genesis. The first connection can not be used because we are already past genesis on that stream, so we need to create a second stream. The problem here is we have two streams, but they are only 1 block apart. Further, based on timing it may be that either exceeds the other depending on how fast their individual connection to the relay is. This is not ideal. There are a number of ways this can be solved. Use a block cache for recent blocks, so that subscriptions that are close in time can use the same stream by re-using blocks from the cache. Delay when we connect a stream to allow for the maximum number of subscribers. Optimizing the streams on the fly. For example if 2 streams are at different points, but they could catch up and become equal. the moment they become equal one of the streams is closed and all block data is now taken from a single stream. This is likely to occur, for example a follower from Tip and Genesis. Once the Genesis follower has reached tip we now have two followers from Tip when only 1 is required. An ideal solution may need multiple techniques. Note: There may be other techniques and these are just some obvious solutions to the issue. For the initial implementation of the Follower, we will employ technique 2 and a limited version of Technique 3 ONLY.","title":"Maximizing the number of listeners to an event stream"},{"location":"architecture/08_concepts/cardano_chain_follower/follower_instances/#delaying-starting-of-the-streams","text":"When a stream is subscribed, and it results in a new stream, then the connection to that relay node will not happen for 5 seconds. Any further subscriptions to the same stream can then be added to the pending connection. Once the connection is made, then further subscriptions will only be added to it if they are valid for that connection. Otherwise a second connection is established, again with its own 5 second start delay. This delay occurs regardless of where the stream is to start from Tip, Genesis or a particular block.","title":"Delaying starting of the streams"},{"location":"architecture/08_concepts/cardano_chain_follower/follower_instances/#optimizing-the-streams","text":"If we have two followers for a particular network, and they are BOTH on TIP, then one is stopped and all subscribers for it are moved to the other. This needs to check that not only are they both reported to be on TIP, but that the TIPs are identical. We do not need to do any other stream optimization at this time. The purpose of this is to ensure that once followers have fully synced we are not running excessive followers that are doing the same work and reporting the same events.","title":"Optimizing the streams"},{"location":"architecture/08_concepts/cardano_chain_follower/follower_instances/#handling-continue-connections","text":"There is an option to listen to a stream from \"Continue\" but what does \"Continue\" actually mean? If there are multiple streams it could match on, which one does it match? We will use the rule that if \"Continue\" is specified, it means \"Follow the blockchain with the earliest blocks\". So if there are three followers, one from Genesis, one from block 10,000 and one from Tip. \"Continue\" will join the Genesis follower. There is a further condition for \"Continue\" which is what happens if \"Continue\" is specified but there are no blockchain followers running or pending for the same Application? This can only happen either at the start of world for a particular Application OR an Application has unsubscribed from all blockchain events. In this case the \"Continue\" subscription should be added to list of continue subscriptions for each application. When a block is received and about to be sent as an event to an application, we can check the \"Continue\" list for that app, If there are subscriptions in that list, and the event is from the oldest active follower for the app then they are removed from that list, and added as active subscriptions to the selected follower. Then all subscribed modules in the app (including any recently added from the continue list) are sent the event.","title":"Handling \"Continue\" connections"},{"location":"architecture/08_concepts/cardano_chain_follower/follower_instances/#further-optimizations","text":"The initial set of connection optimizations are detailed here. Further connection optimization work will only be conducted after these are implemented and the characteristics of the followers running in a Hermes environment are better understood.","title":"Further Optimizations"},{"location":"architecture/08_concepts/cardano_chain_follower/overview/","text":"1. Overview \u00b6 The cardano-chain-follower crate provides functionality to read arbitrary blocks and follow updates (new blocks and rollbacks) from a Cardano network (e.g. mainnet, preprod). Currently, the all communication with a Cardano node (remote or local) is done using the Node-to-Node protocol . A Mithril snapshot can be configured to be used both when reading blocks and following chain updates. The Pallas crate is used under the hood to provide node communication, block parsing and other Cardano chain features. 1.1 Chain Follow \u00b6 The chain follower is capable of receiving chain updates from a Cardano node using the ChainSync miniprotocol. Read pointer \u00b6 The read pointer points at the location the chain is being read by a client connection. Chain Updates \u00b6 The chain follower spawns a background task that keeps a Node-to-Node connection to a Cardano node and continuously receives updates from it and sends them to the follower using a async channel. A chain update can be either a roll forward (a new block added to the chain) or a rollback. If any node communication error happens in the background task, this is also sent through the channel. If the follower has been configured to use a Mithril snapshot, it will generate synthetic roll forward chain updates for each block until the snapshot's tip is reached. After that, updates are received from the node. If any errors occur while reading the block from the Mithril snapshot (e.g. the block is missing from the snapshot, I/O errors) the background task will fallback to receiving the failed block from the Cardano node. Below is a simplified flow diagram of the background task's process for producing chain updates. A. Chain update flow diagram \u00b6 1.2 Chain Read \u00b6 NOTE: Reading blocks does not affect the follower read pointer. When reading a single or a range of arbitrary blocks from the chain the follower initiates a new connection with the configured node blocks are read using the Blockfetch miniprotocol. If configured, available blocks are read from the Mithril snapshot as well. When a block is requested, the follower will try reading the block from the Mithril snapshot first (if configured) and, only if the block is not found, it'll ask the connected node for the block. When a range of blocks is requested, the follower will try reading as many blocks as it can from the Mithril snapshot (if configured) and, if any blocks are not contained in the snapshot, it'll ask the connected node for them. Below is a simplified flow diagram of the block reading logic. A. Single block flow diagram \u00b6 B. Block range flow diagram \u00b6","title":"1. Overview"},{"location":"architecture/08_concepts/cardano_chain_follower/overview/#1-overview","text":"The cardano-chain-follower crate provides functionality to read arbitrary blocks and follow updates (new blocks and rollbacks) from a Cardano network (e.g. mainnet, preprod). Currently, the all communication with a Cardano node (remote or local) is done using the Node-to-Node protocol . A Mithril snapshot can be configured to be used both when reading blocks and following chain updates. The Pallas crate is used under the hood to provide node communication, block parsing and other Cardano chain features.","title":"1. Overview"},{"location":"architecture/08_concepts/cardano_chain_follower/overview/#11-chain-follow","text":"The chain follower is capable of receiving chain updates from a Cardano node using the ChainSync miniprotocol.","title":"1.1 Chain Follow"},{"location":"architecture/08_concepts/cardano_chain_follower/overview/#read-pointer","text":"The read pointer points at the location the chain is being read by a client connection.","title":"Read pointer"},{"location":"architecture/08_concepts/cardano_chain_follower/overview/#chain-updates","text":"The chain follower spawns a background task that keeps a Node-to-Node connection to a Cardano node and continuously receives updates from it and sends them to the follower using a async channel. A chain update can be either a roll forward (a new block added to the chain) or a rollback. If any node communication error happens in the background task, this is also sent through the channel. If the follower has been configured to use a Mithril snapshot, it will generate synthetic roll forward chain updates for each block until the snapshot's tip is reached. After that, updates are received from the node. If any errors occur while reading the block from the Mithril snapshot (e.g. the block is missing from the snapshot, I/O errors) the background task will fallback to receiving the failed block from the Cardano node. Below is a simplified flow diagram of the background task's process for producing chain updates.","title":"Chain Updates"},{"location":"architecture/08_concepts/cardano_chain_follower/overview/#a-chain-update-flow-diagram","text":"","title":"A. Chain update flow diagram"},{"location":"architecture/08_concepts/cardano_chain_follower/overview/#12-chain-read","text":"NOTE: Reading blocks does not affect the follower read pointer. When reading a single or a range of arbitrary blocks from the chain the follower initiates a new connection with the configured node blocks are read using the Blockfetch miniprotocol. If configured, available blocks are read from the Mithril snapshot as well. When a block is requested, the follower will try reading the block from the Mithril snapshot first (if configured) and, only if the block is not found, it'll ask the connected node for the block. When a range of blocks is requested, the follower will try reading as many blocks as it can from the Mithril snapshot (if configured) and, if any blocks are not contained in the snapshot, it'll ask the connected node for them. Below is a simplified flow diagram of the block reading logic.","title":"1.2 Chain Read"},{"location":"architecture/08_concepts/cardano_chain_follower/overview/#a-single-block-flow-diagram","text":"","title":"A. Single block flow diagram"},{"location":"architecture/08_concepts/cardano_chain_follower/overview/#b-block-range-flow-diagram","text":"","title":"B. Block range flow diagram"},{"location":"architecture/08_concepts/catalyst_voting/crypto/","text":"Cryptography Schema \u00b6 Title: Voting Protocol Cryptography Schema Status: Proposed Authors: - Alex Pozhylenkov alex.pozhylenkov@iohk.io Created: 2024-09-06 Abstract \u00b6 This voting protocol is based on this paper and on this specification , so all formal definitions described in this document you can find there. It provides a fully anonymous, secured, verifiable schema of casting votes and performing tally process for executing \"Catalyst\" fund events. Motivation \u00b6 Specification \u00b6 Preliminaries \u00b6 The protocol is based around the following entities: Proposal - voting subject on which each voter will be cast their votes. Proposal voting options - a proposal options array, e.g. \\([Yes, No, Abstain]\\) . Voting committee - a special trusted entity, which perform tally process and revealing the results of the tallying. Such committee consists of the 1 person. Voters - actors who actually performing the voting by posting ballots with their voting choices. Election public key \\(pk\\) - committees generated public key, which is shared across all voters and used for vote's encryption and tallying processes. Voter's voting power - an integer value which defines a voting power for a specific voter. This value could be equals to \\(1\\) for every voter, so everyone would be equal in their voting rights. Or it could be defined based on their stake in the blockchain, which is more appropriate for web3 systems. Important to note that the protocol defined for single proposal. Obviously, it could be easily scaled for a set of proposals, performing protocol steps in parallel. Initial setup \u00b6 Before any voting will start an initial setup procedure should be performed. Define an array of voting options/choices for a proposal, e.g. \\([Yes, No, Abstain]\\) . Voting committee must generate a shared election public key \\(pk\\) and distribute it among voters. A corresponding private key (secret share) \\(sk\\) will be used to perform tally. Define for each voter their own voting power. Basically this step could be done at any point of time, but before the tally. As most of the crypto algorithms are group dependent (more about this you can read in appendix A ), it is needed to specifically define which cryptographically secure group would be used. Define a commitment key \\(ck\\) , which will be used during the voter proof generation and verification procedures. Vote \u00b6 A voter could cast a vote for some proposal. To do that, obviously, a voting choice should be made and encoded in specific format. For achieving anonymity this voting choice must be homomorphically encrypted, using the specific election public key \\(pk\\) , so afterwards voting committee could perform tally. It is also important for the voter to generate a cryptographically secured proof, that he has generated and encrypted a vote correctly and according to the protocol, and everyone would be able to verify it. So we will preserve anonymity without lacking transparency and correctness. Voting choice \u00b6 For some proposal, voter generates a unit vector \\(\\mathbf{e}_i\\) , the length of such vector must be equal to the amount of the voting options of the proposal. \\(i\\) corresponds to the proposal voting choice and defines that the \\(i\\) -th component of the unit vector equals to \\(1\\) and the rest components are equals to \\(0\\) . And it stands as an identifier of the unit vector and could varies \\(0 \\le i \\le M - 1\\) , \\(M\\) - amount of the voting options. E.g. proposal has voting options \\([Yes, No, Abstain]\\) : \\(\\mathbf{e}_0\\) equals to \\((1,0,0)\\) corresponds to \\(Yes\\) \\(\\mathbf{e}_1\\) equals to \\((0,1,0)\\) corresponds to \\(No\\) \\(\\mathbf{e}_2\\) equals to \\((0,0,1)\\) corresponds to \\(Abstain\\) Lets \\(e_{i,j}\\) denote as an each component value of the unit vector \\(\\mathbf{e}_i\\) . Where \\(i\\) is a unit vector's identifier as it was described before, \\(j\\) index of the unit vector's component, which could varies \\(1 \\le j \\le M\\) , \\(M\\) - amount of the voting options and equals to the length of the unit vector. Using such notation unit vector \\(\\mathbf{e}_i\\) could be defined as \\[\\begin{equation} \\mathbf{e}_i = [e_{i,0}, \\ldots, e_{i,M - 1}] \\end{equation}\\] E.g. for the unit vector \\(\\mathbf{e}_0 = [1,0,0]\\) components would be defined as follows: \\(e_{0, 0}\\) equals to \\(1\\) \\(e_{0, 1}\\) equals to \\(0\\) \\(e_{0, 2}\\) equals to \\(0\\) Vote encryption \u00b6 After the choice is done (described in section ), vote must be encrypted using shared election public key \\(pk\\) . To achieve that, Lifted ElGamal encryption algorithm is used ElGamalEnc , noted as \\(VoteEnc(message, randomness, public \\; key)\\) . More detailed description of the lifted ElGamal algorithm you can find in the appendix B . \\(VoteEnc(message, randomness, public \\; key)\\) algorithm produces a ciphertext \\(c\\) with the generated randomness \\(r\\) as a result. \\begin{equation} c, r = VoteEnc(message, public \\; key) \\end{equation} To encrypt previously generated unit vector \\(\\mathbf{e}_i\\) ( \\(i\\) - voting choice identifier), for each vector component value \\(e_{i,j}\\) generate a corresponding randomness. Lets denote randomness value as \\(r_j\\) , where \\(j\\) is the same vector component's index \\(j\\) value, \\(e_{i, j} => r_j\\) . Then, for each vector component \\(e_{i,j}\\) with the corresponding randomness \\(r_j\\) , perform encryption algorithm applying shared election public key \\(pk\\) . \\begin{equation} c_j, r_j = VoteEnc(e_{i,j}, pk) \\end{equation} As a result getting a vector \\(\\mathbf{c}\\) of ciphertext values \\(c_f\\) , with the size equals of the size \\(\\mathbf{e}_t\\) unit vector, equals to the amount of the voting options. Lets denote this vector as: \\begin{equation} \\mathbf{c}, \\mathbf{r} = [(c_0, r_0), \\ldots, (c_{M-1}, r_{M-1})] = (VoteEnc(e_{i,j}, pk), \\ldots, VoteEnc(e_{i,M - 1}, pk)) \\end{equation} where \\(M\\) is the voting options amount and \\(i\\) is the index of the voting choice. This is a first part of the published vote for a specific proposal. Voter's proof \u00b6 After the voter's choice is generated and encrypted, it is crucial to prove that encoding and encryption are formed correctly (i.e. that the voter indeed encrypt a unit vector). Because by the definition of the encryption algorithm \\(VoteEnc(message, public \\; key)\\) encrypts any message value, it is not restricted for encryption only \\(0\\) and \\(1\\) values (as it was stated in the previous section , unit vector components only could be \\(0\\) or \\(1\\) ). That's why it is needed to generate such a proof, so everyone could validate a correctness of the encrypted vote data, without revealing a voting choice itself. To achieve that a some sophisticated ZK (Zero Knowledge) algorithm is used, noted as \\(VoteProof(\\mathbf{c}, \\mathbf{e}_i, \\mathbf{r}, pk, ck)\\) . It takes an encrypted vote vector \\(\\mathbf{c}\\) , an original vote unit vector \\(\\mathbf{e}_i\\) , a randomness vector \\(\\mathbf{r}\\) , which was used during encryption algorithm \\(VoteEnc\\) a shared election public key \\(pk\\) and a commitment key \\(ck\\) . As a result it generates a proof value \\(\\pi\\) . \\begin{equation} \\pi = VoteProof(\\mathbf{c}, \\mathbf{e}_i, \\mathbf{r}, pk, ck) \\end{equation} So to validate a \\(VoteCheck(\\mathbf{c}, \\pi, pk, ck)\\) procedure should be used, which takes an encrypted vote \\(\\mathbf{c}\\) , corresponded proof \\(\\pi\\) , the same shared election public key \\(pk\\) and a commitment key \\(ck\\) as arguments and returns true or false , is it valid or not. \\begin{equation} true | false = VoteCheck(\\mathbf{c}, \\pi, pk, ck) \\end{equation} A more detailed description of how \\(VoteProof\\) , \\(VoteCheck\\) work you can find in the appendix D . Vote publishing \u00b6 After all these procedures are done, a final step is to publish an encrypted vote \\(\\mathbf{c}\\) and voter's proof \\(\\pi\\) corresponded to this choice. It could be published using any public channel, e.g. blockchain, ipfs or through p2p network. Tally \u00b6 After voters performed voting procedure and encrypted votes are published, tally could be executed by the voting committee. Important to note, voting committee doing tally does not revealing personal voting choices. By the result of tally procedure means an accumulated sum of voting power for each voting option of the proposal, based on published votes. E.g.: proposal with voting options \\([Yes, No, Abstain]\\) two different voters with their voting power: \"Alice\" with voting power \\(10\\) \"Bob\" with voting power \\(30\\) these voter's published their choices on this proposal: \"Alice\" voted \\(Yes\\) \"Bob\" voted \\(No\\) final result would be the following: \\(Yes\\) accumulated \\(10\\) \\(No\\) accumulated \\(30\\) \\(Abstain\\) accumulated \\(0\\) So to replicate the same process but securely, based on the set of encrypted votes \\(\\mathbf{c}\\) , a special \\(Tally\\) , \\(TallyDec\\) and \\(TallyProof\\) algorithms are used. Homomorphic tally \u00b6 To perform homomorphic tally of the encrypted set of votes, \\(Tally\\) algorithm is used which described in appendix C . It takes as an input the following: \\([\\mathbf{c_1}, \\mathbf{c_2}, \\ldots, \\mathbf{c}_{N}]\\) - an array of all published encrypted vote's. \\([\\alpha_1, \\alpha_2, \\ldots, \\alpha_N]\\) - an array of corresponded voter's voting power. \\(i\\) - voting option index. Where \\(N\\) - votes amount. And produce an encrypted tally result for voting option \\(i\\) . \\begin{equation} er_i = Tally(i, [\\mathbf{c_1}, \\mathbf{c_2}, \\ldots, \\mathbf{c_N}], [\\alpha_1, \\alpha_2, \\ldots, \\alpha_N]) \\end{equation} E.g. a proposal with voting choices \\([Yes, No]\\) , votes \\([\\mathbf{c_1}, \\mathbf{c_2}]\\) , voting powers \\([\\alpha_1, \\alpha_2]\\) and election secret key \\(sk\\) . Encrypted result for option \\(Yes\\) : \\(er_1 = Tally(1, [\\mathbf{c_1}, \\mathbf{c_2}], [\\alpha_1, \\alpha_2])\\) . Encrypted result for option \\(No\\) : \\(er_2 = Tally(2, [\\mathbf{c_1}, \\mathbf{c_2}], [\\alpha_1, \\alpha_2])\\) Tally decryption \u00b6 To decrypt each calculated tally result from the previous step , \\(TallyDec\\) is used, which is technically a common \\(ElGamalDec\\) algorithm described in appendix B . It takes as an input the following: \\(sk\\) - an election private key held by voting committee. \\(er_i\\) - an encrypted tally result for the specific voting option defined for a proposal. It produces a decrypted tally result for the voting option of a proposal. \\begin{equation} r_i = ElGamalDec(er_i, sk) = TallyDec(er_i, sk) \\end{equation} This decrypted tally result is an exact result of the voting procedure, which represents an outcome of the election process. E.g. a proposal with voting choices \\([Yes, No]\\) , encrypted tally results \\([er_1, er_2]\\) and election secret key \\(sk\\) . Decrypted result for option \\(Yes\\) : \\(r_1 = TallyDec(er_1, sk)\\) . Decrypted result for option \\(No\\) : \\(r_2 = TallyDec(er_2, sk)\\) Tally proof \u00b6 An important step for bringing transparency and exclude misbehaving from the voting committee, a corresponded proof for each decrypted tally result must be generated. It is necessary to verify that encrypted tally was decrypted exactly by using committee secret key, and not any other. So the publicly published decrypted tally result (a final tally result) actually is correct and represents a proper election outcome. To do that, a sophisticated ZK (Zero Knowledge) \\(TallyProof\\) algorithm is used. Which proofs that a provided encrypted tally result value \\(er\\) was decrypted into tally result \\(r\\) using the exact secret key \\(sk\\) , which is corresponded to the already known shared election public key \\(pk\\) . \\begin{equation} \\pi = TallyProof(er, sk) \\end{equation} So to validate a \\(TallyCheck(er, r, pk, \\pi)\\) procedure should be used, which takes an encrypted tally result \\(er\\) , decrypted tally result \\(r\\) , election public key \\(pk\\) and corresponded proof \\(\\pi\\) as arguments and returns true or false , is it valid or not. \\begin{equation} true | false = TallyCheck(er, r, pk, \\pi) \\end{equation} A more detailed description of how \\(TallyProof\\) , \\(TallyCheck\\) work you can find in the appendix E . Tally publishing \u00b6 After all these procedures are done, a final step is to publish an encrypted tally results \\(er_i\\) , decrypted tally results \\(r_i\\) and tally proofs \\(\\pi_i\\) corresponded for each voting option of some proposal. It could be published using any public channel, e.g. blockchain, ipfs or through p2p network. A: Group Definition \u00b6 Important to note that some crypto algorithms, which are described below, are group \\(\\mathbb{G}\\) dependant. More detailed about groups you can find at section 8.2.1 section on this book . Therefore, the generalized notation of the group operation used - \\(\\circ\\) . And defined as follows: For all \\(a, b \\in \\mathbb{G}\\) , \\(a \\circ b = c\\) , where \\(c \\in \\mathbb{G}\\) . For all \\(a \\in \\mathbb{G}\\) , and \\(n \\in \\mathbb{Z}\\) , \\(a^n = a \\circ a \\ldots \\circ a\\) ( \\(n\\) - times). There is an element noted as \\(1\\) , called neutral element, such that \\(a \\circ 1 = a\\) , for all \\(a \\in \\mathbb{G}\\) . For each element \\(a \\in \\mathbb{G}\\) exists \\(a^{-1} \\in \\mathbb{G}\\) , called the inversed of \\(a\\) , such that \\(a \\circ a^{-1} = a^{-1} \\circ a = 1\\) . B: Lifted ElGamal Encryption/Decryption \u00b6 Lifted ElGamal encryption schema is defined over any cyclic group \\(\\mathbb{G}\\) of order \\(q\\) with group generator \\(g\\) ( \\(g \\in \\mathbb{G}\\) ). It could be multiplicative group of integers modulo \\(n\\) or some elliptic curve over the finite field group. More detailed how group operations are defined, described in appendix A . Encryption \u00b6 Lifted ElGamal encryption algorithm takes as arguments: \\(m\\) - message ( \\(m \\in \\mathbb{Z}_q\\) ) \\(r\\) - randomness ( \\(r \\in \\mathbb{Z}_q\\) ) \\(pk\\) - public key ( \\(pk \\in \\mathbb{G}\\) ) \\[\\begin{equation} ElGamalEnc(m, r, pk) = (c_1, c_2) = c, \\end{equation}\\] \\[\\begin{equation} c_1 = g^r, \\quad c_2 = g^m \\circ pk^r \\end{equation}\\] \\(c\\) - is a resulted ciphertext which consists of two elements \\(c_1, c_2 \\in \\mathbb{G}\\) . Decryption \u00b6 Lifted ElGamal decryption algorithm takes as arguments: \\(c\\) - ciphertext, \\(sk\\) - secret key ( \\(sk \\in \\mathbb{Z}_q\\) ) \\[\\begin{equation} ElGamalDec(c, sk) = Dlog(c_2 \\circ c_1^{-sk}) = m \\end{equation}\\] \\(m\\) - an original message which was encrypted on the previous step, \\(Dlog(x)\\) is a discrete logarithm of \\(x\\) . Note that since \\(Dlog\\) is not efficient, the message space should be a small set, say \\(m \\in \\{0,1\\}^{\\xi}\\) , for \\(\\xi \\le 30\\) . C: Homomorphic Tally \u00b6 Homomorphic tally schema is defined over any cyclic group \\(\\mathbb{G}\\) of order \\(q\\) with group generator \\(g\\) ( \\(g \\in \\mathbb{G}\\) ). More detailed how group operations are defined, described in appendix A . Homomorphic tally algorithm takes as arguments: \\(i\\) - voting choice index \\([\\mathbf{c_1}, \\mathbf{c_2}, \\ldots, \\mathbf{c_N}]\\) - an array of encrypted votes vector's, where \\(N\\) - votes amount \\([\\alpha_1, \\alpha_2, \\ldots, \\alpha_N]\\) - an array of corresponded voter's voting power, where \\(N\\) - votes amount \\[\\begin{equation} Tally(i, [\\mathbf{c_1}, \\mathbf{c_2}, \\ldots, \\mathbf{c_N}], [\\alpha_1, \\alpha_2, \\ldots, \\alpha_N]) = c_{1, i}^{\\alpha_1} \\circ c_{2, i}^{\\alpha_2} \\circ \\ldots \\circ c_{N, i}^{\\alpha_N} = er_i \\end{equation}\\] Where \\(c_{j, i}\\) - an encrypted corresponded \\(i\\) -th vector's component of the encrypted vote \\(\\mathbf{c_j}\\) . As it was stated in this section each encrypted vote is a vector \\(\\mathbf{c_j} = (c_{j, 1}, \\ldots, c_{j, M})\\) , \\(M\\) - number of voting choices. \\(er_i\\) noted as encrypted tally result for the provided \\(i\\) -th voting choice. As it is not an open decrypted value yet, it needs a decryption procedure corresponded for which encryption one was made. Important to note that the resulted value \\(er_i\\) is a ciphertext, the same as \\(c_{j, i}\\) . So \\(er_i = (er_{i, 1}, er_{i, 2})\\) consists of elements \\(er_{i, 1}, er_{i, 2} \\in \\mathbb{G}\\) . Operations which are applied for pair \\(c_{j, i} \\circ c_{j+1, i}\\) , actually means the following: \\[\\begin{equation} c_{j, i} \\circ c_{j+1, i} = (c_{j, i, 1} \\circ c_{j+1, i, 1},\\quad c_{j, i, 2} \\circ c_{j+1, i, 2}) \\end{equation}\\] So \\(\\circ\\) operation applied separately for each corresponding items of the ciphertexts \\(c_{j, i}, c_{j+1, i}\\) and in the result we are getting a new ciphertext. D: Non-Interactive ZK Vote Proof \u00b6 Non-Interactive ZK (Zero Knowledge) Vote Proof algorithm helps to solve only one problem, to prove that the encrypted voting choice is exactly a some unit vector, which consists of only one is \\(1\\) value and others are \\(0\\) . A more detailed and formal description you can find in the section 2.4 of this paper . It is assumed that the original encryption and decryption is performing by ElGamal scheme. It means that all described operations is also group dependent (more about groups described in appendix A ). Prover \u00b6 The prover algorithm takes as arguments: \\(\\mathbf{c} = (c_0, \\ldots, c_{M-1})\\) - encrypted vote (a vector of ciphertext), where \\(M\\) is amount of voting options. \\(\\mathbf{e}_i = (e_{i,0},\\ldots, e_{i,M-1})\\) - original voting choice, a unit vector, where \\(M\\) is amount of voting options and \\(i\\) is an index of the voting choice. \\(\\mathbf{r} = (r_0, \\ldots, r_{M-1})\\) - a vector of randomnesses, which was used during encryption. \\(pk\\) - is a public key, which was used to encrypt a unit vector. \\(ck \\in \\mathbb{G}\\) - a commitment key. So basically here is the relation between all these values: \\begin{equation} \\mathbf{c} = (c_1, \\ldots, c_M) = (VoteEnc(e_{i,1}, r_1, pk), \\ldots, VoteEnc(e_{i,M}, r_M, pk)) \\end{equation} \\[\\begin{equation} VoteProof(\\mathbf{c}, \\mathbf{e}_i, \\mathbf{r}, pk, ck) = \\pi \\end{equation}\\] Important to note that the following notation would be used \\(\\{a_i\\}\\) - which is a set of some elements \\(a_i\\) . \\(\\pi\\) is the final proof. To compute it, prover needs to perform the next steps: If the number of voting options \\(M\\) is not a perfect power of \\(2\\) , extend the vector \\(\\mathbf{c}\\) with \\(c_j = VoteEnc(0, 0, pk)\\) , where \\(N\\) is a perfect power of \\(2\\) , \\(j \\in [M, \\ldots, N - 1]\\) . So the resulted \\(\\mathbf{c} = (c_1, \\ldots, c_M, \\{c_j\\})\\) . Let \\(i_k\\) is a bit value of the \\(i\\) -th binary representation (little-endian order), where \\(k \\in [0, log_2(N) - 1]\\) . E.g. \\(i=3\\) and \\(N=8, log_2(N) = 3\\) , its binary representation \\(i=011\\) , \\(i_0=1, i_1=1, i_2=0\\) . For \\(l \\in [0, \\ldots, log_2(N)-1]\\) generate a random values \\(\\alpha_l, \\beta_l, \\gamma_l, \\delta_l, \\in \\mathbb{Z}_q\\) . For \\(l \\in [0, \\ldots, log_2(N)-1]\\) calculate, where \\(g\\) is the group generator: \\(I_l = g^{i_l} \\circ ck^{\\alpha_l}, I_l \\in \\mathbb{G}\\) . \\(B_l = g^{\\beta_l} \\circ ck^{\\gamma_l}, B_l \\in \\mathbb{G}\\) . \\(A_l = g^{i_l * \\beta_l} \\circ ck^{\\delta_l}, A_l \\in \\mathbb{G}\\) . Calculate a first verifier challenge \\(ch_1 = H(ck, pk, \\{c_j\\}, \\{I_l\\}, \\{B_l\\}, \\{A_l\\})\\) , where \\(H\\) is BLAKE2b-512 hash function, \\(j \\in [0, \\ldots, N-1]\\) and \\(l \\in [0, \\ldots, log_2(N)-1]\\) . For \\(j \\in [0, \\ldots, N-1]\\) calculate polynomials in the following form \\(p_j(x) = e_{i, j}*x^{log_2(N)} + \\sum_{l=0}^{log_2(N)-1} p_{j,l} * x^l\\) : \\(j_l\\) is a bit value of the \\(j\\) -th binary representation (same as was described in step 2 ). \\(z_l^{1} = i_l * x + \\beta_l\\) . \\(z_l^{0} = x - z_l^{1} = (1 - i_l)*x - \\beta_l\\) . Calculate the polynomial itself \\(p_j(x) = \\prod_{l=0}^{log_2(N)-1} z_l^{j_l}\\) For \\(l \\in [0, \\ldots, log_2(N)-1]\\) generate a random \\(R_l \\in \\mathbb{Z}_q\\) . For \\(l \\in [0, \\ldots, log_2(N)-1]\\) compute \\(D_l = VoteEnc(sum_l, R_l, pk)\\) , where \\(sum_l = \\sum_{j=0}^{N-1}(p_{j,l} * ch_1^j)\\) and \\(p_{j,l}\\) - corresponding coefficients of the polynomial \\(p_j(x)\\) calculated on step 7 . Calculate a second verifier challenge \\(ch_2 = H(ch_1, \\{D_l\\})\\) , where \\(H\\) is BLAKE2b-512 hash function and \\(l \\in [0, \\ldots, log_2(N)-1]\\) . For \\(l \\in [0, \\ldots, log_2(N)-1]\\) calculate: \\(z_l = i_l * ch_2 + \\beta_l, z_l \\in \\mathbb{Z}_q\\) . \\(w_l = \\alpha_l * ch_2 + \\gamma_l, w_l \\in \\mathbb{Z}_q\\) . \\(v_l = \\alpha_l * (ch_2 - z_l) + \\delta_l, v_l \\in \\mathbb{Z}_q\\) . Calculate \\(R=\\sum_{j=0}^{N-1}(r_j * (ch_2)^{log_2(N)} * (ch_1)^j) + \\sum_{l=0}^{log_2(N)-1}(R_l * (ch_2)^l)\\) , where \\(r_j\\) original random values which was used to encrypt \\(c_j\\) and \\(R_l\\) random values generated in step 8 . Finally, the proof is \\(\\pi = (\\{I_l\\}, \\{B_l\\}, \\{A_l\\}, \\{D_l\\}, \\{z_l\\}, \\{w_l\\}, \\{v_l\\}, R)\\) , where \\(l \\in [0, \\ldots, log_2(N)-1]\\) . Verifier \u00b6 The verifier algorithm takes as arguments: \\(\\mathbf{c} = (c_0, \\ldots, c_{M-1})\\) - encrypted vote (a vector of ciphertext), where \\(M\\) is amount of voting options. \\(\\pi\\) - a prover's proof generated on the previous step \\(pk\\) - is a public key, which was used to encrypt a unit vector. \\(ck \\in \\mathbb{G}\\) - a commitment key, same which was used by the prover. \\[\\begin{equation} VoteCheck(\\mathbf{c}, \\pi, pk, ck) = true | false \\end{equation}\\] As a result algorithm will return true or false , is the verification was succeeded or not respectively. Knowing that \\(\\pi\\) equals to \\((\\{I_l\\}, \\{B_l\\}, \\{A_l\\}, \\{D_l\\}, \\{z_l\\}, \\{w_l\\}, \\{v_l\\}, R)\\) , verifier needs to perform the next steps: If the number of voting options \\(M\\) is not a perfect power of \\(2\\) , extend the vector \\(\\mathbf{c}\\) with \\(c_j = VoteEnc(0, 0, pk)\\) , where \\(N\\) is a perfect power of \\(2\\) , \\(j \\in [M, \\ldots, N - 1]\\) . So the resulted \\(\\mathbf{c} = (c_1, \\ldots, c_M, \\{c_j\\})\\) . Calculate the first verifier challenge \\(ch_1 = H(ck, pk, \\{c_j\\}, \\{I_l\\}, \\{B_l\\}, \\{A_l\\})\\) , where \\(H\\) is BLAKE2b-512 hash function, \\(j \\in [0, \\ldots, N-1]\\) and \\(l \\in [0, \\ldots, log_2(N)-1]\\) . Calculate a second verifier challenge \\(ch_2 = H(ch_1, \\{D_l\\})\\) , where \\(H\\) is BLAKE2b-512 hash function and \\(l \\in [0, \\ldots, log_2(N)-1]\\) . For \\(l \\in [0, \\ldots, log_2(N)-1]\\) verify that the following statements are true , where \\(g\\) is the group generator: \\((I_l)^{ch_2} \\circ B_l == g^{z_l} \\circ ck^{w_l}\\) . \\((I_l)^{ch_2 - z_l} \\circ A_l == g^{0} \\circ ck^{v_l}\\) . Calculate the following \\(Left = VoteEnc(0, R, pk)\\) . Note that the \\(Left\\) is a ciphertext, \\(Left = (Left_1, Left_2)\\) . Note that \\(D_l\\) is a ciphertext, \\(D_l = (D_{l,1}, D_{l,2})\\) , for \\(l \\in [0, \\ldots, log_2(N)-1]\\) calculate the following: \\(Right2_1 = (D_{0,1})^{ch_2^{0}} \\circ \\ldots \\circ (D_{log_2(N) - 1,1})^{ch_2^{log_2(N) - 1}}\\) . \\(Right2_2 = (D_{0,2})^{ch_2^{0}} \\circ \\ldots \\circ (D_{log_2(N) - 1,2})^{ch_2^{log_2(N) - 1}}\\) . For \\(j \\in [0, \\ldots, N-1]\\) calculate the \\(p_j(ch_2)\\) , where \\(p_j\\) is a prover's defined polynomial defined in step 7 : \\(j_l\\) is a bit value of the \\(j\\) -th binary representation. \\(z_l^1 = z_j\\) . \\(z_l^0 = ch_2 - z_j^1\\) . \\(p_j(ch_2) = \\prod_l^{log_2(N)-1} z_l^{j_l}\\) . For \\(j \\in [0, \\ldots, N-1]\\) calculate the \\(P_j = VoteEnc(-p_j(ch_2), 0, pk)\\) . Note that the \\(P_j\\) is a ciphertext, \\(P_j = (P_{j,1}, P_{j,2})\\) . Note that \\(C_j\\) is a ciphertext, \\(C_j = (C_{j,1}, C_{j,2})\\) , for \\(j \\in [0, \\ldots, N-1]\\) calculate: \\(Right1_{j,1} = (C_{j,1})^{ch_2^{log_2(N)}} \\circ (P_{j,1})^{ch_1^{j}}\\) . \\(Right1_{j,2} = (C_{j,2})^{ch_2^{log_2(N)}} \\circ (P_{j,2})^{ch_1^{j}}\\) . \\(Right1_{1} = Right1_{j,1} \\circ \\ldots \\circ Right1_{N - 1, 1}\\) . \\(Right1_{2} = Right1_{j,2} \\circ \\ldots \\circ Right1_{N - 1, 2}\\) . Verify that the following statements are true : \\(Right1_{1} \\circ Right2_1 == Left_1\\) . \\(Right1_{2} \\circ Right2_2 == Left_2\\) . If step 4 and 10 returns true so the final result is true otherwise return false . E: Non-Interactive ZK Tally Proof \u00b6 Non-Interactive ZK (Zero Knowledge) Tally Proof algorithm helps to solve only one problem, to prove that the specific encrypted message was decrypted into the specific resulted value, using exactly that secret key, which is corresponds to the some shared public key. It is a slightly modified version of the algorithm described in the sections Fig. 10 and 2.1.5 of this paper . It is assumed that the original encryption and decryption is performing by ElGamal scheme. It means that all described operations is also group dependent (more about groups described in appendix A ). Prover \u00b6 The prover algorithm takes as arguments: \\(enc\\) - an encrypted message (ciphertext). \\(sk\\) - a secret key which was used to decrypt a message \\(enc\\) . \\[\\begin{equation} TallyProof(enc, sk) = \\pi \\end{equation}\\] \\(\\pi\\) is the final proof. To compute it, prover needs to perform the next steps: Take the first element of the ciphertext \\(enc = (enc_1, enc_2)\\) . Calculate \\(d = enc_1^{sk}, \\quad d \\in \\mathbb{G}\\) . Generate a random value \\(\\mu, \\quad \\mu \\in \\mathbb{Z}_q\\) . Compute \\(A_1 = g^{\\mu}\\) , where \\(g\\) is the group generator ( \\(A_1 \\in \\mathbb{G}\\) ). Compute \\(A_2 = (enc_1)^{\\mu}, \\quad A_2 \\in \\mathbb{G}\\) . Compute \\(\u0441 = H(pk, d, g, enc_1, A_1, A_2)\\) , where \\(pk\\) is a corresponding public key of \\(sk\\) , \\(H\\) is a hash function. Compute \\(z = sk * \u0441 + \\mu, \\quad z \\in \\mathbb{Z}_q\\) . Finally, the proof is \\(\\pi = (\u0441, z)\\) . Verifier \u00b6 The verifier algorithm takes as arguments: \\(enc\\) - an encrypted message (ciphertext). \\(dec\\) - a decrypted message from the encrypted ciphertext \\(enc\\) . \\(pk\\) - a public key corresponded to the \\(sk\\) which was supposedly used to decrypt a message \\(enc\\) . \\(\\pi\\) - a prover's proof generated on the previous step . \\[\\begin{equation} TallyCheck(enc, dec, pk, \\pi) = true | false \\end{equation}\\] As a result algorithm will return true or false , is the verification was succeeded or not respectively. Knowing that \\(\\pi\\) equals to \\((\u0441, z)\\) , verifier needs to perform the next steps: Take the first and second elements \\(enc_1, enc_2\\) of the ciphertext \\(enc = (enc_1, enc_2)\\) . Calculate \\(d = enc_2 \\circ g^{-dec}, \\quad d \\in \\mathbb{G}\\) . Calculate \\(A_1 = g^{z} \\circ pk^{-c}, \\quad A_1 \\in \\mathbb{G}\\) . Calculate \\(A_2 = enc_1^{z} \\circ d^{-c}, \\quad A_2 \\in \\mathbb{G}\\) . Compute \\(\u04412 = H(pk, d, g, enc_1, A_1, A_2)\\) , where \\(g\\) is the group generator. Verify \\(\u0441 == \u04412\\) . If step 6 returns true so the final result is true otherwise return false . Rationale \u00b6 Path to Active \u00b6 Acceptance Criteria \u00b6 Implementation Plan \u00b6","title":"Crypto"},{"location":"architecture/08_concepts/catalyst_voting/crypto/#cryptography-schema","text":"Title: Voting Protocol Cryptography Schema Status: Proposed Authors: - Alex Pozhylenkov alex.pozhylenkov@iohk.io Created: 2024-09-06","title":"Cryptography Schema"},{"location":"architecture/08_concepts/catalyst_voting/crypto/#abstract","text":"This voting protocol is based on this paper and on this specification , so all formal definitions described in this document you can find there. It provides a fully anonymous, secured, verifiable schema of casting votes and performing tally process for executing \"Catalyst\" fund events.","title":"Abstract"},{"location":"architecture/08_concepts/catalyst_voting/crypto/#motivation","text":"","title":"Motivation"},{"location":"architecture/08_concepts/catalyst_voting/crypto/#specification","text":"","title":"Specification"},{"location":"architecture/08_concepts/catalyst_voting/crypto/#preliminaries","text":"The protocol is based around the following entities: Proposal - voting subject on which each voter will be cast their votes. Proposal voting options - a proposal options array, e.g. \\([Yes, No, Abstain]\\) . Voting committee - a special trusted entity, which perform tally process and revealing the results of the tallying. Such committee consists of the 1 person. Voters - actors who actually performing the voting by posting ballots with their voting choices. Election public key \\(pk\\) - committees generated public key, which is shared across all voters and used for vote's encryption and tallying processes. Voter's voting power - an integer value which defines a voting power for a specific voter. This value could be equals to \\(1\\) for every voter, so everyone would be equal in their voting rights. Or it could be defined based on their stake in the blockchain, which is more appropriate for web3 systems. Important to note that the protocol defined for single proposal. Obviously, it could be easily scaled for a set of proposals, performing protocol steps in parallel.","title":"Preliminaries"},{"location":"architecture/08_concepts/catalyst_voting/crypto/#initial-setup","text":"Before any voting will start an initial setup procedure should be performed. Define an array of voting options/choices for a proposal, e.g. \\([Yes, No, Abstain]\\) . Voting committee must generate a shared election public key \\(pk\\) and distribute it among voters. A corresponding private key (secret share) \\(sk\\) will be used to perform tally. Define for each voter their own voting power. Basically this step could be done at any point of time, but before the tally. As most of the crypto algorithms are group dependent (more about this you can read in appendix A ), it is needed to specifically define which cryptographically secure group would be used. Define a commitment key \\(ck\\) , which will be used during the voter proof generation and verification procedures.","title":"Initial setup"},{"location":"architecture/08_concepts/catalyst_voting/crypto/#vote","text":"A voter could cast a vote for some proposal. To do that, obviously, a voting choice should be made and encoded in specific format. For achieving anonymity this voting choice must be homomorphically encrypted, using the specific election public key \\(pk\\) , so afterwards voting committee could perform tally. It is also important for the voter to generate a cryptographically secured proof, that he has generated and encrypted a vote correctly and according to the protocol, and everyone would be able to verify it. So we will preserve anonymity without lacking transparency and correctness.","title":"Vote"},{"location":"architecture/08_concepts/catalyst_voting/crypto/#voting-choice","text":"For some proposal, voter generates a unit vector \\(\\mathbf{e}_i\\) , the length of such vector must be equal to the amount of the voting options of the proposal. \\(i\\) corresponds to the proposal voting choice and defines that the \\(i\\) -th component of the unit vector equals to \\(1\\) and the rest components are equals to \\(0\\) . And it stands as an identifier of the unit vector and could varies \\(0 \\le i \\le M - 1\\) , \\(M\\) - amount of the voting options. E.g. proposal has voting options \\([Yes, No, Abstain]\\) : \\(\\mathbf{e}_0\\) equals to \\((1,0,0)\\) corresponds to \\(Yes\\) \\(\\mathbf{e}_1\\) equals to \\((0,1,0)\\) corresponds to \\(No\\) \\(\\mathbf{e}_2\\) equals to \\((0,0,1)\\) corresponds to \\(Abstain\\) Lets \\(e_{i,j}\\) denote as an each component value of the unit vector \\(\\mathbf{e}_i\\) . Where \\(i\\) is a unit vector's identifier as it was described before, \\(j\\) index of the unit vector's component, which could varies \\(1 \\le j \\le M\\) , \\(M\\) - amount of the voting options and equals to the length of the unit vector. Using such notation unit vector \\(\\mathbf{e}_i\\) could be defined as \\[\\begin{equation} \\mathbf{e}_i = [e_{i,0}, \\ldots, e_{i,M - 1}] \\end{equation}\\] E.g. for the unit vector \\(\\mathbf{e}_0 = [1,0,0]\\) components would be defined as follows: \\(e_{0, 0}\\) equals to \\(1\\) \\(e_{0, 1}\\) equals to \\(0\\) \\(e_{0, 2}\\) equals to \\(0\\)","title":"Voting choice"},{"location":"architecture/08_concepts/catalyst_voting/crypto/#vote-encryption","text":"After the choice is done (described in section ), vote must be encrypted using shared election public key \\(pk\\) . To achieve that, Lifted ElGamal encryption algorithm is used ElGamalEnc , noted as \\(VoteEnc(message, randomness, public \\; key)\\) . More detailed description of the lifted ElGamal algorithm you can find in the appendix B . \\(VoteEnc(message, randomness, public \\; key)\\) algorithm produces a ciphertext \\(c\\) with the generated randomness \\(r\\) as a result. \\begin{equation} c, r = VoteEnc(message, public \\; key) \\end{equation} To encrypt previously generated unit vector \\(\\mathbf{e}_i\\) ( \\(i\\) - voting choice identifier), for each vector component value \\(e_{i,j}\\) generate a corresponding randomness. Lets denote randomness value as \\(r_j\\) , where \\(j\\) is the same vector component's index \\(j\\) value, \\(e_{i, j} => r_j\\) . Then, for each vector component \\(e_{i,j}\\) with the corresponding randomness \\(r_j\\) , perform encryption algorithm applying shared election public key \\(pk\\) . \\begin{equation} c_j, r_j = VoteEnc(e_{i,j}, pk) \\end{equation} As a result getting a vector \\(\\mathbf{c}\\) of ciphertext values \\(c_f\\) , with the size equals of the size \\(\\mathbf{e}_t\\) unit vector, equals to the amount of the voting options. Lets denote this vector as: \\begin{equation} \\mathbf{c}, \\mathbf{r} = [(c_0, r_0), \\ldots, (c_{M-1}, r_{M-1})] = (VoteEnc(e_{i,j}, pk), \\ldots, VoteEnc(e_{i,M - 1}, pk)) \\end{equation} where \\(M\\) is the voting options amount and \\(i\\) is the index of the voting choice. This is a first part of the published vote for a specific proposal.","title":"Vote encryption"},{"location":"architecture/08_concepts/catalyst_voting/crypto/#voters-proof","text":"After the voter's choice is generated and encrypted, it is crucial to prove that encoding and encryption are formed correctly (i.e. that the voter indeed encrypt a unit vector). Because by the definition of the encryption algorithm \\(VoteEnc(message, public \\; key)\\) encrypts any message value, it is not restricted for encryption only \\(0\\) and \\(1\\) values (as it was stated in the previous section , unit vector components only could be \\(0\\) or \\(1\\) ). That's why it is needed to generate such a proof, so everyone could validate a correctness of the encrypted vote data, without revealing a voting choice itself. To achieve that a some sophisticated ZK (Zero Knowledge) algorithm is used, noted as \\(VoteProof(\\mathbf{c}, \\mathbf{e}_i, \\mathbf{r}, pk, ck)\\) . It takes an encrypted vote vector \\(\\mathbf{c}\\) , an original vote unit vector \\(\\mathbf{e}_i\\) , a randomness vector \\(\\mathbf{r}\\) , which was used during encryption algorithm \\(VoteEnc\\) a shared election public key \\(pk\\) and a commitment key \\(ck\\) . As a result it generates a proof value \\(\\pi\\) . \\begin{equation} \\pi = VoteProof(\\mathbf{c}, \\mathbf{e}_i, \\mathbf{r}, pk, ck) \\end{equation} So to validate a \\(VoteCheck(\\mathbf{c}, \\pi, pk, ck)\\) procedure should be used, which takes an encrypted vote \\(\\mathbf{c}\\) , corresponded proof \\(\\pi\\) , the same shared election public key \\(pk\\) and a commitment key \\(ck\\) as arguments and returns true or false , is it valid or not. \\begin{equation} true | false = VoteCheck(\\mathbf{c}, \\pi, pk, ck) \\end{equation} A more detailed description of how \\(VoteProof\\) , \\(VoteCheck\\) work you can find in the appendix D .","title":"Voter's proof"},{"location":"architecture/08_concepts/catalyst_voting/crypto/#vote-publishing","text":"After all these procedures are done, a final step is to publish an encrypted vote \\(\\mathbf{c}\\) and voter's proof \\(\\pi\\) corresponded to this choice. It could be published using any public channel, e.g. blockchain, ipfs or through p2p network.","title":"Vote publishing"},{"location":"architecture/08_concepts/catalyst_voting/crypto/#tally","text":"After voters performed voting procedure and encrypted votes are published, tally could be executed by the voting committee. Important to note, voting committee doing tally does not revealing personal voting choices. By the result of tally procedure means an accumulated sum of voting power for each voting option of the proposal, based on published votes. E.g.: proposal with voting options \\([Yes, No, Abstain]\\) two different voters with their voting power: \"Alice\" with voting power \\(10\\) \"Bob\" with voting power \\(30\\) these voter's published their choices on this proposal: \"Alice\" voted \\(Yes\\) \"Bob\" voted \\(No\\) final result would be the following: \\(Yes\\) accumulated \\(10\\) \\(No\\) accumulated \\(30\\) \\(Abstain\\) accumulated \\(0\\) So to replicate the same process but securely, based on the set of encrypted votes \\(\\mathbf{c}\\) , a special \\(Tally\\) , \\(TallyDec\\) and \\(TallyProof\\) algorithms are used.","title":"Tally"},{"location":"architecture/08_concepts/catalyst_voting/crypto/#homomorphic-tally","text":"To perform homomorphic tally of the encrypted set of votes, \\(Tally\\) algorithm is used which described in appendix C . It takes as an input the following: \\([\\mathbf{c_1}, \\mathbf{c_2}, \\ldots, \\mathbf{c}_{N}]\\) - an array of all published encrypted vote's. \\([\\alpha_1, \\alpha_2, \\ldots, \\alpha_N]\\) - an array of corresponded voter's voting power. \\(i\\) - voting option index. Where \\(N\\) - votes amount. And produce an encrypted tally result for voting option \\(i\\) . \\begin{equation} er_i = Tally(i, [\\mathbf{c_1}, \\mathbf{c_2}, \\ldots, \\mathbf{c_N}], [\\alpha_1, \\alpha_2, \\ldots, \\alpha_N]) \\end{equation} E.g. a proposal with voting choices \\([Yes, No]\\) , votes \\([\\mathbf{c_1}, \\mathbf{c_2}]\\) , voting powers \\([\\alpha_1, \\alpha_2]\\) and election secret key \\(sk\\) . Encrypted result for option \\(Yes\\) : \\(er_1 = Tally(1, [\\mathbf{c_1}, \\mathbf{c_2}], [\\alpha_1, \\alpha_2])\\) . Encrypted result for option \\(No\\) : \\(er_2 = Tally(2, [\\mathbf{c_1}, \\mathbf{c_2}], [\\alpha_1, \\alpha_2])\\)","title":"Homomorphic tally"},{"location":"architecture/08_concepts/catalyst_voting/crypto/#tally-decryption","text":"To decrypt each calculated tally result from the previous step , \\(TallyDec\\) is used, which is technically a common \\(ElGamalDec\\) algorithm described in appendix B . It takes as an input the following: \\(sk\\) - an election private key held by voting committee. \\(er_i\\) - an encrypted tally result for the specific voting option defined for a proposal. It produces a decrypted tally result for the voting option of a proposal. \\begin{equation} r_i = ElGamalDec(er_i, sk) = TallyDec(er_i, sk) \\end{equation} This decrypted tally result is an exact result of the voting procedure, which represents an outcome of the election process. E.g. a proposal with voting choices \\([Yes, No]\\) , encrypted tally results \\([er_1, er_2]\\) and election secret key \\(sk\\) . Decrypted result for option \\(Yes\\) : \\(r_1 = TallyDec(er_1, sk)\\) . Decrypted result for option \\(No\\) : \\(r_2 = TallyDec(er_2, sk)\\)","title":"Tally decryption"},{"location":"architecture/08_concepts/catalyst_voting/crypto/#tally-proof","text":"An important step for bringing transparency and exclude misbehaving from the voting committee, a corresponded proof for each decrypted tally result must be generated. It is necessary to verify that encrypted tally was decrypted exactly by using committee secret key, and not any other. So the publicly published decrypted tally result (a final tally result) actually is correct and represents a proper election outcome. To do that, a sophisticated ZK (Zero Knowledge) \\(TallyProof\\) algorithm is used. Which proofs that a provided encrypted tally result value \\(er\\) was decrypted into tally result \\(r\\) using the exact secret key \\(sk\\) , which is corresponded to the already known shared election public key \\(pk\\) . \\begin{equation} \\pi = TallyProof(er, sk) \\end{equation} So to validate a \\(TallyCheck(er, r, pk, \\pi)\\) procedure should be used, which takes an encrypted tally result \\(er\\) , decrypted tally result \\(r\\) , election public key \\(pk\\) and corresponded proof \\(\\pi\\) as arguments and returns true or false , is it valid or not. \\begin{equation} true | false = TallyCheck(er, r, pk, \\pi) \\end{equation} A more detailed description of how \\(TallyProof\\) , \\(TallyCheck\\) work you can find in the appendix E .","title":"Tally proof"},{"location":"architecture/08_concepts/catalyst_voting/crypto/#tally-publishing","text":"After all these procedures are done, a final step is to publish an encrypted tally results \\(er_i\\) , decrypted tally results \\(r_i\\) and tally proofs \\(\\pi_i\\) corresponded for each voting option of some proposal. It could be published using any public channel, e.g. blockchain, ipfs or through p2p network.","title":"Tally publishing"},{"location":"architecture/08_concepts/catalyst_voting/crypto/#a-group-definition","text":"Important to note that some crypto algorithms, which are described below, are group \\(\\mathbb{G}\\) dependant. More detailed about groups you can find at section 8.2.1 section on this book . Therefore, the generalized notation of the group operation used - \\(\\circ\\) . And defined as follows: For all \\(a, b \\in \\mathbb{G}\\) , \\(a \\circ b = c\\) , where \\(c \\in \\mathbb{G}\\) . For all \\(a \\in \\mathbb{G}\\) , and \\(n \\in \\mathbb{Z}\\) , \\(a^n = a \\circ a \\ldots \\circ a\\) ( \\(n\\) - times). There is an element noted as \\(1\\) , called neutral element, such that \\(a \\circ 1 = a\\) , for all \\(a \\in \\mathbb{G}\\) . For each element \\(a \\in \\mathbb{G}\\) exists \\(a^{-1} \\in \\mathbb{G}\\) , called the inversed of \\(a\\) , such that \\(a \\circ a^{-1} = a^{-1} \\circ a = 1\\) .","title":"A: Group Definition"},{"location":"architecture/08_concepts/catalyst_voting/crypto/#b-lifted-elgamal-encryptiondecryption","text":"Lifted ElGamal encryption schema is defined over any cyclic group \\(\\mathbb{G}\\) of order \\(q\\) with group generator \\(g\\) ( \\(g \\in \\mathbb{G}\\) ). It could be multiplicative group of integers modulo \\(n\\) or some elliptic curve over the finite field group. More detailed how group operations are defined, described in appendix A .","title":"B: Lifted ElGamal Encryption/Decryption"},{"location":"architecture/08_concepts/catalyst_voting/crypto/#encryption","text":"Lifted ElGamal encryption algorithm takes as arguments: \\(m\\) - message ( \\(m \\in \\mathbb{Z}_q\\) ) \\(r\\) - randomness ( \\(r \\in \\mathbb{Z}_q\\) ) \\(pk\\) - public key ( \\(pk \\in \\mathbb{G}\\) ) \\[\\begin{equation} ElGamalEnc(m, r, pk) = (c_1, c_2) = c, \\end{equation}\\] \\[\\begin{equation} c_1 = g^r, \\quad c_2 = g^m \\circ pk^r \\end{equation}\\] \\(c\\) - is a resulted ciphertext which consists of two elements \\(c_1, c_2 \\in \\mathbb{G}\\) .","title":"Encryption"},{"location":"architecture/08_concepts/catalyst_voting/crypto/#decryption","text":"Lifted ElGamal decryption algorithm takes as arguments: \\(c\\) - ciphertext, \\(sk\\) - secret key ( \\(sk \\in \\mathbb{Z}_q\\) ) \\[\\begin{equation} ElGamalDec(c, sk) = Dlog(c_2 \\circ c_1^{-sk}) = m \\end{equation}\\] \\(m\\) - an original message which was encrypted on the previous step, \\(Dlog(x)\\) is a discrete logarithm of \\(x\\) . Note that since \\(Dlog\\) is not efficient, the message space should be a small set, say \\(m \\in \\{0,1\\}^{\\xi}\\) , for \\(\\xi \\le 30\\) .","title":"Decryption"},{"location":"architecture/08_concepts/catalyst_voting/crypto/#c-homomorphic-tally","text":"Homomorphic tally schema is defined over any cyclic group \\(\\mathbb{G}\\) of order \\(q\\) with group generator \\(g\\) ( \\(g \\in \\mathbb{G}\\) ). More detailed how group operations are defined, described in appendix A . Homomorphic tally algorithm takes as arguments: \\(i\\) - voting choice index \\([\\mathbf{c_1}, \\mathbf{c_2}, \\ldots, \\mathbf{c_N}]\\) - an array of encrypted votes vector's, where \\(N\\) - votes amount \\([\\alpha_1, \\alpha_2, \\ldots, \\alpha_N]\\) - an array of corresponded voter's voting power, where \\(N\\) - votes amount \\[\\begin{equation} Tally(i, [\\mathbf{c_1}, \\mathbf{c_2}, \\ldots, \\mathbf{c_N}], [\\alpha_1, \\alpha_2, \\ldots, \\alpha_N]) = c_{1, i}^{\\alpha_1} \\circ c_{2, i}^{\\alpha_2} \\circ \\ldots \\circ c_{N, i}^{\\alpha_N} = er_i \\end{equation}\\] Where \\(c_{j, i}\\) - an encrypted corresponded \\(i\\) -th vector's component of the encrypted vote \\(\\mathbf{c_j}\\) . As it was stated in this section each encrypted vote is a vector \\(\\mathbf{c_j} = (c_{j, 1}, \\ldots, c_{j, M})\\) , \\(M\\) - number of voting choices. \\(er_i\\) noted as encrypted tally result for the provided \\(i\\) -th voting choice. As it is not an open decrypted value yet, it needs a decryption procedure corresponded for which encryption one was made. Important to note that the resulted value \\(er_i\\) is a ciphertext, the same as \\(c_{j, i}\\) . So \\(er_i = (er_{i, 1}, er_{i, 2})\\) consists of elements \\(er_{i, 1}, er_{i, 2} \\in \\mathbb{G}\\) . Operations which are applied for pair \\(c_{j, i} \\circ c_{j+1, i}\\) , actually means the following: \\[\\begin{equation} c_{j, i} \\circ c_{j+1, i} = (c_{j, i, 1} \\circ c_{j+1, i, 1},\\quad c_{j, i, 2} \\circ c_{j+1, i, 2}) \\end{equation}\\] So \\(\\circ\\) operation applied separately for each corresponding items of the ciphertexts \\(c_{j, i}, c_{j+1, i}\\) and in the result we are getting a new ciphertext.","title":"C: Homomorphic Tally"},{"location":"architecture/08_concepts/catalyst_voting/crypto/#d-non-interactive-zk-vote-proof","text":"Non-Interactive ZK (Zero Knowledge) Vote Proof algorithm helps to solve only one problem, to prove that the encrypted voting choice is exactly a some unit vector, which consists of only one is \\(1\\) value and others are \\(0\\) . A more detailed and formal description you can find in the section 2.4 of this paper . It is assumed that the original encryption and decryption is performing by ElGamal scheme. It means that all described operations is also group dependent (more about groups described in appendix A ).","title":"D: Non-Interactive ZK Vote Proof"},{"location":"architecture/08_concepts/catalyst_voting/crypto/#prover","text":"The prover algorithm takes as arguments: \\(\\mathbf{c} = (c_0, \\ldots, c_{M-1})\\) - encrypted vote (a vector of ciphertext), where \\(M\\) is amount of voting options. \\(\\mathbf{e}_i = (e_{i,0},\\ldots, e_{i,M-1})\\) - original voting choice, a unit vector, where \\(M\\) is amount of voting options and \\(i\\) is an index of the voting choice. \\(\\mathbf{r} = (r_0, \\ldots, r_{M-1})\\) - a vector of randomnesses, which was used during encryption. \\(pk\\) - is a public key, which was used to encrypt a unit vector. \\(ck \\in \\mathbb{G}\\) - a commitment key. So basically here is the relation between all these values: \\begin{equation} \\mathbf{c} = (c_1, \\ldots, c_M) = (VoteEnc(e_{i,1}, r_1, pk), \\ldots, VoteEnc(e_{i,M}, r_M, pk)) \\end{equation} \\[\\begin{equation} VoteProof(\\mathbf{c}, \\mathbf{e}_i, \\mathbf{r}, pk, ck) = \\pi \\end{equation}\\] Important to note that the following notation would be used \\(\\{a_i\\}\\) - which is a set of some elements \\(a_i\\) . \\(\\pi\\) is the final proof. To compute it, prover needs to perform the next steps: If the number of voting options \\(M\\) is not a perfect power of \\(2\\) , extend the vector \\(\\mathbf{c}\\) with \\(c_j = VoteEnc(0, 0, pk)\\) , where \\(N\\) is a perfect power of \\(2\\) , \\(j \\in [M, \\ldots, N - 1]\\) . So the resulted \\(\\mathbf{c} = (c_1, \\ldots, c_M, \\{c_j\\})\\) . Let \\(i_k\\) is a bit value of the \\(i\\) -th binary representation (little-endian order), where \\(k \\in [0, log_2(N) - 1]\\) . E.g. \\(i=3\\) and \\(N=8, log_2(N) = 3\\) , its binary representation \\(i=011\\) , \\(i_0=1, i_1=1, i_2=0\\) . For \\(l \\in [0, \\ldots, log_2(N)-1]\\) generate a random values \\(\\alpha_l, \\beta_l, \\gamma_l, \\delta_l, \\in \\mathbb{Z}_q\\) . For \\(l \\in [0, \\ldots, log_2(N)-1]\\) calculate, where \\(g\\) is the group generator: \\(I_l = g^{i_l} \\circ ck^{\\alpha_l}, I_l \\in \\mathbb{G}\\) . \\(B_l = g^{\\beta_l} \\circ ck^{\\gamma_l}, B_l \\in \\mathbb{G}\\) . \\(A_l = g^{i_l * \\beta_l} \\circ ck^{\\delta_l}, A_l \\in \\mathbb{G}\\) . Calculate a first verifier challenge \\(ch_1 = H(ck, pk, \\{c_j\\}, \\{I_l\\}, \\{B_l\\}, \\{A_l\\})\\) , where \\(H\\) is BLAKE2b-512 hash function, \\(j \\in [0, \\ldots, N-1]\\) and \\(l \\in [0, \\ldots, log_2(N)-1]\\) . For \\(j \\in [0, \\ldots, N-1]\\) calculate polynomials in the following form \\(p_j(x) = e_{i, j}*x^{log_2(N)} + \\sum_{l=0}^{log_2(N)-1} p_{j,l} * x^l\\) : \\(j_l\\) is a bit value of the \\(j\\) -th binary representation (same as was described in step 2 ). \\(z_l^{1} = i_l * x + \\beta_l\\) . \\(z_l^{0} = x - z_l^{1} = (1 - i_l)*x - \\beta_l\\) . Calculate the polynomial itself \\(p_j(x) = \\prod_{l=0}^{log_2(N)-1} z_l^{j_l}\\) For \\(l \\in [0, \\ldots, log_2(N)-1]\\) generate a random \\(R_l \\in \\mathbb{Z}_q\\) . For \\(l \\in [0, \\ldots, log_2(N)-1]\\) compute \\(D_l = VoteEnc(sum_l, R_l, pk)\\) , where \\(sum_l = \\sum_{j=0}^{N-1}(p_{j,l} * ch_1^j)\\) and \\(p_{j,l}\\) - corresponding coefficients of the polynomial \\(p_j(x)\\) calculated on step 7 . Calculate a second verifier challenge \\(ch_2 = H(ch_1, \\{D_l\\})\\) , where \\(H\\) is BLAKE2b-512 hash function and \\(l \\in [0, \\ldots, log_2(N)-1]\\) . For \\(l \\in [0, \\ldots, log_2(N)-1]\\) calculate: \\(z_l = i_l * ch_2 + \\beta_l, z_l \\in \\mathbb{Z}_q\\) . \\(w_l = \\alpha_l * ch_2 + \\gamma_l, w_l \\in \\mathbb{Z}_q\\) . \\(v_l = \\alpha_l * (ch_2 - z_l) + \\delta_l, v_l \\in \\mathbb{Z}_q\\) . Calculate \\(R=\\sum_{j=0}^{N-1}(r_j * (ch_2)^{log_2(N)} * (ch_1)^j) + \\sum_{l=0}^{log_2(N)-1}(R_l * (ch_2)^l)\\) , where \\(r_j\\) original random values which was used to encrypt \\(c_j\\) and \\(R_l\\) random values generated in step 8 . Finally, the proof is \\(\\pi = (\\{I_l\\}, \\{B_l\\}, \\{A_l\\}, \\{D_l\\}, \\{z_l\\}, \\{w_l\\}, \\{v_l\\}, R)\\) , where \\(l \\in [0, \\ldots, log_2(N)-1]\\) .","title":"Prover"},{"location":"architecture/08_concepts/catalyst_voting/crypto/#verifier","text":"The verifier algorithm takes as arguments: \\(\\mathbf{c} = (c_0, \\ldots, c_{M-1})\\) - encrypted vote (a vector of ciphertext), where \\(M\\) is amount of voting options. \\(\\pi\\) - a prover's proof generated on the previous step \\(pk\\) - is a public key, which was used to encrypt a unit vector. \\(ck \\in \\mathbb{G}\\) - a commitment key, same which was used by the prover. \\[\\begin{equation} VoteCheck(\\mathbf{c}, \\pi, pk, ck) = true | false \\end{equation}\\] As a result algorithm will return true or false , is the verification was succeeded or not respectively. Knowing that \\(\\pi\\) equals to \\((\\{I_l\\}, \\{B_l\\}, \\{A_l\\}, \\{D_l\\}, \\{z_l\\}, \\{w_l\\}, \\{v_l\\}, R)\\) , verifier needs to perform the next steps: If the number of voting options \\(M\\) is not a perfect power of \\(2\\) , extend the vector \\(\\mathbf{c}\\) with \\(c_j = VoteEnc(0, 0, pk)\\) , where \\(N\\) is a perfect power of \\(2\\) , \\(j \\in [M, \\ldots, N - 1]\\) . So the resulted \\(\\mathbf{c} = (c_1, \\ldots, c_M, \\{c_j\\})\\) . Calculate the first verifier challenge \\(ch_1 = H(ck, pk, \\{c_j\\}, \\{I_l\\}, \\{B_l\\}, \\{A_l\\})\\) , where \\(H\\) is BLAKE2b-512 hash function, \\(j \\in [0, \\ldots, N-1]\\) and \\(l \\in [0, \\ldots, log_2(N)-1]\\) . Calculate a second verifier challenge \\(ch_2 = H(ch_1, \\{D_l\\})\\) , where \\(H\\) is BLAKE2b-512 hash function and \\(l \\in [0, \\ldots, log_2(N)-1]\\) . For \\(l \\in [0, \\ldots, log_2(N)-1]\\) verify that the following statements are true , where \\(g\\) is the group generator: \\((I_l)^{ch_2} \\circ B_l == g^{z_l} \\circ ck^{w_l}\\) . \\((I_l)^{ch_2 - z_l} \\circ A_l == g^{0} \\circ ck^{v_l}\\) . Calculate the following \\(Left = VoteEnc(0, R, pk)\\) . Note that the \\(Left\\) is a ciphertext, \\(Left = (Left_1, Left_2)\\) . Note that \\(D_l\\) is a ciphertext, \\(D_l = (D_{l,1}, D_{l,2})\\) , for \\(l \\in [0, \\ldots, log_2(N)-1]\\) calculate the following: \\(Right2_1 = (D_{0,1})^{ch_2^{0}} \\circ \\ldots \\circ (D_{log_2(N) - 1,1})^{ch_2^{log_2(N) - 1}}\\) . \\(Right2_2 = (D_{0,2})^{ch_2^{0}} \\circ \\ldots \\circ (D_{log_2(N) - 1,2})^{ch_2^{log_2(N) - 1}}\\) . For \\(j \\in [0, \\ldots, N-1]\\) calculate the \\(p_j(ch_2)\\) , where \\(p_j\\) is a prover's defined polynomial defined in step 7 : \\(j_l\\) is a bit value of the \\(j\\) -th binary representation. \\(z_l^1 = z_j\\) . \\(z_l^0 = ch_2 - z_j^1\\) . \\(p_j(ch_2) = \\prod_l^{log_2(N)-1} z_l^{j_l}\\) . For \\(j \\in [0, \\ldots, N-1]\\) calculate the \\(P_j = VoteEnc(-p_j(ch_2), 0, pk)\\) . Note that the \\(P_j\\) is a ciphertext, \\(P_j = (P_{j,1}, P_{j,2})\\) . Note that \\(C_j\\) is a ciphertext, \\(C_j = (C_{j,1}, C_{j,2})\\) , for \\(j \\in [0, \\ldots, N-1]\\) calculate: \\(Right1_{j,1} = (C_{j,1})^{ch_2^{log_2(N)}} \\circ (P_{j,1})^{ch_1^{j}}\\) . \\(Right1_{j,2} = (C_{j,2})^{ch_2^{log_2(N)}} \\circ (P_{j,2})^{ch_1^{j}}\\) . \\(Right1_{1} = Right1_{j,1} \\circ \\ldots \\circ Right1_{N - 1, 1}\\) . \\(Right1_{2} = Right1_{j,2} \\circ \\ldots \\circ Right1_{N - 1, 2}\\) . Verify that the following statements are true : \\(Right1_{1} \\circ Right2_1 == Left_1\\) . \\(Right1_{2} \\circ Right2_2 == Left_2\\) . If step 4 and 10 returns true so the final result is true otherwise return false .","title":"Verifier"},{"location":"architecture/08_concepts/catalyst_voting/crypto/#e-non-interactive-zk-tally-proof","text":"Non-Interactive ZK (Zero Knowledge) Tally Proof algorithm helps to solve only one problem, to prove that the specific encrypted message was decrypted into the specific resulted value, using exactly that secret key, which is corresponds to the some shared public key. It is a slightly modified version of the algorithm described in the sections Fig. 10 and 2.1.5 of this paper . It is assumed that the original encryption and decryption is performing by ElGamal scheme. It means that all described operations is also group dependent (more about groups described in appendix A ).","title":"E: Non-Interactive ZK Tally Proof"},{"location":"architecture/08_concepts/catalyst_voting/crypto/#prover_1","text":"The prover algorithm takes as arguments: \\(enc\\) - an encrypted message (ciphertext). \\(sk\\) - a secret key which was used to decrypt a message \\(enc\\) . \\[\\begin{equation} TallyProof(enc, sk) = \\pi \\end{equation}\\] \\(\\pi\\) is the final proof. To compute it, prover needs to perform the next steps: Take the first element of the ciphertext \\(enc = (enc_1, enc_2)\\) . Calculate \\(d = enc_1^{sk}, \\quad d \\in \\mathbb{G}\\) . Generate a random value \\(\\mu, \\quad \\mu \\in \\mathbb{Z}_q\\) . Compute \\(A_1 = g^{\\mu}\\) , where \\(g\\) is the group generator ( \\(A_1 \\in \\mathbb{G}\\) ). Compute \\(A_2 = (enc_1)^{\\mu}, \\quad A_2 \\in \\mathbb{G}\\) . Compute \\(\u0441 = H(pk, d, g, enc_1, A_1, A_2)\\) , where \\(pk\\) is a corresponding public key of \\(sk\\) , \\(H\\) is a hash function. Compute \\(z = sk * \u0441 + \\mu, \\quad z \\in \\mathbb{Z}_q\\) . Finally, the proof is \\(\\pi = (\u0441, z)\\) .","title":"Prover"},{"location":"architecture/08_concepts/catalyst_voting/crypto/#verifier_1","text":"The verifier algorithm takes as arguments: \\(enc\\) - an encrypted message (ciphertext). \\(dec\\) - a decrypted message from the encrypted ciphertext \\(enc\\) . \\(pk\\) - a public key corresponded to the \\(sk\\) which was supposedly used to decrypt a message \\(enc\\) . \\(\\pi\\) - a prover's proof generated on the previous step . \\[\\begin{equation} TallyCheck(enc, dec, pk, \\pi) = true | false \\end{equation}\\] As a result algorithm will return true or false , is the verification was succeeded or not respectively. Knowing that \\(\\pi\\) equals to \\((\u0441, z)\\) , verifier needs to perform the next steps: Take the first and second elements \\(enc_1, enc_2\\) of the ciphertext \\(enc = (enc_1, enc_2)\\) . Calculate \\(d = enc_2 \\circ g^{-dec}, \\quad d \\in \\mathbb{G}\\) . Calculate \\(A_1 = g^{z} \\circ pk^{-c}, \\quad A_1 \\in \\mathbb{G}\\) . Calculate \\(A_2 = enc_1^{z} \\circ d^{-c}, \\quad A_2 \\in \\mathbb{G}\\) . Compute \\(\u04412 = H(pk, d, g, enc_1, A_1, A_2)\\) , where \\(g\\) is the group generator. Verify \\(\u0441 == \u04412\\) . If step 6 returns true so the final result is true otherwise return false .","title":"Verifier"},{"location":"architecture/08_concepts/catalyst_voting/crypto/#rationale","text":"","title":"Rationale"},{"location":"architecture/08_concepts/catalyst_voting/crypto/#path-to-active","text":"","title":"Path to Active"},{"location":"architecture/08_concepts/catalyst_voting/crypto/#acceptance-criteria","text":"","title":"Acceptance Criteria"},{"location":"architecture/08_concepts/catalyst_voting/crypto/#implementation-plan","text":"","title":"Implementation Plan"},{"location":"architecture/08_concepts/catalyst_voting/gen_vote_tx/","text":"General Voting Transaction \u00b6 Title: General Voting Transaction Structure Status: Proposed Authors: - Alex Pozhylenkov alex.pozhylenkov@iohk.io Created: 2024-09-04 Abstract \u00b6 This document defines a generalized view of the \"Catalyst\" voting transaction. Motivation \u00b6 Project \"Catalyst\" requires a structure to keep people vote's data in the secure way, anonymous and verifiable way. Specification \u00b6 vote transaction definition: gen_vote_tx.cddl ; All encoders/decoders of this specification must follow deterministic cbor encoding rules ; https://datatracker.ietf.org/doc/html/draft-ietf-cbor-cde-06 gen-vote-tx < choice-t , proof-t , prop-id-t , voter-data-t > = [ tx-body < choice-t , proof-t , prop-id-t , voter-data-t >, signature ] tx-body < choice-t , proof-t , prop-id-t , voter-data-t > = [ vote-type , event , votes < choice-t , proof-t , prop-id-t >, voter-data < voter-data-t >, ] vote-type = UUID ; e.g. Public or Private vote event = { * event-key => event-value } event-key = int / text event-value = any votes < choice-t , proof-t , prop-id-t > = [ + vote < choice-t , proof-t , prop-id-t >] vote < choice-t , proof-t , prop-id-t > = [ choices < choice-t >, proof < proof-t >, prop-id < prop-id-t >, ] choices < choice-t > = [ + choice < choice-t >] choice < choice-t > = #6.24 ( bytes .cbor choice-t ) ; encoded-cbor proof < proof-t > = #6.24 ( bytes .cbor proof-t ) ; encoded-cbor prop-id < prop-id-t > = #6.24 ( bytes .cbor prop-id-t ) ; encoded-cbor voter-data < voter-data-t > = #6.24 ( bytes .cbor voter-data-t ) ; encoded-cbor UUID = #6.37 ( bytes ) ; UUID type signature = #6.98 ( cose.COSE_Sign ) ; COSE signature ;# import rfc9052 as cose event - a set of different identifiers which is uniquely define a particular voting event. Vote: choices - a collection of voter choices for the proposal. proof - a voter proof, could be null . prop-id - a proposal id for which choice is made, could be null . For that case where for the event defined only one proposal, so it's redundant to provide an additional identifier for the proposal, so it could be placed null . voter-data - an any additional voter's specific data. Transaction signing \u00b6 COSE is used to define a transaction's signature structure. COSE is a flexible security protocol that supports various types of security messages. However, only COSE Signed Data Object or COSE_Sign type is used. The following header must be included in the COSE signature. protected : content type : application/cbor (this parameter is used to indicate the content type of the data in the payload or ciphertext fields). Any other headers as alg , kid etc. could be specified of any kind and not defined by this spec. Signature payload \u00b6 As mentioned earlier, the content type of the COSE signature payload is application/cbor . In particular it must be a CBOR encoded BLAKE2b-256 hash bytes: ; All encoders/decoders of this specification must follow deterministic cbor encoding rules ; https://datatracker.ietf.org/doc/html/draft-ietf-cbor-cde-06 cose-payload = blake2b-256 blake2b-256 = #6.32782 ( bytes .size 32 ) ; Blake2b-256 hash bytes Rationale \u00b6 Path to Active \u00b6 Acceptance Criteria \u00b6 Implementation Plan \u00b6","title":"General Voting Transaction"},{"location":"architecture/08_concepts/catalyst_voting/gen_vote_tx/#general-voting-transaction","text":"Title: General Voting Transaction Structure Status: Proposed Authors: - Alex Pozhylenkov alex.pozhylenkov@iohk.io Created: 2024-09-04","title":"General Voting Transaction"},{"location":"architecture/08_concepts/catalyst_voting/gen_vote_tx/#abstract","text":"This document defines a generalized view of the \"Catalyst\" voting transaction.","title":"Abstract"},{"location":"architecture/08_concepts/catalyst_voting/gen_vote_tx/#motivation","text":"Project \"Catalyst\" requires a structure to keep people vote's data in the secure way, anonymous and verifiable way.","title":"Motivation"},{"location":"architecture/08_concepts/catalyst_voting/gen_vote_tx/#specification","text":"vote transaction definition: gen_vote_tx.cddl ; All encoders/decoders of this specification must follow deterministic cbor encoding rules ; https://datatracker.ietf.org/doc/html/draft-ietf-cbor-cde-06 gen-vote-tx < choice-t , proof-t , prop-id-t , voter-data-t > = [ tx-body < choice-t , proof-t , prop-id-t , voter-data-t >, signature ] tx-body < choice-t , proof-t , prop-id-t , voter-data-t > = [ vote-type , event , votes < choice-t , proof-t , prop-id-t >, voter-data < voter-data-t >, ] vote-type = UUID ; e.g. Public or Private vote event = { * event-key => event-value } event-key = int / text event-value = any votes < choice-t , proof-t , prop-id-t > = [ + vote < choice-t , proof-t , prop-id-t >] vote < choice-t , proof-t , prop-id-t > = [ choices < choice-t >, proof < proof-t >, prop-id < prop-id-t >, ] choices < choice-t > = [ + choice < choice-t >] choice < choice-t > = #6.24 ( bytes .cbor choice-t ) ; encoded-cbor proof < proof-t > = #6.24 ( bytes .cbor proof-t ) ; encoded-cbor prop-id < prop-id-t > = #6.24 ( bytes .cbor prop-id-t ) ; encoded-cbor voter-data < voter-data-t > = #6.24 ( bytes .cbor voter-data-t ) ; encoded-cbor UUID = #6.37 ( bytes ) ; UUID type signature = #6.98 ( cose.COSE_Sign ) ; COSE signature ;# import rfc9052 as cose event - a set of different identifiers which is uniquely define a particular voting event. Vote: choices - a collection of voter choices for the proposal. proof - a voter proof, could be null . prop-id - a proposal id for which choice is made, could be null . For that case where for the event defined only one proposal, so it's redundant to provide an additional identifier for the proposal, so it could be placed null . voter-data - an any additional voter's specific data.","title":"Specification"},{"location":"architecture/08_concepts/catalyst_voting/gen_vote_tx/#transaction-signing","text":"COSE is used to define a transaction's signature structure. COSE is a flexible security protocol that supports various types of security messages. However, only COSE Signed Data Object or COSE_Sign type is used. The following header must be included in the COSE signature. protected : content type : application/cbor (this parameter is used to indicate the content type of the data in the payload or ciphertext fields). Any other headers as alg , kid etc. could be specified of any kind and not defined by this spec.","title":"Transaction signing"},{"location":"architecture/08_concepts/catalyst_voting/gen_vote_tx/#signature-payload","text":"As mentioned earlier, the content type of the COSE signature payload is application/cbor . In particular it must be a CBOR encoded BLAKE2b-256 hash bytes: ; All encoders/decoders of this specification must follow deterministic cbor encoding rules ; https://datatracker.ietf.org/doc/html/draft-ietf-cbor-cde-06 cose-payload = blake2b-256 blake2b-256 = #6.32782 ( bytes .size 32 ) ; Blake2b-256 hash bytes","title":"Signature payload"},{"location":"architecture/08_concepts/catalyst_voting/gen_vote_tx/#rationale","text":"","title":"Rationale"},{"location":"architecture/08_concepts/catalyst_voting/gen_vote_tx/#path-to-active","text":"","title":"Path to Active"},{"location":"architecture/08_concepts/catalyst_voting/gen_vote_tx/#acceptance-criteria","text":"","title":"Acceptance Criteria"},{"location":"architecture/08_concepts/catalyst_voting/gen_vote_tx/#implementation-plan","text":"","title":"Implementation Plan"},{"location":"architecture/08_concepts/catalyst_voting/v1/","text":"V1 (J\u00f6rmungandr) \u00b6 Title: J\u00f6rmungandr Voting Transaction Status: Proposed Authors: - Alex Pozhylenkov alex.pozhylenkov@iohk.io Created: 2024-10-24 Abstract \u00b6 This document describes a definition of the original J\u00f6rmungandr VoteCast transaction. It's not based on the \"General Voting Transaction\" specification and just represents an original transaction structure from the J\u00f6rmungandr blockchain. Motivation \u00b6 Specification \u00b6 An original J\u00f6rmungandr blockchain's VoteCast transaction structure. V1 transaction definition: jorm.abnf VOTE-TX = SIZE-BYTES-32BIT %x00 %x0b VOTE-PAYLOAD VOTE-PAYLOAD = CAST-CERT IOW CAST-CERT = VOTE-PLAN-ID PROPOSAL-INDEX CAST-PAYLOAD VOTE-PLAN-ID = SIZE-BYTES-32BYTE ; J\u00f6rmungandr specific vote plan identifier, Blake2b hash of the vote plan bytes PROPOSAL-INDEX = U8 ; J\u00f6rmungandr specific proposal identifier CAST-PAYLOAD = %x01 CHOICE ; Public payload / %x02 ENCRYPTED-VOTE PROOF-VOTE ; Private payload CHOICE = U8 ENCRYPTED-VOTE = SIZE-BYTES-8BIT * CIPHERTEXT PROOF-VOTE = SIZE-BYTES-8BIT * ANNOUNCEMENT * CIPHERTEXT * R-RESPONSE SCALAR ; size of the *ANNOUNCEMENT, *CIPHERTEXT, *R-RESPONSE are equal to SIZE-BYTES-8BIT value CIPHERTEXT = E1 E2 ANNOUNCEMENT = I A B R-RESPONSE = 3 * SCALAR I = GROUP-ELEMENT A = GROUP-ELEMENT B = GROUP-ELEMENT E1 = GROUP-ELEMENT E2 = GROUP-ELEMENT ; #################### ; IOW stand for Inputs-Outputs-Witnesses ; #################### IOW = BLOCK-DATE %x01 ; number of inputs and witness %x00 ; number of outputs INPUT ; one input WITNESS ; one witness INPUT = %xff VALUE ED25519-PUBLICKEY WITNESS = %x02 NONCE ED25519-SIGNATURE VALUE = U64 ; could be anything, not processed anymore, recommended set to zero NONCE = U32 ; could be anything, not processed anymore, recommended set to zero BLOCK-DATE = BLOCK-EPOCH BLOCK-SLOT ; expiration date, could be anything, not processed anymore, recommended set to zeros BLOCK-EPOCH = U32 BLOCK-SLOT = U32 ; #################### ; CRYPTO ; #################### ED25519-PUBLICKEY = SIZE-BYTES-32BYTE ED25519-SIGNATURE = SIZE-BYTES-64BYTE ; #################### ; PRIMITIVES ; #################### SIZE-BYTES-8BIT = U8 ; size in elements (8 bits) SIZE-BYTES-16BIT = U16 ; size in bytes (16 bits) SIZE-BYTES-32BIT = U32 ; size in bytes (32 bits) U8 = OCTET ; unsigned integer 8 bit U16 = 2 OCTET ; unsigned integer 16 bit (BE) U32 = 4 OCTET ; unsigned integer 32 bit (BE) U64 = 8 OCTET ; unsigned integer 64 bit (BE) SIZE-BYTES-32BYTE = 32 OCTET ; unsigned integer 256 bit (32 bytes) (BE) SIZE-BYTES-64BYTE = 64 OCTET ; unsigned integer 512 bit (64 bytes) (BE) SIZE-BYTES-65BYTE = 65 OCTET ; unsigned integer 520 bit (65 bytes) (BE) SCALAR = SIZE-BYTES-32BYTE GROUP-ELEMENT = SIZE-BYTES-32BYTE ; ristretto255 group element Example \u00b6 V1 transaction representation in hex: 0000037e000b36ad42885189a0ac3438cdb57bc8ac7f6542e05a59d1f2e4d1d38194c9d4ac7b000203f6639bdbc9235103825a9f025eae5cff3bd9c9dcc0f5a4b286909744746c8b6fb0018773d3b4308344d2e90599cd03749658561787eab714b542a5ccaf078846f6639bdbc9235103825a9f025eae5cff3bd9c9dcc0f5a4b286909744746c8b6fc8f58976fc0e951ba284a24f3fc190d914ae53aebcc523e7a4a330c8655b4908f6639bdbc9235103825a9f025eae5cff3bd9c9dcc0f5a4b286909744746c8b6fb0018773d3b4308344d2e90599cd03749658561787eab714b542a5ccaf078846021c76d0a50054ef7205cb95c1fd3f928f224fab8a8d70feaf4f5db90630c3845a06df2f11c881e396318bd8f9e9f135c2477e923c3decfd6be5466d6166fb3c702edd0d1d0a201fb8c51a91d01328da257971ca78cc566d4b518cb2cd261f96644067a7359a745fe239db8e73059883aece4d506be71c1262b137e295ce5f8a0aac22c1d8d343e5c8b5be652573b85cba8f4dcb46cfa4aafd8d59974e2eb65f480cf85ab522e23203c4f2faa9f95ebc0cd75b04f04fef5d4001d349d1307bb5570af4a91d8af4a489297a3f5255c1e12948787271275c50386ab2ef3980d882228e5f3c82d386e6a4ccf7663df5f6bbd9cbbadd6b2fea2668a8bf5603be29546152902a35fc44aae80d9dcd85fad6cde5b47a6bdc6257c5937f8de877d5ca0356ee9f12a061e03b99ab9dfea56295485cb5ce38cd37f56c396949f58b0627f455d26e4c5ff0bc61ab0ff05ffa07880d0e5c540bc45b527e8e85bb1da469935e0d3ada75d7d41d785d67d1d0732d7d6cbb12b23bfc21dfb4bbe3d933eaa1e5190a85d6e028706ab18d262375dd22a7c1a0e7efa11851ea29b4c92739aaabfee40353453ece16bda2f4a2c2f86e6b37f6de92dc45dba2eb811413c4af2c89f5fc0859718d7cd9888cd8d813da2e93726484ea5ce5be8ecf1e1490b874bd897ccd0cbc33db0a1751f813683724b7f5cf750f2497953607d1e82fb5d1429cbfd7a40ccbdba04fb648203c91e0809e497e80e9fad7895b844ba6da6ac690c7ce49c10e00000000000000000100ff00000000000000036d2ac8ddbf6eaac95401f91baca7f068e3c237386d7c9a271f5187ed909155870200000000e6c8aa48925e37fdab75db13aca7c4f39068e12eeb3af8fd1f342005cae5ab9a1ef5344fab2374e9436a67f57041899693d333610dfe785d329988736797950d Transaction size (u32): 0000037e J\u00f6rmungandr specific tag (u8): 00 J\u00f6rmungandr specific tag (u8): 0b Vote plan id (32 byte hash): 36ad42885189a0ac3438cdb57bc8ac7f6542e05a59d1f2e4d1d38194c9d4ac7b Proposal index (u8): 00 Payload type tag (u8): 02 Encrypted vote: 03|f6639bdbc9235103825a9f025eae5cff3bd9c9dcc0f5a4b286909744746c8b6f|b0018773d3b4308344d2e90599cd03749658561787eab714b542a5ccaf078846|f6639bdbc9235103825a9f025eae5cff3bd9c9dcc0f5a4b286909744746c8b6f|c8f58976fc0e951ba284a24f3fc190d914ae53aebcc523e7a4a330c8655b4908|f6639bdbc9235103825a9f025eae5cff3bd9c9dcc0f5a4b286909744746c8b6f|b0018773d3b4308344d2e90599cd03749658561787eab714b542a5ccaf078846 size (u8): 03 ciphertext (group element (32 byte), group element (32 byte)): f6639bdbc9235103825a9f025eae5cff3bd9c9dcc0f5a4b286909744746c8b6f|b0018773d3b4308344d2e90599cd03749658561787eab714b542a5ccaf078846|f6639bdbc9235103825a9f025eae5cff3bd9c9dcc0f5a4b286909744746c8b6f|c8f58976fc0e951ba284a24f3fc190d914ae53aebcc523e7a4a330c8655b4908|f6639bdbc9235103825a9f025eae5cff3bd9c9dcc0f5a4b286909744746c8b6f|b0018773d3b4308344d2e90599cd03749658561787eab714b542a5ccaf078846 Proof: 02|1c76d0a50054ef7205cb95c1fd3f928f224fab8a8d70feaf4f5db90630c3845a|06df2f11c881e396318bd8f9e9f135c2477e923c3decfd6be5466d6166fb3c70|2edd0d1d0a201fb8c51a91d01328da257971ca78cc566d4b518cb2cd261f9664|4067a7359a745fe239db8e73059883aece4d506be71c1262b137e295ce5f8a0a|ac22c1d8d343e5c8b5be652573b85cba8f4dcb46cfa4aafd8d59974e2eb65f48|0cf85ab522e23203c4f2faa9f95ebc0cd75b04f04fef5d4001d349d1307bb557|0af4a91d8af4a489297a3f5255c1e12948787271275c50386ab2ef3980d88222|8e5f3c82d386e6a4ccf7663df5f6bbd9cbbadd6b2fea2668a8bf5603be295461|52902a35fc44aae80d9dcd85fad6cde5b47a6bdc6257c5937f8de877d5ca0356|ee9f12a061e03b99ab9dfea56295485cb5ce38cd37f56c396949f58b0627f455|d26e4c5ff0bc61ab0ff05ffa07880d0e5c540bc45b527e8e85bb1da469935e0d|3ada75d7d41d785d67d1d0732d7d6cbb12b23bfc21dfb4bbe3d933eaa1e5190a|85d6e028706ab18d262375dd22a7c1a0e7efa11851ea29b4c92739aaabfee403|53453ece16bda2f4a2c2f86e6b37f6de92dc45dba2eb811413c4af2c89f5fc08|59718d7cd9888cd8d813da2e93726484ea5ce5be8ecf1e1490b874bd897ccd0c|bc33db0a1751f813683724b7f5cf750f2497953607d1e82fb5d1429cbfd7a40c|cbdba04fb648203c91e0809e497e80e9fad7895b844ba6da6ac690c7ce49c10e size (u8): 02 announcements (group element (32 byte), group element (32 byte), group element (32 byte)): 1c76d0a50054ef7205cb95c1fd3f928f224fab8a8d70feaf4f5db90630c3845a|06df2f11c881e396318bd8f9e9f135c2477e923c3decfd6be5466d6166fb3c70|2edd0d1d0a201fb8c51a91d01328da257971ca78cc566d4b518cb2cd261f9664|4067a7359a745fe239db8e73059883aece4d506be71c1262b137e295ce5f8a0a|ac22c1d8d343e5c8b5be652573b85cba8f4dcb46cfa4aafd8d59974e2eb65f48|0cf85ab522e23203c4f2faa9f95ebc0cd75b04f04fef5d4001d349d1307bb557 ciphertext (group element (32 byte), group element (32 byte)): 0af4a91d8af4a489297a3f5255c1e12948787271275c50386ab2ef3980d88222|8e5f3c82d386e6a4ccf7663df5f6bbd9cbbadd6b2fea2668a8bf5603be295461|52902a35fc44aae80d9dcd85fad6cde5b47a6bdc6257c5937f8de877d5ca0356|ee9f12a061e03b99ab9dfea56295485cb5ce38cd37f56c396949f58b0627f455 response randomness (scalar (32 byte), scalar (32 byte), scalar (32 byte)): d26e4c5ff0bc61ab0ff05ffa07880d0e5c540bc45b527e8e85bb1da469935e0d|3ada75d7d41d785d67d1d0732d7d6cbb12b23bfc21dfb4bbe3d933eaa1e5190a|85d6e028706ab18d262375dd22a7c1a0e7efa11851ea29b4c92739aaabfee403|53453ece16bda2f4a2c2f86e6b37f6de92dc45dba2eb811413c4af2c89f5fc08|59718d7cd9888cd8d813da2e93726484ea5ce5be8ecf1e1490b874bd897ccd0c|bc33db0a1751f813683724b7f5cf750f2497953607d1e82fb5d1429cbfd7a40c scalar (32 byte): cbdba04fb648203c91e0809e497e80e9fad7895b844ba6da6ac690c7ce49c10e IOW stand for Inputs-Outputs-Witnesses: 00000000000000000100ff00000000000000036d2ac8ddbf6eaac95401f91baca7f068e3c237386d7c9a271f5187ed909155870200000000e6c8aa48925e37fdab75db13aca7c4f39068e12eeb3af8fd1f342005cae5ab9a1ef5344fab2374e9436a67f57041899693d333610dfe785d329988736797950d J\u00f6rmungandr specific block date (epoch (u32), slot (u32)) ( could be anything, not processed anymore ): 00000000|00000000 number of inputs and witnesses (u8) ( always 1 ): 01 number of outputs (u8) ( always 0 ): 00 Inputs 1. J\u00f6rmungandr specific tag: ff J\u00f6rmungandr specific value (u64) ( could be anything, not processed anymore ): 0000000000000003 input pointer (32 byte): 6d2ac8ddbf6eaac95401f91baca7f068e3c237386d7c9a271f5187ed90915587 Witnesses 1. J\u00f6rmungandr specific tag (u8): 02 J\u00f6rmungandr specific nonce (u32) ( could be anything, not processed anymore ): 00000000 legacy signature (64 byte): e6c8aa48925e37fdab75db13aca7c4f39068e12eeb3af8fd1f342005cae5ab9a1ef5344fab2374e9436a67f57041899693d333610dfe785d329988736797950d Vote generation \u00b6 To generate a cryptographically secured ENCRYPTED-VOTE and PROOF-VOTE parts you can follow this spec . Important to note, that as part of initial setup of the voting procedure, the following properties are used: Each proposal, defined by the VOTE-PLAN-ID and PROPOSAL-INDEX , defines a number of possible options. ristretto255 as a backend cryptographic group. A commitment key \\(ck\\) defined as a BLAKE2b-512 hash of the VOTE-PLAN-ID bytes. Signing (witness generation) \u00b6 Signature generated from the BLAKE2b-256 hashed VOTE-PAYLOAD bytes except of the WITNESS part (the last part from the bytes array): CAST-CERT bytes BLOCK-DATE bytes %x01 %x00 INPUT bytes Based on the on the transaction example, data to sign: 36ad42885189a0ac3438cdb57bc8ac7f6542e05a59d1f2e4d1d38194c9d4ac7b000203f6639bdbc9235103825a9f025eae5cff3bd9c9dcc0f5a4b286909744746c8b6fb0018773d3b4308344d2e90599cd03749658561787eab714b542a5ccaf078846f6639bdbc9235103825a9f025eae5cff3bd9c9dcc0f5a4b286909744746c8b6fc8f58976fc0e951ba284a24f3fc190d914ae53aebcc523e7a4a330c8655b4908f6639bdbc9235103825a9f025eae5cff3bd9c9dcc0f5a4b286909744746c8b6fb0018773d3b4308344d2e90599cd03749658561787eab714b542a5ccaf078846021c76d0a50054ef7205cb95c1fd3f928f224fab8a8d70feaf4f5db90630c3845a06df2f11c881e396318bd8f9e9f135c2477e923c3decfd6be5466d6166fb3c702edd0d1d0a201fb8c51a91d01328da257971ca78cc566d4b518cb2cd261f96644067a7359a745fe239db8e73059883aece4d506be71c1262b137e295ce5f8a0aac22c1d8d343e5c8b5be652573b85cba8f4dcb46cfa4aafd8d59974e2eb65f480cf85ab522e23203c4f2faa9f95ebc0cd75b04f04fef5d4001d349d1307bb5570af4a91d8af4a489297a3f5255c1e12948787271275c50386ab2ef3980d882228e5f3c82d386e6a4ccf7663df5f6bbd9cbbadd6b2fea2668a8bf5603be29546152902a35fc44aae80d9dcd85fad6cde5b47a6bdc6257c5937f8de877d5ca0356ee9f12a061e03b99ab9dfea56295485cb5ce38cd37f56c396949f58b0627f455d26e4c5ff0bc61ab0ff05ffa07880d0e5c540bc45b527e8e85bb1da469935e0d3ada75d7d41d785d67d1d0732d7d6cbb12b23bfc21dfb4bbe3d933eaa1e5190a85d6e028706ab18d262375dd22a7c1a0e7efa11851ea29b4c92739aaabfee40353453ece16bda2f4a2c2f86e6b37f6de92dc45dba2eb811413c4af2c89f5fc0859718d7cd9888cd8d813da2e93726484ea5ce5be8ecf1e1490b874bd897ccd0cbc33db0a1751f813683724b7f5cf750f2497953607d1e82fb5d1429cbfd7a40ccbdba04fb648203c91e0809e497e80e9fad7895b844ba6da6ac690c7ce49c10e00000000000000000100ff00000000000000036d2ac8ddbf6eaac95401f91baca7f068e3c237386d7c9a271f5187ed90915587 BLAKE2b-256 hash of the transaction data to sign equals to f51473df863be3e0383ce5a8da79c7ff51b3d98dadbbefbf9f042e8601901269 Expected witness (includes signature) 0200000000e6c8aa48925e37fdab75db13aca7c4f39068e12eeb3af8fd1f342005cae5ab9a1ef5344fab2374e9436a67f57041899693d333610dfe785d329988736797950d Rationale \u00b6 Path to Active \u00b6 Acceptance Criteria \u00b6 Implementation Plan \u00b6","title":"V1 (J\u00f6rmungandr)"},{"location":"architecture/08_concepts/catalyst_voting/v1/#v1-jormungandr","text":"Title: J\u00f6rmungandr Voting Transaction Status: Proposed Authors: - Alex Pozhylenkov alex.pozhylenkov@iohk.io Created: 2024-10-24","title":"V1 (J\u00f6rmungandr)"},{"location":"architecture/08_concepts/catalyst_voting/v1/#abstract","text":"This document describes a definition of the original J\u00f6rmungandr VoteCast transaction. It's not based on the \"General Voting Transaction\" specification and just represents an original transaction structure from the J\u00f6rmungandr blockchain.","title":"Abstract"},{"location":"architecture/08_concepts/catalyst_voting/v1/#motivation","text":"","title":"Motivation"},{"location":"architecture/08_concepts/catalyst_voting/v1/#specification","text":"An original J\u00f6rmungandr blockchain's VoteCast transaction structure. V1 transaction definition: jorm.abnf VOTE-TX = SIZE-BYTES-32BIT %x00 %x0b VOTE-PAYLOAD VOTE-PAYLOAD = CAST-CERT IOW CAST-CERT = VOTE-PLAN-ID PROPOSAL-INDEX CAST-PAYLOAD VOTE-PLAN-ID = SIZE-BYTES-32BYTE ; J\u00f6rmungandr specific vote plan identifier, Blake2b hash of the vote plan bytes PROPOSAL-INDEX = U8 ; J\u00f6rmungandr specific proposal identifier CAST-PAYLOAD = %x01 CHOICE ; Public payload / %x02 ENCRYPTED-VOTE PROOF-VOTE ; Private payload CHOICE = U8 ENCRYPTED-VOTE = SIZE-BYTES-8BIT * CIPHERTEXT PROOF-VOTE = SIZE-BYTES-8BIT * ANNOUNCEMENT * CIPHERTEXT * R-RESPONSE SCALAR ; size of the *ANNOUNCEMENT, *CIPHERTEXT, *R-RESPONSE are equal to SIZE-BYTES-8BIT value CIPHERTEXT = E1 E2 ANNOUNCEMENT = I A B R-RESPONSE = 3 * SCALAR I = GROUP-ELEMENT A = GROUP-ELEMENT B = GROUP-ELEMENT E1 = GROUP-ELEMENT E2 = GROUP-ELEMENT ; #################### ; IOW stand for Inputs-Outputs-Witnesses ; #################### IOW = BLOCK-DATE %x01 ; number of inputs and witness %x00 ; number of outputs INPUT ; one input WITNESS ; one witness INPUT = %xff VALUE ED25519-PUBLICKEY WITNESS = %x02 NONCE ED25519-SIGNATURE VALUE = U64 ; could be anything, not processed anymore, recommended set to zero NONCE = U32 ; could be anything, not processed anymore, recommended set to zero BLOCK-DATE = BLOCK-EPOCH BLOCK-SLOT ; expiration date, could be anything, not processed anymore, recommended set to zeros BLOCK-EPOCH = U32 BLOCK-SLOT = U32 ; #################### ; CRYPTO ; #################### ED25519-PUBLICKEY = SIZE-BYTES-32BYTE ED25519-SIGNATURE = SIZE-BYTES-64BYTE ; #################### ; PRIMITIVES ; #################### SIZE-BYTES-8BIT = U8 ; size in elements (8 bits) SIZE-BYTES-16BIT = U16 ; size in bytes (16 bits) SIZE-BYTES-32BIT = U32 ; size in bytes (32 bits) U8 = OCTET ; unsigned integer 8 bit U16 = 2 OCTET ; unsigned integer 16 bit (BE) U32 = 4 OCTET ; unsigned integer 32 bit (BE) U64 = 8 OCTET ; unsigned integer 64 bit (BE) SIZE-BYTES-32BYTE = 32 OCTET ; unsigned integer 256 bit (32 bytes) (BE) SIZE-BYTES-64BYTE = 64 OCTET ; unsigned integer 512 bit (64 bytes) (BE) SIZE-BYTES-65BYTE = 65 OCTET ; unsigned integer 520 bit (65 bytes) (BE) SCALAR = SIZE-BYTES-32BYTE GROUP-ELEMENT = SIZE-BYTES-32BYTE ; ristretto255 group element","title":"Specification"},{"location":"architecture/08_concepts/catalyst_voting/v1/#example","text":"V1 transaction representation in hex: 0000037e000b36ad42885189a0ac3438cdb57bc8ac7f6542e05a59d1f2e4d1d38194c9d4ac7b000203f6639bdbc9235103825a9f025eae5cff3bd9c9dcc0f5a4b286909744746c8b6fb0018773d3b4308344d2e90599cd03749658561787eab714b542a5ccaf078846f6639bdbc9235103825a9f025eae5cff3bd9c9dcc0f5a4b286909744746c8b6fc8f58976fc0e951ba284a24f3fc190d914ae53aebcc523e7a4a330c8655b4908f6639bdbc9235103825a9f025eae5cff3bd9c9dcc0f5a4b286909744746c8b6fb0018773d3b4308344d2e90599cd03749658561787eab714b542a5ccaf078846021c76d0a50054ef7205cb95c1fd3f928f224fab8a8d70feaf4f5db90630c3845a06df2f11c881e396318bd8f9e9f135c2477e923c3decfd6be5466d6166fb3c702edd0d1d0a201fb8c51a91d01328da257971ca78cc566d4b518cb2cd261f96644067a7359a745fe239db8e73059883aece4d506be71c1262b137e295ce5f8a0aac22c1d8d343e5c8b5be652573b85cba8f4dcb46cfa4aafd8d59974e2eb65f480cf85ab522e23203c4f2faa9f95ebc0cd75b04f04fef5d4001d349d1307bb5570af4a91d8af4a489297a3f5255c1e12948787271275c50386ab2ef3980d882228e5f3c82d386e6a4ccf7663df5f6bbd9cbbadd6b2fea2668a8bf5603be29546152902a35fc44aae80d9dcd85fad6cde5b47a6bdc6257c5937f8de877d5ca0356ee9f12a061e03b99ab9dfea56295485cb5ce38cd37f56c396949f58b0627f455d26e4c5ff0bc61ab0ff05ffa07880d0e5c540bc45b527e8e85bb1da469935e0d3ada75d7d41d785d67d1d0732d7d6cbb12b23bfc21dfb4bbe3d933eaa1e5190a85d6e028706ab18d262375dd22a7c1a0e7efa11851ea29b4c92739aaabfee40353453ece16bda2f4a2c2f86e6b37f6de92dc45dba2eb811413c4af2c89f5fc0859718d7cd9888cd8d813da2e93726484ea5ce5be8ecf1e1490b874bd897ccd0cbc33db0a1751f813683724b7f5cf750f2497953607d1e82fb5d1429cbfd7a40ccbdba04fb648203c91e0809e497e80e9fad7895b844ba6da6ac690c7ce49c10e00000000000000000100ff00000000000000036d2ac8ddbf6eaac95401f91baca7f068e3c237386d7c9a271f5187ed909155870200000000e6c8aa48925e37fdab75db13aca7c4f39068e12eeb3af8fd1f342005cae5ab9a1ef5344fab2374e9436a67f57041899693d333610dfe785d329988736797950d Transaction size (u32): 0000037e J\u00f6rmungandr specific tag (u8): 00 J\u00f6rmungandr specific tag (u8): 0b Vote plan id (32 byte hash): 36ad42885189a0ac3438cdb57bc8ac7f6542e05a59d1f2e4d1d38194c9d4ac7b Proposal index (u8): 00 Payload type tag (u8): 02 Encrypted vote: 03|f6639bdbc9235103825a9f025eae5cff3bd9c9dcc0f5a4b286909744746c8b6f|b0018773d3b4308344d2e90599cd03749658561787eab714b542a5ccaf078846|f6639bdbc9235103825a9f025eae5cff3bd9c9dcc0f5a4b286909744746c8b6f|c8f58976fc0e951ba284a24f3fc190d914ae53aebcc523e7a4a330c8655b4908|f6639bdbc9235103825a9f025eae5cff3bd9c9dcc0f5a4b286909744746c8b6f|b0018773d3b4308344d2e90599cd03749658561787eab714b542a5ccaf078846 size (u8): 03 ciphertext (group element (32 byte), group element (32 byte)): f6639bdbc9235103825a9f025eae5cff3bd9c9dcc0f5a4b286909744746c8b6f|b0018773d3b4308344d2e90599cd03749658561787eab714b542a5ccaf078846|f6639bdbc9235103825a9f025eae5cff3bd9c9dcc0f5a4b286909744746c8b6f|c8f58976fc0e951ba284a24f3fc190d914ae53aebcc523e7a4a330c8655b4908|f6639bdbc9235103825a9f025eae5cff3bd9c9dcc0f5a4b286909744746c8b6f|b0018773d3b4308344d2e90599cd03749658561787eab714b542a5ccaf078846 Proof: 02|1c76d0a50054ef7205cb95c1fd3f928f224fab8a8d70feaf4f5db90630c3845a|06df2f11c881e396318bd8f9e9f135c2477e923c3decfd6be5466d6166fb3c70|2edd0d1d0a201fb8c51a91d01328da257971ca78cc566d4b518cb2cd261f9664|4067a7359a745fe239db8e73059883aece4d506be71c1262b137e295ce5f8a0a|ac22c1d8d343e5c8b5be652573b85cba8f4dcb46cfa4aafd8d59974e2eb65f48|0cf85ab522e23203c4f2faa9f95ebc0cd75b04f04fef5d4001d349d1307bb557|0af4a91d8af4a489297a3f5255c1e12948787271275c50386ab2ef3980d88222|8e5f3c82d386e6a4ccf7663df5f6bbd9cbbadd6b2fea2668a8bf5603be295461|52902a35fc44aae80d9dcd85fad6cde5b47a6bdc6257c5937f8de877d5ca0356|ee9f12a061e03b99ab9dfea56295485cb5ce38cd37f56c396949f58b0627f455|d26e4c5ff0bc61ab0ff05ffa07880d0e5c540bc45b527e8e85bb1da469935e0d|3ada75d7d41d785d67d1d0732d7d6cbb12b23bfc21dfb4bbe3d933eaa1e5190a|85d6e028706ab18d262375dd22a7c1a0e7efa11851ea29b4c92739aaabfee403|53453ece16bda2f4a2c2f86e6b37f6de92dc45dba2eb811413c4af2c89f5fc08|59718d7cd9888cd8d813da2e93726484ea5ce5be8ecf1e1490b874bd897ccd0c|bc33db0a1751f813683724b7f5cf750f2497953607d1e82fb5d1429cbfd7a40c|cbdba04fb648203c91e0809e497e80e9fad7895b844ba6da6ac690c7ce49c10e size (u8): 02 announcements (group element (32 byte), group element (32 byte), group element (32 byte)): 1c76d0a50054ef7205cb95c1fd3f928f224fab8a8d70feaf4f5db90630c3845a|06df2f11c881e396318bd8f9e9f135c2477e923c3decfd6be5466d6166fb3c70|2edd0d1d0a201fb8c51a91d01328da257971ca78cc566d4b518cb2cd261f9664|4067a7359a745fe239db8e73059883aece4d506be71c1262b137e295ce5f8a0a|ac22c1d8d343e5c8b5be652573b85cba8f4dcb46cfa4aafd8d59974e2eb65f48|0cf85ab522e23203c4f2faa9f95ebc0cd75b04f04fef5d4001d349d1307bb557 ciphertext (group element (32 byte), group element (32 byte)): 0af4a91d8af4a489297a3f5255c1e12948787271275c50386ab2ef3980d88222|8e5f3c82d386e6a4ccf7663df5f6bbd9cbbadd6b2fea2668a8bf5603be295461|52902a35fc44aae80d9dcd85fad6cde5b47a6bdc6257c5937f8de877d5ca0356|ee9f12a061e03b99ab9dfea56295485cb5ce38cd37f56c396949f58b0627f455 response randomness (scalar (32 byte), scalar (32 byte), scalar (32 byte)): d26e4c5ff0bc61ab0ff05ffa07880d0e5c540bc45b527e8e85bb1da469935e0d|3ada75d7d41d785d67d1d0732d7d6cbb12b23bfc21dfb4bbe3d933eaa1e5190a|85d6e028706ab18d262375dd22a7c1a0e7efa11851ea29b4c92739aaabfee403|53453ece16bda2f4a2c2f86e6b37f6de92dc45dba2eb811413c4af2c89f5fc08|59718d7cd9888cd8d813da2e93726484ea5ce5be8ecf1e1490b874bd897ccd0c|bc33db0a1751f813683724b7f5cf750f2497953607d1e82fb5d1429cbfd7a40c scalar (32 byte): cbdba04fb648203c91e0809e497e80e9fad7895b844ba6da6ac690c7ce49c10e IOW stand for Inputs-Outputs-Witnesses: 00000000000000000100ff00000000000000036d2ac8ddbf6eaac95401f91baca7f068e3c237386d7c9a271f5187ed909155870200000000e6c8aa48925e37fdab75db13aca7c4f39068e12eeb3af8fd1f342005cae5ab9a1ef5344fab2374e9436a67f57041899693d333610dfe785d329988736797950d J\u00f6rmungandr specific block date (epoch (u32), slot (u32)) ( could be anything, not processed anymore ): 00000000|00000000 number of inputs and witnesses (u8) ( always 1 ): 01 number of outputs (u8) ( always 0 ): 00 Inputs 1. J\u00f6rmungandr specific tag: ff J\u00f6rmungandr specific value (u64) ( could be anything, not processed anymore ): 0000000000000003 input pointer (32 byte): 6d2ac8ddbf6eaac95401f91baca7f068e3c237386d7c9a271f5187ed90915587 Witnesses 1. J\u00f6rmungandr specific tag (u8): 02 J\u00f6rmungandr specific nonce (u32) ( could be anything, not processed anymore ): 00000000 legacy signature (64 byte): e6c8aa48925e37fdab75db13aca7c4f39068e12eeb3af8fd1f342005cae5ab9a1ef5344fab2374e9436a67f57041899693d333610dfe785d329988736797950d","title":"Example"},{"location":"architecture/08_concepts/catalyst_voting/v1/#vote-generation","text":"To generate a cryptographically secured ENCRYPTED-VOTE and PROOF-VOTE parts you can follow this spec . Important to note, that as part of initial setup of the voting procedure, the following properties are used: Each proposal, defined by the VOTE-PLAN-ID and PROPOSAL-INDEX , defines a number of possible options. ristretto255 as a backend cryptographic group. A commitment key \\(ck\\) defined as a BLAKE2b-512 hash of the VOTE-PLAN-ID bytes.","title":"Vote generation"},{"location":"architecture/08_concepts/catalyst_voting/v1/#signing-witness-generation","text":"Signature generated from the BLAKE2b-256 hashed VOTE-PAYLOAD bytes except of the WITNESS part (the last part from the bytes array): CAST-CERT bytes BLOCK-DATE bytes %x01 %x00 INPUT bytes Based on the on the transaction example, data to sign: 36ad42885189a0ac3438cdb57bc8ac7f6542e05a59d1f2e4d1d38194c9d4ac7b000203f6639bdbc9235103825a9f025eae5cff3bd9c9dcc0f5a4b286909744746c8b6fb0018773d3b4308344d2e90599cd03749658561787eab714b542a5ccaf078846f6639bdbc9235103825a9f025eae5cff3bd9c9dcc0f5a4b286909744746c8b6fc8f58976fc0e951ba284a24f3fc190d914ae53aebcc523e7a4a330c8655b4908f6639bdbc9235103825a9f025eae5cff3bd9c9dcc0f5a4b286909744746c8b6fb0018773d3b4308344d2e90599cd03749658561787eab714b542a5ccaf078846021c76d0a50054ef7205cb95c1fd3f928f224fab8a8d70feaf4f5db90630c3845a06df2f11c881e396318bd8f9e9f135c2477e923c3decfd6be5466d6166fb3c702edd0d1d0a201fb8c51a91d01328da257971ca78cc566d4b518cb2cd261f96644067a7359a745fe239db8e73059883aece4d506be71c1262b137e295ce5f8a0aac22c1d8d343e5c8b5be652573b85cba8f4dcb46cfa4aafd8d59974e2eb65f480cf85ab522e23203c4f2faa9f95ebc0cd75b04f04fef5d4001d349d1307bb5570af4a91d8af4a489297a3f5255c1e12948787271275c50386ab2ef3980d882228e5f3c82d386e6a4ccf7663df5f6bbd9cbbadd6b2fea2668a8bf5603be29546152902a35fc44aae80d9dcd85fad6cde5b47a6bdc6257c5937f8de877d5ca0356ee9f12a061e03b99ab9dfea56295485cb5ce38cd37f56c396949f58b0627f455d26e4c5ff0bc61ab0ff05ffa07880d0e5c540bc45b527e8e85bb1da469935e0d3ada75d7d41d785d67d1d0732d7d6cbb12b23bfc21dfb4bbe3d933eaa1e5190a85d6e028706ab18d262375dd22a7c1a0e7efa11851ea29b4c92739aaabfee40353453ece16bda2f4a2c2f86e6b37f6de92dc45dba2eb811413c4af2c89f5fc0859718d7cd9888cd8d813da2e93726484ea5ce5be8ecf1e1490b874bd897ccd0cbc33db0a1751f813683724b7f5cf750f2497953607d1e82fb5d1429cbfd7a40ccbdba04fb648203c91e0809e497e80e9fad7895b844ba6da6ac690c7ce49c10e00000000000000000100ff00000000000000036d2ac8ddbf6eaac95401f91baca7f068e3c237386d7c9a271f5187ed90915587 BLAKE2b-256 hash of the transaction data to sign equals to f51473df863be3e0383ce5a8da79c7ff51b3d98dadbbefbf9f042e8601901269 Expected witness (includes signature) 0200000000e6c8aa48925e37fdab75db13aca7c4f39068e12eeb3af8fd1f342005cae5ab9a1ef5344fab2374e9436a67f57041899693d333610dfe785d329988736797950d","title":"Signing (witness generation)"},{"location":"architecture/08_concepts/catalyst_voting/v1/#rationale","text":"","title":"Rationale"},{"location":"architecture/08_concepts/catalyst_voting/v1/#path-to-active","text":"","title":"Path to Active"},{"location":"architecture/08_concepts/catalyst_voting/v1/#acceptance-criteria","text":"","title":"Acceptance Criteria"},{"location":"architecture/08_concepts/catalyst_voting/v1/#implementation-plan","text":"","title":"Implementation Plan"},{"location":"architecture/08_concepts/catalyst_voting/v2/","text":"V2 \u00b6 Title: Catalyst V2 Voting Transaction Status: Proposed Authors: - Alex Pozhylenkov alex.pozhylenkov@iohk.io Created: 2024-10-24 Abstract \u00b6 This document describes a Catalyst V2 vote transaction structure. Motivation \u00b6 Specification \u00b6 It is a Catalyst v2 voting transaction defined on top the \"Generalized Vote Transaction\" structure. Following that spec need to define a choice , proof and prop-id . Also needed to define an event field, so for both public and private transaction it must be the following: event = { \"brand_id\" : UUID , \"campaign_id\" : UUID , \"election_id\" : UUID , \"category_id\" : UUID , } brand_id - a unique identifier which represents a \"brand\" who is running the voting, e.g. Catalyst, Midnight. campaign_id - a unique identifier which defines a \"campaign\" of voting, e.g. \"treasury campaign\". election_id - a unique identifier which defines an election, e.g. \"Catalyst Fund 1\", \"Catalyst Fund 2\". category_id - a unique identifier which defines a voting category as a collection of proposals, e.g. \"Development & Infrastructure\", \"Products & Integrations\". Public vote \u00b6 Public vote transaction v2 definition: vote_tx_v2_public.cddl ; All encoders/decoders of this specification must follow deterministic cbor encoding rules ; https://datatracker.ietf.org/doc/html/draft-ietf-cbor-cde-06 vote-tx-v2-public < voter-data-t > = gen-vote-tx < choice-data , proof-data , proposal , voter-data-t > choice-data = uint proof-data = undefined proposal = UUID ;# include gen_vote_tx For the public vote vote-type value defined as follows: vote-type = #6.37 ( h '8DE5586CE9984B9587427BE3C8592803' ) ; 8de5586c-e998-4b95-8742-7be3c8592803 Private vote \u00b6 Private vote transaction v2 definition: vote_tx_v2_private.cddl ; All encoders/decoders of this specification must follow deterministic cbor encoding rules ; https://datatracker.ietf.org/doc/html/draft-ietf-cbor-cde-06 vote-tx-v2 < voter-data-t > = gen-vote-tx < choice-data , proof-data , proposal , voter-data-t > choice-data = ciphertext ciphertext = [ group-element , group-element ] proposal = UUID proof-data = zk-proof zk-proof = [[ + ( announcement , ~ ciphertext , r-response )], scalar ] announcement = ( group-element , group-element , group-element ) r-response = ( scalar , scalar , scalar ) scalar = bytes .size 32 group-element = bytes .size 32 ;# include gen_vote_tx For the private vote vote-type value defined as follows: vote-type = #6.37 ( h 'E78EE18DF38044C1A85280AA6ECB07FE' ) ; e78ee18d-f380-44c1-a852-80aa6ecb07fe Vote and Proof generation \u00b6 To generate a cryptographically secured choice-data and zk_proof parts you can follow this spec . Important to note, that as part of initial setup of the voting procedure, the following properties are used: Each proposal, defined by the proposal field, defines a number of possible options. ristretto255 as a backend cryptographic group. A commitment key \\(ck\\) defined as a BLAKE2b-512 hash of the proposal bytes. Rationale \u00b6 Path to Active \u00b6 Acceptance Criteria \u00b6 Implementation Plan \u00b6","title":"V2"},{"location":"architecture/08_concepts/catalyst_voting/v2/#v2","text":"Title: Catalyst V2 Voting Transaction Status: Proposed Authors: - Alex Pozhylenkov alex.pozhylenkov@iohk.io Created: 2024-10-24","title":"V2"},{"location":"architecture/08_concepts/catalyst_voting/v2/#abstract","text":"This document describes a Catalyst V2 vote transaction structure.","title":"Abstract"},{"location":"architecture/08_concepts/catalyst_voting/v2/#motivation","text":"","title":"Motivation"},{"location":"architecture/08_concepts/catalyst_voting/v2/#specification","text":"It is a Catalyst v2 voting transaction defined on top the \"Generalized Vote Transaction\" structure. Following that spec need to define a choice , proof and prop-id . Also needed to define an event field, so for both public and private transaction it must be the following: event = { \"brand_id\" : UUID , \"campaign_id\" : UUID , \"election_id\" : UUID , \"category_id\" : UUID , } brand_id - a unique identifier which represents a \"brand\" who is running the voting, e.g. Catalyst, Midnight. campaign_id - a unique identifier which defines a \"campaign\" of voting, e.g. \"treasury campaign\". election_id - a unique identifier which defines an election, e.g. \"Catalyst Fund 1\", \"Catalyst Fund 2\". category_id - a unique identifier which defines a voting category as a collection of proposals, e.g. \"Development & Infrastructure\", \"Products & Integrations\".","title":"Specification"},{"location":"architecture/08_concepts/catalyst_voting/v2/#public-vote","text":"Public vote transaction v2 definition: vote_tx_v2_public.cddl ; All encoders/decoders of this specification must follow deterministic cbor encoding rules ; https://datatracker.ietf.org/doc/html/draft-ietf-cbor-cde-06 vote-tx-v2-public < voter-data-t > = gen-vote-tx < choice-data , proof-data , proposal , voter-data-t > choice-data = uint proof-data = undefined proposal = UUID ;# include gen_vote_tx For the public vote vote-type value defined as follows: vote-type = #6.37 ( h '8DE5586CE9984B9587427BE3C8592803' ) ; 8de5586c-e998-4b95-8742-7be3c8592803","title":"Public vote"},{"location":"architecture/08_concepts/catalyst_voting/v2/#private-vote","text":"Private vote transaction v2 definition: vote_tx_v2_private.cddl ; All encoders/decoders of this specification must follow deterministic cbor encoding rules ; https://datatracker.ietf.org/doc/html/draft-ietf-cbor-cde-06 vote-tx-v2 < voter-data-t > = gen-vote-tx < choice-data , proof-data , proposal , voter-data-t > choice-data = ciphertext ciphertext = [ group-element , group-element ] proposal = UUID proof-data = zk-proof zk-proof = [[ + ( announcement , ~ ciphertext , r-response )], scalar ] announcement = ( group-element , group-element , group-element ) r-response = ( scalar , scalar , scalar ) scalar = bytes .size 32 group-element = bytes .size 32 ;# include gen_vote_tx For the private vote vote-type value defined as follows: vote-type = #6.37 ( h 'E78EE18DF38044C1A85280AA6ECB07FE' ) ; e78ee18d-f380-44c1-a852-80aa6ecb07fe","title":"Private vote"},{"location":"architecture/08_concepts/catalyst_voting/v2/#vote-and-proof-generation","text":"To generate a cryptographically secured choice-data and zk_proof parts you can follow this spec . Important to note, that as part of initial setup of the voting procedure, the following properties are used: Each proposal, defined by the proposal field, defines a number of possible options. ristretto255 as a backend cryptographic group. A commitment key \\(ck\\) defined as a BLAKE2b-512 hash of the proposal bytes.","title":"Vote and Proof generation"},{"location":"architecture/08_concepts/catalyst_voting/v2/#rationale","text":"","title":"Rationale"},{"location":"architecture/08_concepts/catalyst_voting/v2/#path-to-active","text":"","title":"Path to Active"},{"location":"architecture/08_concepts/catalyst_voting/v2/#acceptance-criteria","text":"","title":"Acceptance Criteria"},{"location":"architecture/08_concepts/catalyst_voting/v2/#implementation-plan","text":"","title":"Implementation Plan"},{"location":"architecture/08_concepts/immutable_ledger/ledger/","text":"Immutable Ledger Design \u00b6 Title: Immutable Ledger Design Status: Proposed Authors: - Alex Pozhylenkov alex.pozhylenkov@iohk.io Created: 2024-08-19 Abstract \u00b6 This document describes a specification of the immutable ledger for various purposes of project \"Catalyst\". Motivation \u00b6 Project \"Catalyst\" requires a solution for storing people votes and any other data, in a transparent, verifiable, scalable and immutable way. Specification \u00b6 Ledger structure \u00b6 Ledger will be represented as a collection of distinct, unconnected chains, processed and run in parallel. The only common thing for all these chains will be a \"tree\" identifier, so these chains will serve and form an overall ledger state. Obviously, given approach leads to data duplication, as each chain, will not know anything about others. And it also requires that the overall ledger state, could be deterministically defined at any point of time, considering potential transaction overlapping or duplication. To achieve an immutability of data inside each chain Each particular chain, will be a common sequence of blocks. To achieve an immutability of data inside each chain, cryptographic hashing is applied. So each block from the chain reference to the hash of previous one. It is a widely used technic to prevent a modification of some data from previous blocks, without affecting structure of the current one. The described approach allows to easily scale and increase throughput of the network on demand at any time, just by starting to process new chains. Temporary chains \u00b6 It's a common thing for blockchains to have a starting block (genesis), but it's unusual to have a final block for a chain. After which no any block could be produced. And that's a main distinguish for this Immutable Ledger design, it has a final block. So any chain will be bounded by some period of time. Which is well suited where it comes to process some temporary event e.g. voting. Block structure \u00b6 Block CDDL definition: block.cddl ; All encoders/decoders of this specification must follow deterministic cbor encoding rules ; https://datatracker.ietf.org/doc/html/draft-ietf-cbor-cde-06 block = [ block-header , block-data , validator-signature , ] block-header = [ chain-id : UUID , ; UUID v7 height : int , timestamp : #6.1 ( uint .ge 1722470400 ), ; Epoch-based date/time prev-block-id : hash-bytes , ; hash of the previous block ? ledger-type : UUID , ; UUID v4 ? purpose-id : UUID , ; UUID v7 ? validator , ~ metadata , ] block-data = encoded-cbor UUID = #6.37 ( bytes ) ; UUID type kid = hash-bytes ; hash of the x509/c509 certificate validator = ( kid / [ 2 * kid ]) metadata = [ * any ] validator-signature = ( bytes / [ 2 * bytes ]) ;# include hash Header: chain-id - unique identifier of the chain. height - block's height. Also is used to identify the block type: genesis , regular , final (in more details described in validation section ). timestamp - block's timestamp. prev-block-id - previous block hash. ledger-type - unique identifier of the ledger type. In general, this is the way to strictly bound and specify block-data of the ledger for the specific ledger-type . But such rules will be a part of the specific ledger type definition, and not specified by this document. purpose-id - unique identifier of the purpose. As it was stated before, each Ledger instance will have a strict time boundaries, so each of them will run for different purposes. This is the way to distinguish them. validator - identifier or identifiers of the entity who was produced and processed a block. metadata - fully optional field, to add some arbitrary metadata to the block. Block: block-header - block header described above, block-data - an array of some CBOR encoded data validator-signature - a signature or signatures of the validator's. Block validation rules \u00b6 chain-id MUST be the same as for the previous block (except for genesis). height MUST be incremented by 1 from the previous block height value (except for genesis and final block). Genesis block MUST have 0 value. Final block MUST hash be incremented by 1 from the previous block height and changed the sign to negative. E.g. previous block height is 9 and the Final block height is -10 . Final block is the last one for the specific chain and any other block could not be referenced to the Final one. timestamp MUST be greater or equals than the timestamp of the previous block (except for genesis). prev-block-id MUST be a hash of the previous block bytes (except for genesis). ledger-type MUST be the same as for the previous block if present (except for genesis). MANDATORY field for Genesis and Final blocks. purpose-id MUST be the same as for the previous block if present (except for genesis). MANDATORY field for Genesis and Final blocks. validator MUST be the same as for the previous block if present (except for genesis). MANDATORY field for Genesis and Final blocks. prev-block-id 's CBOR tag value and bstr size MUST be the same as for the previous block (except for genesis). Means that the hash function type and hash size itself must be the same. prev-block-id and validator-signature MUST use the same hash function, defined with the hash-bytes . prev-block-id for the Genesis block MUST be a hash of the genesis-to-prev-hash bytes. block-data MUST be a deterministically encoded CBOR. Genesis to previous block hash CDDL definition: genesis-to-prev-hash.cddl ; All encoders/decoders of this specification must follow deterministic cbor encoding rules ; https://datatracker.ietf.org/doc/html/draft-ietf-cbor-cde-06 genesis-to-prev-hash = [ chain-id : UUID , ; UUID v7 timestamp : #6.1 ( uint .ge 1722470400 ), ; Epoch-based date/time ledger-type : UUID , ; UUID v4 purpose-id : UUID , ; UUID v7 validator , ] UUID = #6.37 ( bytes ) ; UUID type validator = ( kid / [ 2 * kid ]) kid = hash-bytes ; hash of the x509/c509 certificate ;# include hash Signature rules \u00b6 validator-signature MUST be a signature of the hashed block-header bytes and the block-data bytes (with the order the same as defined for block ). Signed by the validator's keys defined in the corresponding certificates referenced by the validator . Signature algorithm is defined by the certificate. The format and size of this field MUST be totally the same as validator field: if validator is only one id => validator-signature contains only 1 signature; if validator is array => validator-signature contains an array with the same length; order of signatures from the validator-signature 's array corresponds to the validators order of validator 's array. Rationale \u00b6 Path to Active \u00b6 Acceptance Criteria \u00b6 Implementation Plan \u00b6","title":"Immutable Ledger Design"},{"location":"architecture/08_concepts/immutable_ledger/ledger/#immutable-ledger-design","text":"Title: Immutable Ledger Design Status: Proposed Authors: - Alex Pozhylenkov alex.pozhylenkov@iohk.io Created: 2024-08-19","title":"Immutable Ledger Design"},{"location":"architecture/08_concepts/immutable_ledger/ledger/#abstract","text":"This document describes a specification of the immutable ledger for various purposes of project \"Catalyst\".","title":"Abstract"},{"location":"architecture/08_concepts/immutable_ledger/ledger/#motivation","text":"Project \"Catalyst\" requires a solution for storing people votes and any other data, in a transparent, verifiable, scalable and immutable way.","title":"Motivation"},{"location":"architecture/08_concepts/immutable_ledger/ledger/#specification","text":"","title":"Specification"},{"location":"architecture/08_concepts/immutable_ledger/ledger/#ledger-structure","text":"Ledger will be represented as a collection of distinct, unconnected chains, processed and run in parallel. The only common thing for all these chains will be a \"tree\" identifier, so these chains will serve and form an overall ledger state. Obviously, given approach leads to data duplication, as each chain, will not know anything about others. And it also requires that the overall ledger state, could be deterministically defined at any point of time, considering potential transaction overlapping or duplication. To achieve an immutability of data inside each chain Each particular chain, will be a common sequence of blocks. To achieve an immutability of data inside each chain, cryptographic hashing is applied. So each block from the chain reference to the hash of previous one. It is a widely used technic to prevent a modification of some data from previous blocks, without affecting structure of the current one. The described approach allows to easily scale and increase throughput of the network on demand at any time, just by starting to process new chains.","title":"Ledger structure"},{"location":"architecture/08_concepts/immutable_ledger/ledger/#temporary-chains","text":"It's a common thing for blockchains to have a starting block (genesis), but it's unusual to have a final block for a chain. After which no any block could be produced. And that's a main distinguish for this Immutable Ledger design, it has a final block. So any chain will be bounded by some period of time. Which is well suited where it comes to process some temporary event e.g. voting.","title":"Temporary chains"},{"location":"architecture/08_concepts/immutable_ledger/ledger/#block-structure","text":"Block CDDL definition: block.cddl ; All encoders/decoders of this specification must follow deterministic cbor encoding rules ; https://datatracker.ietf.org/doc/html/draft-ietf-cbor-cde-06 block = [ block-header , block-data , validator-signature , ] block-header = [ chain-id : UUID , ; UUID v7 height : int , timestamp : #6.1 ( uint .ge 1722470400 ), ; Epoch-based date/time prev-block-id : hash-bytes , ; hash of the previous block ? ledger-type : UUID , ; UUID v4 ? purpose-id : UUID , ; UUID v7 ? validator , ~ metadata , ] block-data = encoded-cbor UUID = #6.37 ( bytes ) ; UUID type kid = hash-bytes ; hash of the x509/c509 certificate validator = ( kid / [ 2 * kid ]) metadata = [ * any ] validator-signature = ( bytes / [ 2 * bytes ]) ;# include hash Header: chain-id - unique identifier of the chain. height - block's height. Also is used to identify the block type: genesis , regular , final (in more details described in validation section ). timestamp - block's timestamp. prev-block-id - previous block hash. ledger-type - unique identifier of the ledger type. In general, this is the way to strictly bound and specify block-data of the ledger for the specific ledger-type . But such rules will be a part of the specific ledger type definition, and not specified by this document. purpose-id - unique identifier of the purpose. As it was stated before, each Ledger instance will have a strict time boundaries, so each of them will run for different purposes. This is the way to distinguish them. validator - identifier or identifiers of the entity who was produced and processed a block. metadata - fully optional field, to add some arbitrary metadata to the block. Block: block-header - block header described above, block-data - an array of some CBOR encoded data validator-signature - a signature or signatures of the validator's.","title":"Block structure"},{"location":"architecture/08_concepts/immutable_ledger/ledger/#block-validation-rules","text":"chain-id MUST be the same as for the previous block (except for genesis). height MUST be incremented by 1 from the previous block height value (except for genesis and final block). Genesis block MUST have 0 value. Final block MUST hash be incremented by 1 from the previous block height and changed the sign to negative. E.g. previous block height is 9 and the Final block height is -10 . Final block is the last one for the specific chain and any other block could not be referenced to the Final one. timestamp MUST be greater or equals than the timestamp of the previous block (except for genesis). prev-block-id MUST be a hash of the previous block bytes (except for genesis). ledger-type MUST be the same as for the previous block if present (except for genesis). MANDATORY field for Genesis and Final blocks. purpose-id MUST be the same as for the previous block if present (except for genesis). MANDATORY field for Genesis and Final blocks. validator MUST be the same as for the previous block if present (except for genesis). MANDATORY field for Genesis and Final blocks. prev-block-id 's CBOR tag value and bstr size MUST be the same as for the previous block (except for genesis). Means that the hash function type and hash size itself must be the same. prev-block-id and validator-signature MUST use the same hash function, defined with the hash-bytes . prev-block-id for the Genesis block MUST be a hash of the genesis-to-prev-hash bytes. block-data MUST be a deterministically encoded CBOR. Genesis to previous block hash CDDL definition: genesis-to-prev-hash.cddl ; All encoders/decoders of this specification must follow deterministic cbor encoding rules ; https://datatracker.ietf.org/doc/html/draft-ietf-cbor-cde-06 genesis-to-prev-hash = [ chain-id : UUID , ; UUID v7 timestamp : #6.1 ( uint .ge 1722470400 ), ; Epoch-based date/time ledger-type : UUID , ; UUID v4 purpose-id : UUID , ; UUID v7 validator , ] UUID = #6.37 ( bytes ) ; UUID type validator = ( kid / [ 2 * kid ]) kid = hash-bytes ; hash of the x509/c509 certificate ;# include hash","title":"Block validation rules"},{"location":"architecture/08_concepts/immutable_ledger/ledger/#signature-rules","text":"validator-signature MUST be a signature of the hashed block-header bytes and the block-data bytes (with the order the same as defined for block ). Signed by the validator's keys defined in the corresponding certificates referenced by the validator . Signature algorithm is defined by the certificate. The format and size of this field MUST be totally the same as validator field: if validator is only one id => validator-signature contains only 1 signature; if validator is array => validator-signature contains an array with the same length; order of signatures from the validator-signature 's array corresponds to the validators order of validator 's array.","title":"Signature rules"},{"location":"architecture/08_concepts/immutable_ledger/ledger/#rationale","text":"","title":"Rationale"},{"location":"architecture/08_concepts/immutable_ledger/ledger/#path-to-active","text":"","title":"Path to Active"},{"location":"architecture/08_concepts/immutable_ledger/ledger/#acceptance-criteria","text":"","title":"Acceptance Criteria"},{"location":"architecture/08_concepts/immutable_ledger/ledger/#implementation-plan","text":"","title":"Implementation Plan"},{"location":"architecture/09_architecture_decisions/","text":"Architecture Decisions \u00b6 Index graph TD 0001-arch-std[0001 Architecture Documentation Standard] click 0001-arch-std \"/catalyst-docs/architecture/09_architecture_decisions/0001-arch-std/\" _blank 0001-arch-std:::mermaid-accepted 0001-arch-std:::mermaid-common 0002-adr[0002 Architecture Decision Records] click 0002-adr \"/catalyst-docs/architecture/09_architecture_decisions/0002-adr/\" _blank 0002-adr:::mermaid-accepted 0002-adr:::mermaid-common 0001-arch-std -- Extended --> 0002-adr 0003-flutter[0003 Flutter for Catalyst Voting Frontend] click 0003-flutter \"/catalyst-docs/architecture/09_architecture_decisions/0003-flutter/\" _blank 0003-flutter:::mermaid-accepted 0003-flutter:::mermaid-common 0004-webp[0004 Store/Display images in WebP format.] click 0004-webp \"/catalyst-docs/architecture/09_architecture_decisions/0004-webp/\" _blank 0004-webp:::mermaid-proposed 0004-webp:::mermaid-common 0005-flutter-app[0005 Catalyst Voices Frontend App Architecture] click 0005-flutter-app \"/catalyst-docs/architecture/09_architecture_decisions/0005-flutter-app/\" _blank 0005-flutter-app:::mermaid-proposed 0005-flutter-app:::mermaid-common 0006-cursor-pegination-cat-data-service[0006 Cursor-based pagination for Catalyst Data Service] click 0006-cursor-pegination-cat-data-service \"/catalyst-docs/architecture/09_architecture_decisions/0006-cursor-pegination-cat-data-service/\" _blank 0006-cursor-pegination-cat-data-service:::mermaid-accepted 0006-cursor-pegination-cat-data-service:::mermaid-common classDef mermaid-draft fill:#a3a3a3; classDef mermaid-common color:#595959; classDef mermaid-proposed fill:#b6d8ff; classDef mermaid-common color:#595959; classDef mermaid-accepted fill:#b4eda0; classDef mermaid-common color:#595959; classDef mermaid-rejected fill:#ffd5d1; classDef mermaid-common color:#595959; classDef mermaid-superseded fill:#ffebb6; classDef mermaid-common color:#595959;","title":"Architecture Decisions"},{"location":"architecture/09_architecture_decisions/#architecture-decisions","text":"Index graph TD 0001-arch-std[0001 Architecture Documentation Standard] click 0001-arch-std \"/catalyst-docs/architecture/09_architecture_decisions/0001-arch-std/\" _blank 0001-arch-std:::mermaid-accepted 0001-arch-std:::mermaid-common 0002-adr[0002 Architecture Decision Records] click 0002-adr \"/catalyst-docs/architecture/09_architecture_decisions/0002-adr/\" _blank 0002-adr:::mermaid-accepted 0002-adr:::mermaid-common 0001-arch-std -- Extended --> 0002-adr 0003-flutter[0003 Flutter for Catalyst Voting Frontend] click 0003-flutter \"/catalyst-docs/architecture/09_architecture_decisions/0003-flutter/\" _blank 0003-flutter:::mermaid-accepted 0003-flutter:::mermaid-common 0004-webp[0004 Store/Display images in WebP format.] click 0004-webp \"/catalyst-docs/architecture/09_architecture_decisions/0004-webp/\" _blank 0004-webp:::mermaid-proposed 0004-webp:::mermaid-common 0005-flutter-app[0005 Catalyst Voices Frontend App Architecture] click 0005-flutter-app \"/catalyst-docs/architecture/09_architecture_decisions/0005-flutter-app/\" _blank 0005-flutter-app:::mermaid-proposed 0005-flutter-app:::mermaid-common 0006-cursor-pegination-cat-data-service[0006 Cursor-based pagination for Catalyst Data Service] click 0006-cursor-pegination-cat-data-service \"/catalyst-docs/architecture/09_architecture_decisions/0006-cursor-pegination-cat-data-service/\" _blank 0006-cursor-pegination-cat-data-service:::mermaid-accepted 0006-cursor-pegination-cat-data-service:::mermaid-common classDef mermaid-draft fill:#a3a3a3; classDef mermaid-common color:#595959; classDef mermaid-proposed fill:#b6d8ff; classDef mermaid-common color:#595959; classDef mermaid-accepted fill:#b4eda0; classDef mermaid-common color:#595959; classDef mermaid-rejected fill:#ffd5d1; classDef mermaid-common color:#595959; classDef mermaid-superseded fill:#ffebb6; classDef mermaid-common color:#595959;","title":"Architecture Decisions"},{"location":"architecture/09_architecture_decisions/0001-arch-std/","text":"Context \u00b6 There needs to be a commonly understood and well documented structure to Architecture Documentation. Architecture Documentation is the responsibility of the entire team. A standardized structure to that documentation helps with collaboration. Assumptions \u00b6 Architecture documentation is the collective responsibility of the development team. A well documented structure to that documentation will aid in collaboration and maintenance of the documentation. Decision \u00b6 We will be using the arc42 standard for organizing architecture documentation. Risks \u00b6 That arc42 becomes unmaintained upstream, or some flaw is found with its methodology. That the team does not understand the structure of the architecture documentation or necessity to maintain it. Consequences \u00b6 If we do: It is easier to maintain documentation when there is an agreed structure to it. It is easier to on-board new members of the team when there are resources to help understand the documentation and its structure. Architecture Documentation will be of higher quality and more meaningfully reviewed in the context of an agreed structure. If we don't: Architecture docs will be \"ad-hoc\". Difficult for the team to meaningfully collaborate on Architecture. Difficult to maintain. Difficult to ensure the necessary information is captured. Difficult to iterate and be agile. More Information \u00b6 arc42 Original Templates Main Documentation Books Examples","title":"0001 Architecture Documentation Standard"},{"location":"architecture/09_architecture_decisions/0001-arch-std/#context","text":"There needs to be a commonly understood and well documented structure to Architecture Documentation. Architecture Documentation is the responsibility of the entire team. A standardized structure to that documentation helps with collaboration.","title":"Context"},{"location":"architecture/09_architecture_decisions/0001-arch-std/#assumptions","text":"Architecture documentation is the collective responsibility of the development team. A well documented structure to that documentation will aid in collaboration and maintenance of the documentation.","title":"Assumptions"},{"location":"architecture/09_architecture_decisions/0001-arch-std/#decision","text":"We will be using the arc42 standard for organizing architecture documentation.","title":"Decision"},{"location":"architecture/09_architecture_decisions/0001-arch-std/#risks","text":"That arc42 becomes unmaintained upstream, or some flaw is found with its methodology. That the team does not understand the structure of the architecture documentation or necessity to maintain it.","title":"Risks"},{"location":"architecture/09_architecture_decisions/0001-arch-std/#consequences","text":"If we do: It is easier to maintain documentation when there is an agreed structure to it. It is easier to on-board new members of the team when there are resources to help understand the documentation and its structure. Architecture Documentation will be of higher quality and more meaningfully reviewed in the context of an agreed structure. If we don't: Architecture docs will be \"ad-hoc\". Difficult for the team to meaningfully collaborate on Architecture. Difficult to maintain. Difficult to ensure the necessary information is captured. Difficult to iterate and be agile.","title":"Consequences"},{"location":"architecture/09_architecture_decisions/0001-arch-std/#more-information","text":"arc42 Original Templates Main Documentation Books Examples","title":"More Information"},{"location":"architecture/09_architecture_decisions/0002-adr/","text":"Context \u00b6 Architecture Decision Records are part of arc42 . We need an efficient and automated way to manage them. The system needs to be easy for anyone to use as documenting Architecture Decisions is a team responsibility. Assumptions \u00b6 The team as a whole is responsible for creating and maintaining Architecture Decision Records. Decision \u00b6 We will use the MkDocs Material ADR Plugin to assist in ADR documentation and automation. Risks \u00b6 The plugin doesn't get maintained or has technical issues This risk can be mitigated because the plugin is simple, and it would be easy for us to fork and maintain it as required. Consequences \u00b6 ADR become easier for people to author. This should assist in making the team more pro-active in their creation and maintenance. More Information \u00b6 arc42 arc42 ADR Guide MkDocs Material ADR Plugin Fixed fork of MkDocs Material ADR Plugin","title":"0002 Architecture Decision Records"},{"location":"architecture/09_architecture_decisions/0002-adr/#context","text":"Architecture Decision Records are part of arc42 . We need an efficient and automated way to manage them. The system needs to be easy for anyone to use as documenting Architecture Decisions is a team responsibility.","title":"Context"},{"location":"architecture/09_architecture_decisions/0002-adr/#assumptions","text":"The team as a whole is responsible for creating and maintaining Architecture Decision Records.","title":"Assumptions"},{"location":"architecture/09_architecture_decisions/0002-adr/#decision","text":"We will use the MkDocs Material ADR Plugin to assist in ADR documentation and automation.","title":"Decision"},{"location":"architecture/09_architecture_decisions/0002-adr/#risks","text":"The plugin doesn't get maintained or has technical issues This risk can be mitigated because the plugin is simple, and it would be easy for us to fork and maintain it as required.","title":"Risks"},{"location":"architecture/09_architecture_decisions/0002-adr/#consequences","text":"ADR become easier for people to author. This should assist in making the team more pro-active in their creation and maintenance.","title":"Consequences"},{"location":"architecture/09_architecture_decisions/0002-adr/#more-information","text":"arc42 arc42 ADR Guide MkDocs Material ADR Plugin Fixed fork of MkDocs Material ADR Plugin","title":"More Information"},{"location":"architecture/09_architecture_decisions/0003-flutter/","text":"Context \u00b6 The need for a versatile and efficient framework to develop applications across multiple platforms (Web, iOS, Android, macOS, Linux, and Windows) led us to consider various options. Flutter emerged as the most promising solution due to its wide-ranging platform support, single codebase feature, and robust widget library. Assumptions \u00b6 Flutter's capabilities extend efficiently to web and desktop platforms, in addition to mobile. The development team is capable of learning and adapting to Flutter and Dart for cross-platform development. The performance and compatibility of Flutter-built applications are adequate across all targeted platforms. Decision \u00b6 We have decided to use Flutter as our primary framework for developing applications on Web, iOS, Android, macOS, Linux, and Windows platforms. This decision leverages Flutter's ability to provide a single codebase for multiple platforms, its robust widget library, and its growing support for desktop and web applications. Risks \u00b6 Potential complications in accessing some native features and hardware-specific functionalities on each platform. The need for additional testing across different platforms to ensure consistency and performance. Flutter's desktop and web support is less mature than its mobile support, which might lead to unforeseen challenges. Consequences \u00b6 Streamlined development process with a unified codebase, reducing development and maintenance costs. Increased ability to rapidly deploy updates and new features across all platforms simultaneously. Dependency on a single technology stack, which may pose challenges if Flutter does not evolve as expected. More Information \u00b6 Flutter Dart Build more with Flutter Flutter apps in production A strong ecosystem, powered by open source Flutter\u2019s roadmap","title":"0003 Flutter for Catalyst Voting Frontend"},{"location":"architecture/09_architecture_decisions/0003-flutter/#context","text":"The need for a versatile and efficient framework to develop applications across multiple platforms (Web, iOS, Android, macOS, Linux, and Windows) led us to consider various options. Flutter emerged as the most promising solution due to its wide-ranging platform support, single codebase feature, and robust widget library.","title":"Context"},{"location":"architecture/09_architecture_decisions/0003-flutter/#assumptions","text":"Flutter's capabilities extend efficiently to web and desktop platforms, in addition to mobile. The development team is capable of learning and adapting to Flutter and Dart for cross-platform development. The performance and compatibility of Flutter-built applications are adequate across all targeted platforms.","title":"Assumptions"},{"location":"architecture/09_architecture_decisions/0003-flutter/#decision","text":"We have decided to use Flutter as our primary framework for developing applications on Web, iOS, Android, macOS, Linux, and Windows platforms. This decision leverages Flutter's ability to provide a single codebase for multiple platforms, its robust widget library, and its growing support for desktop and web applications.","title":"Decision"},{"location":"architecture/09_architecture_decisions/0003-flutter/#risks","text":"Potential complications in accessing some native features and hardware-specific functionalities on each platform. The need for additional testing across different platforms to ensure consistency and performance. Flutter's desktop and web support is less mature than its mobile support, which might lead to unforeseen challenges.","title":"Risks"},{"location":"architecture/09_architecture_decisions/0003-flutter/#consequences","text":"Streamlined development process with a unified codebase, reducing development and maintenance costs. Increased ability to rapidly deploy updates and new features across all platforms simultaneously. Dependency on a single technology stack, which may pose challenges if Flutter does not evolve as expected.","title":"Consequences"},{"location":"architecture/09_architecture_decisions/0003-flutter/#more-information","text":"Flutter Dart Build more with Flutter Flutter apps in production A strong ecosystem, powered by open source Flutter\u2019s roadmap","title":"More Information"},{"location":"architecture/09_architecture_decisions/0004-webp/","text":"Context \u00b6 As we develop our new cross-platform application (supporting Web, iOS, Android, macOS, Windows, and Linux), we face a decision regarding the choice of image format. The selection of an image format is critical for optimizing performance, load times, and the overall user experience across diverse platforms. Assumptions \u00b6 The WebP format will be adequately supported across all targeted platforms. Adoption of WebP will yield significant benefits in terms of performance and user experience. Our development and design teams will adapt to using WebP without significant challenges. Decision \u00b6 We propose to adopt WebP as our standard image format for both web and native applications. This decision is based on several advantages of WebP over JPG and PNG: Superior Compression : WebP provides better compression than JPG and PNG, allowing images to be significantly smaller in size without a noticeable loss in quality. This leads to faster loading times and reduced bandwidth usage, which is particularly beneficial for mobile users. Support for Transparency : Unlike JPG and capable of more efficient transparency handling than PNG, WebP supports transparent backgrounds, which is essential for various design elements. Improved Performance : The smaller file size of WebP directly translates to quicker image loading and rendering, contributing to a smoother user experience. Versatility : WebP is versatile, supporting both lossy and lossless compression, making it suitable for a wide range of image types \u2013 from photographic images to graphical designs. Future-Proofing : As a modern format, WebP is increasingly supported by new browsers and platforms, making it a future-proof choice. Risks \u00b6 Some older browsers or platforms might have limited or no support for WebP, necessitating fallback solutions. The development team may need to overcome a learning curve associated with handling a new image format. Consequences \u00b6 Enhanced application performance across all platforms due to reduced image sizes. Improved loading times, especially critical for mobile users with limited bandwidth. Potential for initial development overhead as tools and processes are adapted for WebP. More Information \u00b6 WebP Comparison with Other Formats Browser Support for WebP","title":"0004 Store/Display images in WebP format."},{"location":"architecture/09_architecture_decisions/0004-webp/#context","text":"As we develop our new cross-platform application (supporting Web, iOS, Android, macOS, Windows, and Linux), we face a decision regarding the choice of image format. The selection of an image format is critical for optimizing performance, load times, and the overall user experience across diverse platforms.","title":"Context"},{"location":"architecture/09_architecture_decisions/0004-webp/#assumptions","text":"The WebP format will be adequately supported across all targeted platforms. Adoption of WebP will yield significant benefits in terms of performance and user experience. Our development and design teams will adapt to using WebP without significant challenges.","title":"Assumptions"},{"location":"architecture/09_architecture_decisions/0004-webp/#decision","text":"We propose to adopt WebP as our standard image format for both web and native applications. This decision is based on several advantages of WebP over JPG and PNG: Superior Compression : WebP provides better compression than JPG and PNG, allowing images to be significantly smaller in size without a noticeable loss in quality. This leads to faster loading times and reduced bandwidth usage, which is particularly beneficial for mobile users. Support for Transparency : Unlike JPG and capable of more efficient transparency handling than PNG, WebP supports transparent backgrounds, which is essential for various design elements. Improved Performance : The smaller file size of WebP directly translates to quicker image loading and rendering, contributing to a smoother user experience. Versatility : WebP is versatile, supporting both lossy and lossless compression, making it suitable for a wide range of image types \u2013 from photographic images to graphical designs. Future-Proofing : As a modern format, WebP is increasingly supported by new browsers and platforms, making it a future-proof choice.","title":"Decision"},{"location":"architecture/09_architecture_decisions/0004-webp/#risks","text":"Some older browsers or platforms might have limited or no support for WebP, necessitating fallback solutions. The development team may need to overcome a learning curve associated with handling a new image format.","title":"Risks"},{"location":"architecture/09_architecture_decisions/0004-webp/#consequences","text":"Enhanced application performance across all platforms due to reduced image sizes. Improved loading times, especially critical for mobile users with limited bandwidth. Potential for initial development overhead as tools and processes are adapted for WebP.","title":"Consequences"},{"location":"architecture/09_architecture_decisions/0004-webp/#more-information","text":"WebP Comparison with Other Formats Browser Support for WebP","title":"More Information"},{"location":"architecture/09_architecture_decisions/0005-flutter-app/","text":"Context \u00b6 Our goal for the Catalyst Voices Frontend App is to establish a structure that ensures scalability, maintainability, and a clear separation of concerns. With the complexity of voting events, it\u2019s crucial to have an architecture that supports extensive functionality and easy adaptability to change. Assumptions \u00b6 Clean Architecture will facilitate a clear separation of concerns across the app. The BLoC pattern, combined with ViewModels, will streamline state management across the app. Developers are or will become comfortable with reactive programming paradigms and Flutter\u2019s Streams. The Flutter community will continue to support and evolve the BLoC pattern. The BLoC pattern will be sufficient to handle the app\u2019s state management needs. Decision \u00b6 We have chosen to use BLoC pattern alongside ViewModels, guided by Clean Architecture principles, for the development of the Catalyst Voices Frontend App. This approach will segregate the app into distinct layers - presentation, domain, and data, with BLoC serving as the intermediary for state management and business logic. The BLoC pattern will manage the app's state reactively, making it easier to handle complex state dependencies and asynchronous operations. The ViewModel layer will further aid in abstracting the presentation logic from BLoCs. flowchart TB subgraph id1 [BLoC pattern in conjunction with ViewModels steered by the principles of Clean Architecture] subgraph al01 [Application Layer] direction LR subgraph al02 [Presentation Layer] direction LR subgraph al03 [Connect Wallet Screen] w1[Widgets] end subgraph al04 [View All Events Screen] w2[Widgets] end subgraph al05 [Settings Screen] w3[Widgets] end end subgraph bl01 [Business Layer] direction LR subgraph bl02 [Connect Wallet Bloc] vm01[State <---> Event <---> ViewModel] end subgraph bl03 [View All Events Bloc] vm02[State <---> Event <---> ViewModel] end subgraph bl04 [Settings Bloc] vm03[State <---> Event <---> ViewModel] end end end subgraph dl01 [Domain Layer] direction RL subgraph dl02 [Connect Wallet Repository] end subgraph dl03 [Events Repository] end subgraph dl04 [User Repository] end end subgraph Data Layer direction RL subgraph dl05 [Connect Wallet API] end subgraph dl06 [Catalyst Events API] end subgraph dl07 [Local Storage] end end end al03 <--> bl02 al04 <--> bl03 al05 <--> bl04 bl02 <--> dl02 bl03 <--> dl03 bl04 <--> dl04 dl02 <--> dl05 dl02 <--> dl07 dl03 <--> dl06 dl03 <--> dl07 dl04 <--> dl07 Maintain Uniformity \u00b6 To the established patterns of the team. Avoid bypassing the structured layers. Ensure each layer maintains a clear relationship hierarchy, preventing direct interactions between non-adjacent layers. For instance, the presentation layer should never directly communicate with the data layer's APIs. Maintain the hierarchy where the data layer is dependent on the domain layer across all feature development. Effective naming conventions are crucial for ease of navigation within a project. While naming is flexible (some may refer to the data layer as infrastructure), consistency in these names is essential for maintaining a clear architectural understanding. Inconsistency can lead to a disorganized and challenging codebase, potentially causing confusion among team members. It's vital to adhere to the established guidelines within the codebase to avoid these issues. \u251c\u2500\u2500 catalyst_voices | \u251c\u2500\u2500 libs \u2502 \u2502 \u251c\u2500\u2500 app \u2502 \u2502 \u2502 \u2514\u2500\u2500 app.dart | | | \u2514\u2500\u2500 utils.dart | | \u2514\u2500\u2500 configs | | | \u2514\u2500\u2500 app_bloc_observer.dart | | | \u2514\u2500\u2500 bootstrap.dart | | | \u2514\u2500\u2500 main_dev.dart | | | \u2514\u2500\u2500 main_prod.dart | | | \u2514\u2500\u2500 main_preprod.dart | | | \u2514\u2500\u2500 main_qa.dart \u2502 \u2502 \u2514\u2500\u2500 connect_wallet \u2502 \u2502 | \u251c\u2500\u2500 connect_wallet_page.dart | | | \u2514\u2500\u2500 wallet_list_item.dart \u2502 \u2502 | \u2514\u2500\u2500 wallets_list.dart | | \u2514\u2500\u2500 events | | | \u2514\u2500\u2500 events_page.dart | | | \u2514\u2500\u2500 events_list_item.dart | | | \u2514\u2500\u2500 other_event_widgets.dart \u2502 \u2502 \u251c\u2500\u2500 setting \u2502 \u2502 | \u251c\u2500\u2500 settings_page.dart | | | \u2514\u2500\u2500 user_widget.dart | | | \u2514\u2500\u2500 app_settings.dart \u2502 \u251c\u2500\u2500 packages \u2502 \u2502 \u251c\u2500\u2500 catalyst_voices_assets \u2502 \u2502 \u251c\u2500\u2500 catalyst_voices_blocs \u2502 \u2502 \u251c\u2500\u2500 catalyst_voices_localization \u2502 \u2502 \u251c\u2500\u2500 catalyst_voices_models \u2502 \u2502 \u251c\u2500\u2500 catalyst_voices_repositories \u2502 \u2502 \u251c\u2500\u2500 catalyst_voices_services \u2502 \u2502 \u251c\u2500\u2500 catalyst_voices_models \u2502 \u2502 \u251c\u2500\u2500 catalyst_voices_shared \u2502 \u2502 \u251c\u2500\u2500 catalyst_voices_view_models \u251c\u2500\u2500 pubspec.lock \u251c\u2500\u2500 pubspec.yaml Risks \u00b6 Learning curve associated with Clean Architecture and BLoC pattern for developers not familiar with these concepts. Overhead in setting up and managing BLoCs and ViewModels for simpler UI components. Potential for boilerplate code, impacting readability and maintainability. Consequences \u00b6 Enhanced maintainability and testability due to the separation of concerns. Greater flexibility in changing or extending the app\u2019s features. Improved scalability, as new components can be added with minimal impact on existing code. A consistent structure across the app, aiding new developers in understanding the codebase. More Information \u00b6 The Clean Architecture SOLID BLoC Pattern - DartConf 2018 BLoC Pub Documentation Flutter BLoC Examples So What Exactly is a View-Model? ViewModel Overview from Android Developers","title":"0005 Catalyst Voices Frontend App Architecture"},{"location":"architecture/09_architecture_decisions/0005-flutter-app/#context","text":"Our goal for the Catalyst Voices Frontend App is to establish a structure that ensures scalability, maintainability, and a clear separation of concerns. With the complexity of voting events, it\u2019s crucial to have an architecture that supports extensive functionality and easy adaptability to change.","title":"Context"},{"location":"architecture/09_architecture_decisions/0005-flutter-app/#assumptions","text":"Clean Architecture will facilitate a clear separation of concerns across the app. The BLoC pattern, combined with ViewModels, will streamline state management across the app. Developers are or will become comfortable with reactive programming paradigms and Flutter\u2019s Streams. The Flutter community will continue to support and evolve the BLoC pattern. The BLoC pattern will be sufficient to handle the app\u2019s state management needs.","title":"Assumptions"},{"location":"architecture/09_architecture_decisions/0005-flutter-app/#decision","text":"We have chosen to use BLoC pattern alongside ViewModels, guided by Clean Architecture principles, for the development of the Catalyst Voices Frontend App. This approach will segregate the app into distinct layers - presentation, domain, and data, with BLoC serving as the intermediary for state management and business logic. The BLoC pattern will manage the app's state reactively, making it easier to handle complex state dependencies and asynchronous operations. The ViewModel layer will further aid in abstracting the presentation logic from BLoCs. flowchart TB subgraph id1 [BLoC pattern in conjunction with ViewModels steered by the principles of Clean Architecture] subgraph al01 [Application Layer] direction LR subgraph al02 [Presentation Layer] direction LR subgraph al03 [Connect Wallet Screen] w1[Widgets] end subgraph al04 [View All Events Screen] w2[Widgets] end subgraph al05 [Settings Screen] w3[Widgets] end end subgraph bl01 [Business Layer] direction LR subgraph bl02 [Connect Wallet Bloc] vm01[State <---> Event <---> ViewModel] end subgraph bl03 [View All Events Bloc] vm02[State <---> Event <---> ViewModel] end subgraph bl04 [Settings Bloc] vm03[State <---> Event <---> ViewModel] end end end subgraph dl01 [Domain Layer] direction RL subgraph dl02 [Connect Wallet Repository] end subgraph dl03 [Events Repository] end subgraph dl04 [User Repository] end end subgraph Data Layer direction RL subgraph dl05 [Connect Wallet API] end subgraph dl06 [Catalyst Events API] end subgraph dl07 [Local Storage] end end end al03 <--> bl02 al04 <--> bl03 al05 <--> bl04 bl02 <--> dl02 bl03 <--> dl03 bl04 <--> dl04 dl02 <--> dl05 dl02 <--> dl07 dl03 <--> dl06 dl03 <--> dl07 dl04 <--> dl07","title":"Decision"},{"location":"architecture/09_architecture_decisions/0005-flutter-app/#maintain-uniformity","text":"To the established patterns of the team. Avoid bypassing the structured layers. Ensure each layer maintains a clear relationship hierarchy, preventing direct interactions between non-adjacent layers. For instance, the presentation layer should never directly communicate with the data layer's APIs. Maintain the hierarchy where the data layer is dependent on the domain layer across all feature development. Effective naming conventions are crucial for ease of navigation within a project. While naming is flexible (some may refer to the data layer as infrastructure), consistency in these names is essential for maintaining a clear architectural understanding. Inconsistency can lead to a disorganized and challenging codebase, potentially causing confusion among team members. It's vital to adhere to the established guidelines within the codebase to avoid these issues. \u251c\u2500\u2500 catalyst_voices | \u251c\u2500\u2500 libs \u2502 \u2502 \u251c\u2500\u2500 app \u2502 \u2502 \u2502 \u2514\u2500\u2500 app.dart | | | \u2514\u2500\u2500 utils.dart | | \u2514\u2500\u2500 configs | | | \u2514\u2500\u2500 app_bloc_observer.dart | | | \u2514\u2500\u2500 bootstrap.dart | | | \u2514\u2500\u2500 main_dev.dart | | | \u2514\u2500\u2500 main_prod.dart | | | \u2514\u2500\u2500 main_preprod.dart | | | \u2514\u2500\u2500 main_qa.dart \u2502 \u2502 \u2514\u2500\u2500 connect_wallet \u2502 \u2502 | \u251c\u2500\u2500 connect_wallet_page.dart | | | \u2514\u2500\u2500 wallet_list_item.dart \u2502 \u2502 | \u2514\u2500\u2500 wallets_list.dart | | \u2514\u2500\u2500 events | | | \u2514\u2500\u2500 events_page.dart | | | \u2514\u2500\u2500 events_list_item.dart | | | \u2514\u2500\u2500 other_event_widgets.dart \u2502 \u2502 \u251c\u2500\u2500 setting \u2502 \u2502 | \u251c\u2500\u2500 settings_page.dart | | | \u2514\u2500\u2500 user_widget.dart | | | \u2514\u2500\u2500 app_settings.dart \u2502 \u251c\u2500\u2500 packages \u2502 \u2502 \u251c\u2500\u2500 catalyst_voices_assets \u2502 \u2502 \u251c\u2500\u2500 catalyst_voices_blocs \u2502 \u2502 \u251c\u2500\u2500 catalyst_voices_localization \u2502 \u2502 \u251c\u2500\u2500 catalyst_voices_models \u2502 \u2502 \u251c\u2500\u2500 catalyst_voices_repositories \u2502 \u2502 \u251c\u2500\u2500 catalyst_voices_services \u2502 \u2502 \u251c\u2500\u2500 catalyst_voices_models \u2502 \u2502 \u251c\u2500\u2500 catalyst_voices_shared \u2502 \u2502 \u251c\u2500\u2500 catalyst_voices_view_models \u251c\u2500\u2500 pubspec.lock \u251c\u2500\u2500 pubspec.yaml","title":"Maintain Uniformity"},{"location":"architecture/09_architecture_decisions/0005-flutter-app/#risks","text":"Learning curve associated with Clean Architecture and BLoC pattern for developers not familiar with these concepts. Overhead in setting up and managing BLoCs and ViewModels for simpler UI components. Potential for boilerplate code, impacting readability and maintainability.","title":"Risks"},{"location":"architecture/09_architecture_decisions/0005-flutter-app/#consequences","text":"Enhanced maintainability and testability due to the separation of concerns. Greater flexibility in changing or extending the app\u2019s features. Improved scalability, as new components can be added with minimal impact on existing code. A consistent structure across the app, aiding new developers in understanding the codebase.","title":"Consequences"},{"location":"architecture/09_architecture_decisions/0005-flutter-app/#more-information","text":"The Clean Architecture SOLID BLoC Pattern - DartConf 2018 BLoC Pub Documentation Flutter BLoC Examples So What Exactly is a View-Model? ViewModel Overview from Android Developers","title":"More Information"},{"location":"architecture/09_architecture_decisions/0006-cursor-pegination-cat-data-service/","text":"Context \u00b6 Our API currently lacks a pagination mechanism, leading to inefficiencies in data retrieval processes, especially when dealing with large datasets. This absence has resulted in longer load times and a strained user experience, prompting the need for a scalable solution to manage data access and navigation effectively. Assumptions \u00b6 The assumption that cursor-based pagination will be universally supported and understood by all clients consuming our API. Assuming our database and backend infrastructure can efficiently support cursor-based operations without significant refactoring or performance degradation. The expectation that data growth will continue at its current pace or accelerate, necessitating a robust solution. Decision \u00b6 We are proposing to introduce a cursor-based pagination system to our API. This system will rely on ans enabling clients to efficiently fetch data in chunks and understand when more data is available: limit - This establishes a restriction on the quantity of objects to be returned, with a minimum of 1 and a maximum no greater than 100. starting_after - the cursor to start returning results from, ending_before - the cursor to stop returning results at. The JSON response structure will include fields such as data - containing the requested data. Data must always be deterministically sorted, such that id always return in the same order, regardless of the pagination, has_more - indicating whether more data is available, Example JSON response: { \"data\" : [ { \"id\" : \"item1\" , \"attribute\" : \"value\" }, { \"id\" : \"item2\" , \"attribute\" : \"value\" } ], \"has_more\" : true } Example API Calls \u00b6 These examples demonstrate how clients would use the API to navigate through data pages efficiently, utilizing cursor-based pagination. Initial Fetch with Limit \u00b6 Request: GET /api/resource?limit=2 This retrieves the first two items of the dataset. Fetching the Next Page \u00b6 Request: GET /api/resource?limit=2&starting_after=eyJpZCI6Iml0ZW0xMDAifQ== Using the next_cursor from the previous response, this fetches the next two items. Fetching the Previous Page \u00b6 Request: GET /api/resource?limit=2&ending_before=eyJpZCI6Iml0ZW0yMDAifQ== Using a prev_cursor value, this would fetch the two items before the current page, assuming prev_cursor is implemented and provided in your system. These examples demonstrate how clients would use the API to navigate through data pages efficiently, utilizing cursor-based pagination. Risks \u00b6 Implementing cursor-based pagination might introduce complexity for clients unfamiliar with this approach, potentially affecting adoption or requiring additional documentation and support. Potential risks in the backend implementation, such as incorrect cursor handling, could lead to data inconsistencies, including skipped items or duplicate data. The assumption regarding our backend's ability to support this efficiently might be overly optimistic, leading to unforeseen performance issues. Consequences \u00b6 Pagination will significantly improve data handling efficiency, particularly for large datasets, enhancing the user experience by reducing load times and improving data manageability. This change might increase the initial learning curve for new API consumers, requiring comprehensive documentation and possibly support resources to aid in integration. Backend development practices may need to adapt to account for the new pagination logic, potentially affecting development timelines for new features or adjustments to existing data models. More Information \u00b6 Implementing a system similar to Stripe not only aligns us with industry standards but also ensures that we are adopting proven practices for scalability and efficiency. Stripe API Documentation on Pagination Using Cursors for Pagination (PostgreSQL documentation) Cursor-Based Pagination: A Better Way to Retrieve Data Offset vs Cursor-Based Pagination: Choosing the Best Approach Pagination \u2014 Offset vs Cursor in MySQL Web API Pagination | Offset-based vs Cursor-based","title":"0006 Cursor-based pagination for Catalyst Data Service"},{"location":"architecture/09_architecture_decisions/0006-cursor-pegination-cat-data-service/#context","text":"Our API currently lacks a pagination mechanism, leading to inefficiencies in data retrieval processes, especially when dealing with large datasets. This absence has resulted in longer load times and a strained user experience, prompting the need for a scalable solution to manage data access and navigation effectively.","title":"Context"},{"location":"architecture/09_architecture_decisions/0006-cursor-pegination-cat-data-service/#assumptions","text":"The assumption that cursor-based pagination will be universally supported and understood by all clients consuming our API. Assuming our database and backend infrastructure can efficiently support cursor-based operations without significant refactoring or performance degradation. The expectation that data growth will continue at its current pace or accelerate, necessitating a robust solution.","title":"Assumptions"},{"location":"architecture/09_architecture_decisions/0006-cursor-pegination-cat-data-service/#decision","text":"We are proposing to introduce a cursor-based pagination system to our API. This system will rely on ans enabling clients to efficiently fetch data in chunks and understand when more data is available: limit - This establishes a restriction on the quantity of objects to be returned, with a minimum of 1 and a maximum no greater than 100. starting_after - the cursor to start returning results from, ending_before - the cursor to stop returning results at. The JSON response structure will include fields such as data - containing the requested data. Data must always be deterministically sorted, such that id always return in the same order, regardless of the pagination, has_more - indicating whether more data is available, Example JSON response: { \"data\" : [ { \"id\" : \"item1\" , \"attribute\" : \"value\" }, { \"id\" : \"item2\" , \"attribute\" : \"value\" } ], \"has_more\" : true }","title":"Decision"},{"location":"architecture/09_architecture_decisions/0006-cursor-pegination-cat-data-service/#example-api-calls","text":"These examples demonstrate how clients would use the API to navigate through data pages efficiently, utilizing cursor-based pagination.","title":"Example API Calls"},{"location":"architecture/09_architecture_decisions/0006-cursor-pegination-cat-data-service/#initial-fetch-with-limit","text":"Request: GET /api/resource?limit=2 This retrieves the first two items of the dataset.","title":"Initial Fetch with Limit"},{"location":"architecture/09_architecture_decisions/0006-cursor-pegination-cat-data-service/#fetching-the-next-page","text":"Request: GET /api/resource?limit=2&starting_after=eyJpZCI6Iml0ZW0xMDAifQ== Using the next_cursor from the previous response, this fetches the next two items.","title":"Fetching the Next Page"},{"location":"architecture/09_architecture_decisions/0006-cursor-pegination-cat-data-service/#fetching-the-previous-page","text":"Request: GET /api/resource?limit=2&ending_before=eyJpZCI6Iml0ZW0yMDAifQ== Using a prev_cursor value, this would fetch the two items before the current page, assuming prev_cursor is implemented and provided in your system. These examples demonstrate how clients would use the API to navigate through data pages efficiently, utilizing cursor-based pagination.","title":"Fetching the Previous Page"},{"location":"architecture/09_architecture_decisions/0006-cursor-pegination-cat-data-service/#risks","text":"Implementing cursor-based pagination might introduce complexity for clients unfamiliar with this approach, potentially affecting adoption or requiring additional documentation and support. Potential risks in the backend implementation, such as incorrect cursor handling, could lead to data inconsistencies, including skipped items or duplicate data. The assumption regarding our backend's ability to support this efficiently might be overly optimistic, leading to unforeseen performance issues.","title":"Risks"},{"location":"architecture/09_architecture_decisions/0006-cursor-pegination-cat-data-service/#consequences","text":"Pagination will significantly improve data handling efficiency, particularly for large datasets, enhancing the user experience by reducing load times and improving data manageability. This change might increase the initial learning curve for new API consumers, requiring comprehensive documentation and possibly support resources to aid in integration. Backend development practices may need to adapt to account for the new pagination logic, potentially affecting development timelines for new features or adjustments to existing data models.","title":"Consequences"},{"location":"architecture/09_architecture_decisions/0006-cursor-pegination-cat-data-service/#more-information","text":"Implementing a system similar to Stripe not only aligns us with industry standards but also ensures that we are adopting proven practices for scalability and efficiency. Stripe API Documentation on Pagination Using Cursors for Pagination (PostgreSQL documentation) Cursor-Based Pagination: A Better Way to Retrieve Data Offset vs Cursor-Based Pagination: Choosing the Best Approach Pagination \u2014 Offset vs Cursor in MySQL Web API Pagination | Offset-based vs Cursor-based","title":"More Information"},{"location":"architecture/10_quality/","text":"Quality strategies \u00b6","title":"Quality strategies"},{"location":"architecture/10_quality/#quality-strategies","text":"","title":"Quality strategies"},{"location":"architecture/10_quality/quality_requirements/","text":"Quality Requirements \u00b6 Quality Tree \u00b6 Quality Category Quality Description Scenarios Usable Voting User experience Voting and browsing proposals should be easy and intuitive to do SC1-SC4, SC7-SC9 Usable Proposer User experience Creating and managing proposals should be easy and intuitive to do SC12-SC15 Usable Correctness System functions should provide accurate results SC50-SC53 Usable Accessibility The system should be design so as to be usable by everyone SC63-SC64 Usable Engagement Users should actively participate with the system SC57-SC60 Secure Access control Role-Based Access Control SC24-SC31 Secure Privacy User information are kept private SC66 Secure Auditability Voting results can be audited by external parties SC20-SC23 Secure Compliancy The system is complaint with local laws SC41-SC42 Reliable Fail-safe In case of failures the system does not loose data/votes SC16-SC19, SC65 Reliable Scalability The system should scale well with increasing number of users/votes SC43-SC49 Efficient Response Time The system should give feedback in timely manner SC5, SC6, SC10, SC11 Efficient Code Complexity Code should be easy to understand and well documented SC68 Operable Deployability The system should be easy to deploy and operate SC37-SC40 Operable Testability Tests should be easy to run and give a clear feedback SC61-SC62 Operable Clarity Clarity in technical documentation SC67 Flexible Configurable Efficient change of business rules SC32-SC36 Quality Scenarios \u00b6 Id Scenario SC1 A user who is new to Catalyst can understand how to vote in 5 minutes maximum. SC2 A user should be able to stop voting and restart voting without loosing votes SC3 If a user tries to vote on the same proposal twice he will receive a clear error message SC4 After a user cast a vote he will receive a clear feedback on the status of his vote SC5 Proposals are fully loaded and able to be navigated by user in less than 10 seconds SC6 Search/sort/ filter results returned in less than 5 seconds SC7 User clicks on one of the top 5 search results in at least 80% of search queries SC8 A user can vote in less than 3 clicks from loading proposals page SC9 A user can vote on another proposal in less than 2 clicks after voting on one proposal SC10 User gets confirmation of votes cast in less than 5 seconds SC11 User gets confirmation of votes confirmed in less than 30s SC12 More than 80% of proposals are submitted to a vote within 6 months of creation SC13 Less than 10% of proposals are reassigned to a new category between initial category select & submission SC14 Less than 10% of proposals are withdrawn from an event once submitted SC15 More than 80% of proposals are ready for submission in less than 10 editing sessions SC16 100% of votes confirmed are represented in final tally SC17 Less than 5% of votes cast are rejected SC18 100% of rejected transactions have known reason SC19 100% transactions sent to chain are traceable SC20 All voters can be verified against mainnet snapshot SC21 All voting power can be verified against mainnet snapshot SC22 All votes cast are represented in tally SC23 Tally is correctly calculated given all votes SC24 User gets new access permissions within 60s of role registration tx confirmation SC25 Only registered proposers may create, update, or delete a proposal SC26 As a voter, I can only delegate voting power to dreps that have a valid drep registration SC27 Only a registered drep may vote with delegated voting power SC28 As a user, I need to sign my votes with a voter key SC29 As a user, I need to sign proposal updates with a proposer key SC30 As a user, I need to sign my drep votes with a drep key SC31 As a user, I need to sign team-owned proposal updates with a team key SC32 Able to handle arbitrary configurations of fund parameters SC33 Able to handle arbitrary configurations of proposal template SC34 Able to handle arbitrary configurations of category template SC35 Able to integrate new modules in the future SC36 Able to integrate open source community contributions SC37 A single event can be administered by a single non technical user SC38 Overall platform can be maintained by 1 SRE, 2 SWE, 1 QA SC39 Important metrics viewable by non technical users SC40 New versions can be deployed by SRE in less than 1 hour SC41 On chain immutable record of registrations, proposals, votes, and tally for every event SC42 Due Diligence maintained by 3 rd party for all relevant user types SC43 Up to 1M concurrent users - wallet connect, login, registration, proposal create, comment, vote SC44 Up to 100 votes per second SC45 Up to 10 people editing the same proposal SC45 Up to 50 concurrent brands/customers running parallel events on platform SC46 Up to 500 concurrent events/voting rounds SC47 Up to 100k proposals SC48 Up to 500k comments SC49 Up to 250k registered accounts SC50 The search click-through rate should be more then 50% SC51 As a user, if I mark my proposal private, only I (and my team) can see it SC52 As a user, if I mark my proposal as public, anyone can see it SC53 As a user, only me and my team can make edits to my proposal SC54 Notifications properly delivered to all target accounts SC55 Updates to event parameters reflected in less than 1 hour across all users SC56 Users always shown accurate dates for an event SC57 10% of circulating supply that registers to vote SC58 80% of registered stake that submits a vote SC59 50% of voting stake that casts at least 25 votes SC60 Users should not reach to customer service for help on how to use the system SC61 Unit tests should take less then 30 minutes to run SC62 Test report should be available and up to date SC63 Localizable to several languages SC64 Compliance with WCA accessibility guidelines SC65 If the system gets more then 100 votes per second votes are not lost SC66 User private key are secure SC67 New team member can be onboarded without help from the team SC68 Tests functions have a comment explaining the steps of the test","title":"Quality Requirements"},{"location":"architecture/10_quality/quality_requirements/#quality-requirements","text":"","title":"Quality Requirements"},{"location":"architecture/10_quality/quality_requirements/#quality-tree","text":"Quality Category Quality Description Scenarios Usable Voting User experience Voting and browsing proposals should be easy and intuitive to do SC1-SC4, SC7-SC9 Usable Proposer User experience Creating and managing proposals should be easy and intuitive to do SC12-SC15 Usable Correctness System functions should provide accurate results SC50-SC53 Usable Accessibility The system should be design so as to be usable by everyone SC63-SC64 Usable Engagement Users should actively participate with the system SC57-SC60 Secure Access control Role-Based Access Control SC24-SC31 Secure Privacy User information are kept private SC66 Secure Auditability Voting results can be audited by external parties SC20-SC23 Secure Compliancy The system is complaint with local laws SC41-SC42 Reliable Fail-safe In case of failures the system does not loose data/votes SC16-SC19, SC65 Reliable Scalability The system should scale well with increasing number of users/votes SC43-SC49 Efficient Response Time The system should give feedback in timely manner SC5, SC6, SC10, SC11 Efficient Code Complexity Code should be easy to understand and well documented SC68 Operable Deployability The system should be easy to deploy and operate SC37-SC40 Operable Testability Tests should be easy to run and give a clear feedback SC61-SC62 Operable Clarity Clarity in technical documentation SC67 Flexible Configurable Efficient change of business rules SC32-SC36","title":"Quality Tree"},{"location":"architecture/10_quality/quality_requirements/#quality-scenarios","text":"Id Scenario SC1 A user who is new to Catalyst can understand how to vote in 5 minutes maximum. SC2 A user should be able to stop voting and restart voting without loosing votes SC3 If a user tries to vote on the same proposal twice he will receive a clear error message SC4 After a user cast a vote he will receive a clear feedback on the status of his vote SC5 Proposals are fully loaded and able to be navigated by user in less than 10 seconds SC6 Search/sort/ filter results returned in less than 5 seconds SC7 User clicks on one of the top 5 search results in at least 80% of search queries SC8 A user can vote in less than 3 clicks from loading proposals page SC9 A user can vote on another proposal in less than 2 clicks after voting on one proposal SC10 User gets confirmation of votes cast in less than 5 seconds SC11 User gets confirmation of votes confirmed in less than 30s SC12 More than 80% of proposals are submitted to a vote within 6 months of creation SC13 Less than 10% of proposals are reassigned to a new category between initial category select & submission SC14 Less than 10% of proposals are withdrawn from an event once submitted SC15 More than 80% of proposals are ready for submission in less than 10 editing sessions SC16 100% of votes confirmed are represented in final tally SC17 Less than 5% of votes cast are rejected SC18 100% of rejected transactions have known reason SC19 100% transactions sent to chain are traceable SC20 All voters can be verified against mainnet snapshot SC21 All voting power can be verified against mainnet snapshot SC22 All votes cast are represented in tally SC23 Tally is correctly calculated given all votes SC24 User gets new access permissions within 60s of role registration tx confirmation SC25 Only registered proposers may create, update, or delete a proposal SC26 As a voter, I can only delegate voting power to dreps that have a valid drep registration SC27 Only a registered drep may vote with delegated voting power SC28 As a user, I need to sign my votes with a voter key SC29 As a user, I need to sign proposal updates with a proposer key SC30 As a user, I need to sign my drep votes with a drep key SC31 As a user, I need to sign team-owned proposal updates with a team key SC32 Able to handle arbitrary configurations of fund parameters SC33 Able to handle arbitrary configurations of proposal template SC34 Able to handle arbitrary configurations of category template SC35 Able to integrate new modules in the future SC36 Able to integrate open source community contributions SC37 A single event can be administered by a single non technical user SC38 Overall platform can be maintained by 1 SRE, 2 SWE, 1 QA SC39 Important metrics viewable by non technical users SC40 New versions can be deployed by SRE in less than 1 hour SC41 On chain immutable record of registrations, proposals, votes, and tally for every event SC42 Due Diligence maintained by 3 rd party for all relevant user types SC43 Up to 1M concurrent users - wallet connect, login, registration, proposal create, comment, vote SC44 Up to 100 votes per second SC45 Up to 10 people editing the same proposal SC45 Up to 50 concurrent brands/customers running parallel events on platform SC46 Up to 500 concurrent events/voting rounds SC47 Up to 100k proposals SC48 Up to 500k comments SC49 Up to 250k registered accounts SC50 The search click-through rate should be more then 50% SC51 As a user, if I mark my proposal private, only I (and my team) can see it SC52 As a user, if I mark my proposal as public, anyone can see it SC53 As a user, only me and my team can make edits to my proposal SC54 Notifications properly delivered to all target accounts SC55 Updates to event parameters reflected in less than 1 hour across all users SC56 Users always shown accurate dates for an event SC57 10% of circulating supply that registers to vote SC58 80% of registered stake that submits a vote SC59 50% of voting stake that casts at least 25 votes SC60 Users should not reach to customer service for help on how to use the system SC61 Unit tests should take less then 30 minutes to run SC62 Test report should be available and up to date SC63 Localizable to several languages SC64 Compliance with WCA accessibility guidelines SC65 If the system gets more then 100 votes per second votes are not lost SC66 User private key are secure SC67 New team member can be onboarded without help from the team SC68 Tests functions have a comment explaining the steps of the test","title":"Quality Scenarios"},{"location":"architecture/10_quality/test_reports/","text":"Test reports \u00b6 Main branch test report Nightly test report","title":"Test reports"},{"location":"architecture/10_quality/test_reports/#test-reports","text":"Main branch test report Nightly test report","title":"Test reports"},{"location":"architecture/10_quality/testplans/flutter_cardano_integration/","text":"Flutter Cardano Integration \u00b6 Flutter Cardano Integration General Information Abstract Stakeholders Requirements Acceptance criteria Risks Tools ACC framework Attributes Components Capabilities Integration tests Integration tests strategy Integration test cases Extensions User actions Wallet General Information \u00b6 Abstract \u00b6 Catalyst Cardano is a web application that facilitate interaction with the Cardano blockchain. It incorporates CIP-30 (Wallet DAppBridge) and CIP-95 (Message Signing) specifications. It requires connection to the wallet third party extensions (e.g Eternl) to be able to perform wallet actions. These actions are namely retrieving wallet details, signing data/transactions and submitting transactions. Stakeholders \u00b6 Role/Name Contact Approval Eng-Manager Sasha Developers Dominik Testers Duy Requirements \u00b6 EPIC CIP-30 CIP-95 Testing will be focused only on web applications for the time being. Focus needs to be on compliance with CIP-30 and CIP-95 specs, reliability and security. This is especially needed when handling wallet interactions and message signing. UI testing is out of scope, the web application will be used only for setup purpose. Acceptance criteria \u00b6 The package must comply with CIP-30 and CIP-95 specifications, focusing on the web. High unit test coverage to ensure reliability and security. Clear and comprehensive documentation for developers. An example web application that effectively demonstrates the package's functionalities. Risks \u00b6 Documentation is not complete yet, integration dart package might be not enough Tools \u00b6 The main tool we will use is dart integration test package. We still need to investigate if the testing can be achieved only with dart or if we need to use playwright for the web UI part. ACC framework \u00b6 Note: Use the ACC framework to help you define the test cases Attributes \u00b6 Secure, comply with CIP-30 and CIP-95, reliable Components \u00b6 Web application Capabilities \u00b6 User can retrieve his wallet details User can sign data User can sign transactions User submit transactions Integration tests \u00b6 Integration tests strategy \u00b6 Note: Evaluate all integrations with other functions, services etc. Integration test cases \u00b6 Extensions \u00b6 # OBJECTIVE STEPS EXPECTED RESULTS TO BE AUTOMATED 1 Eternl extension installation success Start application, Download wallet chrome extension Displays message when Eternl extension is successfully installed YES 2 Eternl extension installation failure Start application, Download wallet chrome extension Displays error message handling when Eternl extension installation fails YES 3 Eternl extension detection Start application, Download wallet chrome extension Displays message when the app correctly detects the presence of the Eternl extension YES User actions \u00b6 # OBJECTIVE STEPS EXPECTED RESULTS TO BE AUTOMATED 1 User can retrieve his wallet details Start application, Download wallet chrome extension, Connect wallet extension in the application, Enable wallet Wallet details (balance, addresses, etc.) is correctly returned YES 2 User can sign data Connect the wallet as #1, sign data No exceptions are thrown, VkeyWitness is valid YES 3 User can sign transactions Connect the wallet as #1, sign transaction data No exceptions are thrown, and in TransactionWitnessSet, at least one VkeyWitness is present YES 4 User can submit transactions Connect the wallet as #1, submit transaction No exceptions are thrown, Returned TransactionHash is not empty, Metadata is not included YES 5 User can handle invalid transactions Connect the wallet as #1, create and submit an invalid transaction (e.g., incorrect signature, insufficient funds, malformed data) Appropriate error message is returned, Transaction is not processed YES 6 User can submit transactions with metadata Connect the wallet as #1, submit transaction with metadata No exceptions are thrown, Returned TransactionHash is not empty, transaction is processed successfully with metadata YES 7 User can submit transactions with auxiliary data set Connect the wallet as #1, create and submit transaction with auxiliary data set, verify auxiliary_data_set existence If auxiliary_data_set exists, process the transaction successfully, otherwise return None YES Wallet \u00b6 # OBJECTIVE STEPS EXPECTED RESULTS TO BE AUTOMATED 1 Empty wallet list Start application, Download wallet chrome extension, Connect wallet extension in the application Displays empty message when no wallets are available YES 2 Wallet enabling success Start application, Download wallet chrome extension, Connect wallet extension in the application, Enable wallet Displays message is displayed when enabling wallet success YES 3 Wallet enabling failure Start application, Download wallet chrome extension, Connect wallet extension in the application, Enable wallet Error message is displayed when enabling wallet fails YES 4 Error while loading wallet details Connect the wallet as #1 Error message is displayed when loading wallet details fails YES 5 Sign data failure Connect the wallet as #1, sign data Error message is displayed when signing data fails YES 6 Sign and submit transaction failure Connect the wallet as #1, sign data, submit data Error message is displayed when signing and submitting transaction fails YES","title":"Flutter cardano integration"},{"location":"architecture/10_quality/testplans/flutter_cardano_integration/#flutter-cardano-integration","text":"Flutter Cardano Integration General Information Abstract Stakeholders Requirements Acceptance criteria Risks Tools ACC framework Attributes Components Capabilities Integration tests Integration tests strategy Integration test cases Extensions User actions Wallet","title":"Flutter Cardano Integration"},{"location":"architecture/10_quality/testplans/flutter_cardano_integration/#general-information","text":"","title":"General Information"},{"location":"architecture/10_quality/testplans/flutter_cardano_integration/#abstract","text":"Catalyst Cardano is a web application that facilitate interaction with the Cardano blockchain. It incorporates CIP-30 (Wallet DAppBridge) and CIP-95 (Message Signing) specifications. It requires connection to the wallet third party extensions (e.g Eternl) to be able to perform wallet actions. These actions are namely retrieving wallet details, signing data/transactions and submitting transactions.","title":"Abstract"},{"location":"architecture/10_quality/testplans/flutter_cardano_integration/#stakeholders","text":"Role/Name Contact Approval Eng-Manager Sasha Developers Dominik Testers Duy","title":"Stakeholders"},{"location":"architecture/10_quality/testplans/flutter_cardano_integration/#requirements","text":"EPIC CIP-30 CIP-95 Testing will be focused only on web applications for the time being. Focus needs to be on compliance with CIP-30 and CIP-95 specs, reliability and security. This is especially needed when handling wallet interactions and message signing. UI testing is out of scope, the web application will be used only for setup purpose.","title":"Requirements"},{"location":"architecture/10_quality/testplans/flutter_cardano_integration/#acceptance-criteria","text":"The package must comply with CIP-30 and CIP-95 specifications, focusing on the web. High unit test coverage to ensure reliability and security. Clear and comprehensive documentation for developers. An example web application that effectively demonstrates the package's functionalities.","title":"Acceptance criteria"},{"location":"architecture/10_quality/testplans/flutter_cardano_integration/#risks","text":"Documentation is not complete yet, integration dart package might be not enough","title":"Risks"},{"location":"architecture/10_quality/testplans/flutter_cardano_integration/#tools","text":"The main tool we will use is dart integration test package. We still need to investigate if the testing can be achieved only with dart or if we need to use playwright for the web UI part.","title":"Tools"},{"location":"architecture/10_quality/testplans/flutter_cardano_integration/#acc-framework","text":"Note: Use the ACC framework to help you define the test cases","title":"ACC framework"},{"location":"architecture/10_quality/testplans/flutter_cardano_integration/#attributes","text":"Secure, comply with CIP-30 and CIP-95, reliable","title":"Attributes"},{"location":"architecture/10_quality/testplans/flutter_cardano_integration/#components","text":"Web application","title":"Components"},{"location":"architecture/10_quality/testplans/flutter_cardano_integration/#capabilities","text":"User can retrieve his wallet details User can sign data User can sign transactions User submit transactions","title":"Capabilities"},{"location":"architecture/10_quality/testplans/flutter_cardano_integration/#integration-tests","text":"","title":"Integration tests"},{"location":"architecture/10_quality/testplans/flutter_cardano_integration/#integration-tests-strategy","text":"Note: Evaluate all integrations with other functions, services etc.","title":"Integration tests strategy"},{"location":"architecture/10_quality/testplans/flutter_cardano_integration/#integration-test-cases","text":"","title":"Integration test cases"},{"location":"architecture/10_quality/testplans/flutter_cardano_integration/#extensions","text":"# OBJECTIVE STEPS EXPECTED RESULTS TO BE AUTOMATED 1 Eternl extension installation success Start application, Download wallet chrome extension Displays message when Eternl extension is successfully installed YES 2 Eternl extension installation failure Start application, Download wallet chrome extension Displays error message handling when Eternl extension installation fails YES 3 Eternl extension detection Start application, Download wallet chrome extension Displays message when the app correctly detects the presence of the Eternl extension YES","title":"Extensions"},{"location":"architecture/10_quality/testplans/flutter_cardano_integration/#user-actions","text":"# OBJECTIVE STEPS EXPECTED RESULTS TO BE AUTOMATED 1 User can retrieve his wallet details Start application, Download wallet chrome extension, Connect wallet extension in the application, Enable wallet Wallet details (balance, addresses, etc.) is correctly returned YES 2 User can sign data Connect the wallet as #1, sign data No exceptions are thrown, VkeyWitness is valid YES 3 User can sign transactions Connect the wallet as #1, sign transaction data No exceptions are thrown, and in TransactionWitnessSet, at least one VkeyWitness is present YES 4 User can submit transactions Connect the wallet as #1, submit transaction No exceptions are thrown, Returned TransactionHash is not empty, Metadata is not included YES 5 User can handle invalid transactions Connect the wallet as #1, create and submit an invalid transaction (e.g., incorrect signature, insufficient funds, malformed data) Appropriate error message is returned, Transaction is not processed YES 6 User can submit transactions with metadata Connect the wallet as #1, submit transaction with metadata No exceptions are thrown, Returned TransactionHash is not empty, transaction is processed successfully with metadata YES 7 User can submit transactions with auxiliary data set Connect the wallet as #1, create and submit transaction with auxiliary data set, verify auxiliary_data_set existence If auxiliary_data_set exists, process the transaction successfully, otherwise return None YES","title":"User actions"},{"location":"architecture/10_quality/testplans/flutter_cardano_integration/#wallet","text":"# OBJECTIVE STEPS EXPECTED RESULTS TO BE AUTOMATED 1 Empty wallet list Start application, Download wallet chrome extension, Connect wallet extension in the application Displays empty message when no wallets are available YES 2 Wallet enabling success Start application, Download wallet chrome extension, Connect wallet extension in the application, Enable wallet Displays message is displayed when enabling wallet success YES 3 Wallet enabling failure Start application, Download wallet chrome extension, Connect wallet extension in the application, Enable wallet Error message is displayed when enabling wallet fails YES 4 Error while loading wallet details Connect the wallet as #1 Error message is displayed when loading wallet details fails YES 5 Sign data failure Connect the wallet as #1, sign data Error message is displayed when signing data fails YES 6 Sign and submit transaction failure Connect the wallet as #1, sign data, submit data Error message is displayed when signing and submitting transaction fails YES","title":"Wallet"},{"location":"architecture/10_quality/testplans/template/","text":"Test Plan Template \u00b6 Note: Substitute with test plan name and link to the github testplan issue. Test Plan Name \u00b6 Note: This is meant to be only a guideline, the paragraphs can be removed or added as they fit. Test Plan Template Test Plan Name General Information Abstract Stakeholders Requirements Acceptance criteria Risks Tools ACC framework Attributes Components Capabilities Unit tests Unit tests strategy Unit test cases Functional tests Functional tests strategy Functional test cases Regression tests Regression tests strategy Regression test cases Integration tests Integration tests strategy Integration test cases End-to-end tests End-to-end tests strategy End-to-end test cases General Information \u00b6 Abstract \u00b6 Note: Describe the design and architecture of the system in a way that highlights possible points of failure Stakeholders \u00b6 Note: Insert the relevant stakeholders that need to understand, review and approve the test plan Role/Name Contact Approval Product-Owner Developers Admin SRE Testers Requirements \u00b6 Note: Business requirements, insert links to relevant Github or JIRA tickets, list what platforms are supported, what will not be tested, etc Acceptance criteria \u00b6 Note: List the acceptance criteria for this feature Risks \u00b6 Note: Describe what risks can affect the accomplishment of the testplan. For example documentation is missing, not enough resources etc Tools \u00b6 Note: Describe what tools will be needed for the testing, if new tools are needed to be developed ACC framework \u00b6 Note: Use the ACC framework to help you define the test cases Attributes \u00b6 Note: The adverbs and adjectives that describe the high level concepts testing is meant to ensure. Attributes such as fast, usable, secure, accessible and so forth. The quality metrics document in this repo should and can be used as a guideline Components \u00b6 Note: The nouns that define the major code chunks that comprise the product. These are classes, module names and features of the application. Capabilities \u00b6 Note: The verbs that describe user actions and activities. Every capability should be testable. Unit tests \u00b6 Unit tests strategy \u00b6 Note: Evaluate new features and bug fixes introduced in this release, and the extent of the unit tests Unit test cases \u00b6 # OBJECTIVE INPUT EXPECTED RESULTS TO BE AUTOMATED 1 Functional tests \u00b6 Functional tests strategy \u00b6 Note: Evaluate new features introduced in this release, and the extent of the functional tests Functional test cases \u00b6 # OBJECTIVE INPUT EXPECTED RESULTS TO BE AUTOMATED 1 Regression tests \u00b6 Regression tests strategy \u00b6 Note: Ensure that previously developed and tested software still performs after change. Regression test cases \u00b6 # OBJECTIVE INPUT EXPECTED RESULTS TO BE AUTOMATED 1 Integration tests \u00b6 Integration tests strategy \u00b6 Note: Evaluate all integrations with other functions, services etc. Integration test cases \u00b6 # OBJECTIVE INPUT EXPECTED RESULTS TO BE AUTOMATED 1 End-to-end tests \u00b6 End-to-end tests strategy \u00b6 Note: Evaluate how will test infrastructure, systems under test, and other dependencies be managed? How will they be deployed? How will persistence be set-up/torn-down? How will you handle required migrations from one data center to another? End-to-end test cases \u00b6 # OBJECTIVE INPUT EXPECTED RESULTS TO BE AUTOMATED 1","title":"Template"},{"location":"architecture/10_quality/testplans/template/#test-plan-template","text":"Note: Substitute with test plan name and link to the github testplan issue.","title":"Test Plan Template"},{"location":"architecture/10_quality/testplans/template/#test-plan-name","text":"Note: This is meant to be only a guideline, the paragraphs can be removed or added as they fit. Test Plan Template Test Plan Name General Information Abstract Stakeholders Requirements Acceptance criteria Risks Tools ACC framework Attributes Components Capabilities Unit tests Unit tests strategy Unit test cases Functional tests Functional tests strategy Functional test cases Regression tests Regression tests strategy Regression test cases Integration tests Integration tests strategy Integration test cases End-to-end tests End-to-end tests strategy End-to-end test cases","title":"Test Plan Name"},{"location":"architecture/10_quality/testplans/template/#general-information","text":"","title":"General Information"},{"location":"architecture/10_quality/testplans/template/#abstract","text":"Note: Describe the design and architecture of the system in a way that highlights possible points of failure","title":"Abstract"},{"location":"architecture/10_quality/testplans/template/#stakeholders","text":"Note: Insert the relevant stakeholders that need to understand, review and approve the test plan Role/Name Contact Approval Product-Owner Developers Admin SRE Testers","title":"Stakeholders"},{"location":"architecture/10_quality/testplans/template/#requirements","text":"Note: Business requirements, insert links to relevant Github or JIRA tickets, list what platforms are supported, what will not be tested, etc","title":"Requirements"},{"location":"architecture/10_quality/testplans/template/#acceptance-criteria","text":"Note: List the acceptance criteria for this feature","title":"Acceptance criteria"},{"location":"architecture/10_quality/testplans/template/#risks","text":"Note: Describe what risks can affect the accomplishment of the testplan. For example documentation is missing, not enough resources etc","title":"Risks"},{"location":"architecture/10_quality/testplans/template/#tools","text":"Note: Describe what tools will be needed for the testing, if new tools are needed to be developed","title":"Tools"},{"location":"architecture/10_quality/testplans/template/#acc-framework","text":"Note: Use the ACC framework to help you define the test cases","title":"ACC framework"},{"location":"architecture/10_quality/testplans/template/#attributes","text":"Note: The adverbs and adjectives that describe the high level concepts testing is meant to ensure. Attributes such as fast, usable, secure, accessible and so forth. The quality metrics document in this repo should and can be used as a guideline","title":"Attributes"},{"location":"architecture/10_quality/testplans/template/#components","text":"Note: The nouns that define the major code chunks that comprise the product. These are classes, module names and features of the application.","title":"Components"},{"location":"architecture/10_quality/testplans/template/#capabilities","text":"Note: The verbs that describe user actions and activities. Every capability should be testable.","title":"Capabilities"},{"location":"architecture/10_quality/testplans/template/#unit-tests","text":"","title":"Unit tests"},{"location":"architecture/10_quality/testplans/template/#unit-tests-strategy","text":"Note: Evaluate new features and bug fixes introduced in this release, and the extent of the unit tests","title":"Unit tests strategy"},{"location":"architecture/10_quality/testplans/template/#unit-test-cases","text":"# OBJECTIVE INPUT EXPECTED RESULTS TO BE AUTOMATED 1","title":"Unit test cases"},{"location":"architecture/10_quality/testplans/template/#functional-tests","text":"","title":"Functional tests"},{"location":"architecture/10_quality/testplans/template/#functional-tests-strategy","text":"Note: Evaluate new features introduced in this release, and the extent of the functional tests","title":"Functional tests strategy"},{"location":"architecture/10_quality/testplans/template/#functional-test-cases","text":"# OBJECTIVE INPUT EXPECTED RESULTS TO BE AUTOMATED 1","title":"Functional test cases"},{"location":"architecture/10_quality/testplans/template/#regression-tests","text":"","title":"Regression tests"},{"location":"architecture/10_quality/testplans/template/#regression-tests-strategy","text":"Note: Ensure that previously developed and tested software still performs after change.","title":"Regression tests strategy"},{"location":"architecture/10_quality/testplans/template/#regression-test-cases","text":"# OBJECTIVE INPUT EXPECTED RESULTS TO BE AUTOMATED 1","title":"Regression test cases"},{"location":"architecture/10_quality/testplans/template/#integration-tests","text":"","title":"Integration tests"},{"location":"architecture/10_quality/testplans/template/#integration-tests-strategy","text":"Note: Evaluate all integrations with other functions, services etc.","title":"Integration tests strategy"},{"location":"architecture/10_quality/testplans/template/#integration-test-cases","text":"# OBJECTIVE INPUT EXPECTED RESULTS TO BE AUTOMATED 1","title":"Integration test cases"},{"location":"architecture/10_quality/testplans/template/#end-to-end-tests","text":"","title":"End-to-end tests"},{"location":"architecture/10_quality/testplans/template/#end-to-end-tests-strategy","text":"Note: Evaluate how will test infrastructure, systems under test, and other dependencies be managed? How will they be deployed? How will persistence be set-up/torn-down? How will you handle required migrations from one data center to another?","title":"End-to-end tests strategy"},{"location":"architecture/10_quality/testplans/template/#end-to-end-test-cases","text":"# OBJECTIVE INPUT EXPECTED RESULTS TO BE AUTOMATED 1","title":"End-to-end test cases"},{"location":"catalyst-standards/","text":"Catalyst Standards \u00b6 These are documents that relate to standardized specifications of the catalyst stack.","title":"Catalyst Standards"},{"location":"catalyst-standards/#catalyst-standards","text":"These are documents that relate to standardized specifications of the catalyst stack.","title":"Catalyst Standards"},{"location":"catalyst-standards/ballot/","text":"Catalyst Ballot Formats \u00b6","title":"Index"},{"location":"catalyst-standards/ballot/#catalyst-ballot-formats","text":"","title":"Catalyst Ballot Formats"},{"location":"catalyst-standards/ballot/catalyst-v1/","text":"Catalyst Ballot Format V1 \u00b6","title":"Catalyst v1"},{"location":"catalyst-standards/ballot/catalyst-v1/#catalyst-ballot-format-v1","text":"","title":"Catalyst Ballot Format V1"},{"location":"catalyst-standards/ballot/catalyst-v2/","text":"Catalyst Ballot Format V2 \u00b6","title":"Catalyst v2"},{"location":"catalyst-standards/ballot/catalyst-v2/#catalyst-ballot-format-v2","text":"","title":"Catalyst Ballot Format V2"},{"location":"catalyst-standards/cbor_tags/ulid/","text":"ULIDs for CBOR \u00b6 This document specifies a tag for ULIDs in Concise Binary Object Representation (CBOR) [1]. Tag: 32780 Data item: byte string Semantics: Binary ULID (https://github.com/ulid/spec/tree/master) Point of contact: Steven Johnson <steven.johnson@iohk.io> Description of semantics: https://github.com/input-output-hk/catalyst-voices/tree/main/docs/src/catalyst-standards/cbor_tags/ulid.md Semantics \u00b6 Tag 32780 can be applied to a byte string (major type 2) to indicate that the byte string is a binary ULID as specified by the ULID Binary Layout . References \u00b6 [1] [C. Bormann, and P. Hoffman. \"Concise Binary Object Representation (CBOR)\". RFC 8949, October 2020.] RFC 8949 [2] [Universally Unique Lexicographically Sortable Identifier] ULID Author \u00b6 Steven Johnson steven.johnson@iohk.io","title":"ULIDs for CBOR"},{"location":"catalyst-standards/cbor_tags/ulid/#ulids-for-cbor","text":"This document specifies a tag for ULIDs in Concise Binary Object Representation (CBOR) [1]. Tag: 32780 Data item: byte string Semantics: Binary ULID (https://github.com/ulid/spec/tree/master) Point of contact: Steven Johnson <steven.johnson@iohk.io> Description of semantics: https://github.com/input-output-hk/catalyst-voices/tree/main/docs/src/catalyst-standards/cbor_tags/ulid.md","title":"ULIDs for CBOR"},{"location":"catalyst-standards/cbor_tags/ulid/#semantics","text":"Tag 32780 can be applied to a byte string (major type 2) to indicate that the byte string is a binary ULID as specified by the ULID Binary Layout .","title":"Semantics"},{"location":"catalyst-standards/cbor_tags/ulid/#references","text":"[1] [C. Bormann, and P. Hoffman. \"Concise Binary Object Representation (CBOR)\". RFC 8949, October 2020.] RFC 8949 [2] [Universally Unique Lexicographically Sortable Identifier] ULID","title":"References"},{"location":"catalyst-standards/cbor_tags/ulid/#author","text":"Steven Johnson steven.johnson@iohk.io","title":"Author"},{"location":"catalyst-standards/draft-cips/","text":"Draft CIPs \u00b6","title":"Index"},{"location":"catalyst-standards/draft-cips/#draft-cips","text":"","title":"Draft CIPs"},{"location":"catalyst-standards/draft-cips/c509-plutus-restricted-certificate/cip-509C/","text":"Restricted format for C509 compatibility with Plutus \u00b6 PERMANENTLY MOVED \u00b6 New Home CIP PR","title":"Restricted format for C509 compatibility with Plutus"},{"location":"catalyst-standards/draft-cips/c509-plutus-restricted-certificate/cip-509C/#restricted-format-for-c509-compatibility-with-plutus","text":"","title":"Restricted format for C509 compatibility with Plutus"},{"location":"catalyst-standards/draft-cips/c509-plutus-restricted-certificate/cip-509C/#permanently-moved","text":"New Home CIP PR","title":"PERMANENTLY MOVED"},{"location":"catalyst-standards/draft-cips/project-catalyst-x509-role-defintions/cip-catalyst-roles/","text":"Project Catalyst Role Registrations \u00b6 PERMANENTLY MOVED \u00b6 New Home CIP PR","title":"Project Catalyst Role Registrations"},{"location":"catalyst-standards/draft-cips/project-catalyst-x509-role-defintions/cip-catalyst-roles/#project-catalyst-role-registrations","text":"","title":"Project Catalyst Role Registrations"},{"location":"catalyst-standards/draft-cips/project-catalyst-x509-role-defintions/cip-catalyst-roles/#permanently-moved","text":"New Home CIP PR","title":"PERMANENTLY MOVED"},{"location":"catalyst-standards/draft-cips/x509-envelope-metadata/cip-509A/","text":"x509 Replayability Protection Envelope \u00b6 PERMANENTLY MOVED \u00b6 New Home CIP PR","title":"x509 Replayability Protection Envelope"},{"location":"catalyst-standards/draft-cips/x509-envelope-metadata/cip-509A/#x509-replayability-protection-envelope","text":"","title":"x509 Replayability Protection Envelope"},{"location":"catalyst-standards/draft-cips/x509-envelope-metadata/cip-509A/#permanently-moved","text":"New Home CIP PR","title":"PERMANENTLY MOVED"},{"location":"catalyst-standards/draft-cips/x509-rbac-signing-with-cip30/cip-x509D/","text":"Preparing and Signing x509 Metadata with CIP-30 \u00b6 PERMANENTLY MOVED \u00b6 New Home CIP PR","title":"Preparing and Signing x509 Metadata with CIP-30"},{"location":"catalyst-standards/draft-cips/x509-rbac-signing-with-cip30/cip-x509D/#preparing-and-signing-x509-metadata-with-cip-30","text":"","title":"Preparing and Signing x509 Metadata with CIP-30"},{"location":"catalyst-standards/draft-cips/x509-rbac-signing-with-cip30/cip-x509D/#permanently-moved","text":"New Home CIP PR","title":"PERMANENTLY MOVED"},{"location":"catalyst-standards/draft-cips/x509-role-registration-metadata/cip-509B/","text":"x509 Role based Access Control Registration \u00b6 PERMANENTLY MOVED \u00b6 New Home CIP PR","title":"x509 Role based Access Control Registration"},{"location":"catalyst-standards/draft-cips/x509-role-registration-metadata/cip-509B/#x509-role-based-access-control-registration","text":"","title":"x509 Role based Access Control Registration"},{"location":"catalyst-standards/draft-cips/x509-role-registration-metadata/cip-509B/#permanently-moved","text":"New Home CIP PR","title":"PERMANENTLY MOVED"},{"location":"getting-started/","text":"Getting Started \u00b6","title":"Getting Started"},{"location":"getting-started/#getting-started","text":"","title":"Getting Started"},{"location":"getting-started/advanced/","text":"Advanced \u00b6","title":"Advanced"},{"location":"getting-started/advanced/#advanced","text":"","title":"Advanced"},{"location":"getting-started/development/","text":"Development \u00b6","title":"Development"},{"location":"getting-started/development/#development","text":"","title":"Development"},{"location":"getting-started/quick-start/","text":"Quick Start \u00b6","title":"Quick Start"},{"location":"getting-started/quick-start/#quick-start","text":"","title":"Quick Start"},{"location":"libs/","text":"Catalyst Library \u00b6 The Catalyst Library is a collection of libraries written by the Catalyst team to facilitate the development of the applications.","title":"Catalyst Library"},{"location":"libs/#catalyst-library","text":"The Catalyst Library is a collection of libraries written by the Catalyst team to facilitate the development of the applications.","title":"Catalyst Library"},{"location":"libs/flutter/","text":"Flutter Library \u00b6","title":"Flutter Library"},{"location":"libs/flutter/#flutter-library","text":"","title":"Flutter Library"},{"location":"libs/rust/","text":"Rust Library \u00b6","title":"Rust Library"},{"location":"libs/rust/#rust-library","text":"","title":"Rust Library"},{"location":"architecture/09_architecture_decisions/","text":"Architecture Decisions \u00b6 Index graph TD 0001-arch-std[0001 Architecture Documentation Standard] click 0001-arch-std \"/catalyst-docs/architecture/09_architecture_decisions/0001-arch-std/\" _blank 0001-arch-std:::mermaid-accepted 0001-arch-std:::mermaid-common 0002-adr[0002 Architecture Decision Records] click 0002-adr \"/catalyst-docs/architecture/09_architecture_decisions/0002-adr/\" _blank 0002-adr:::mermaid-accepted 0002-adr:::mermaid-common 0001-arch-std -- Extended --> 0002-adr 0003-flutter[0003 Flutter for Catalyst Voting Frontend] click 0003-flutter \"/catalyst-docs/architecture/09_architecture_decisions/0003-flutter/\" _blank 0003-flutter:::mermaid-accepted 0003-flutter:::mermaid-common 0004-webp[0004 Store/Display images in WebP format.] click 0004-webp \"/catalyst-docs/architecture/09_architecture_decisions/0004-webp/\" _blank 0004-webp:::mermaid-proposed 0004-webp:::mermaid-common 0005-flutter-app[0005 Catalyst Voices Frontend App Architecture] click 0005-flutter-app \"/catalyst-docs/architecture/09_architecture_decisions/0005-flutter-app/\" _blank 0005-flutter-app:::mermaid-proposed 0005-flutter-app:::mermaid-common 0006-cursor-pegination-cat-data-service[0006 Cursor-based pagination for Catalyst Data Service] click 0006-cursor-pegination-cat-data-service \"/catalyst-docs/architecture/09_architecture_decisions/0006-cursor-pegination-cat-data-service/\" _blank 0006-cursor-pegination-cat-data-service:::mermaid-accepted 0006-cursor-pegination-cat-data-service:::mermaid-common classDef mermaid-draft fill:#a3a3a3; classDef mermaid-common color:#595959; classDef mermaid-proposed fill:#b6d8ff; classDef mermaid-common color:#595959; classDef mermaid-accepted fill:#b4eda0; classDef mermaid-common color:#595959; classDef mermaid-rejected fill:#ffd5d1; classDef mermaid-common color:#595959; classDef mermaid-superseded fill:#ffebb6; classDef mermaid-common color:#595959;","title":"Architecture Decisions"},{"location":"architecture/09_architecture_decisions/#architecture-decisions","text":"Index graph TD 0001-arch-std[0001 Architecture Documentation Standard] click 0001-arch-std \"/catalyst-docs/architecture/09_architecture_decisions/0001-arch-std/\" _blank 0001-arch-std:::mermaid-accepted 0001-arch-std:::mermaid-common 0002-adr[0002 Architecture Decision Records] click 0002-adr \"/catalyst-docs/architecture/09_architecture_decisions/0002-adr/\" _blank 0002-adr:::mermaid-accepted 0002-adr:::mermaid-common 0001-arch-std -- Extended --> 0002-adr 0003-flutter[0003 Flutter for Catalyst Voting Frontend] click 0003-flutter \"/catalyst-docs/architecture/09_architecture_decisions/0003-flutter/\" _blank 0003-flutter:::mermaid-accepted 0003-flutter:::mermaid-common 0004-webp[0004 Store/Display images in WebP format.] click 0004-webp \"/catalyst-docs/architecture/09_architecture_decisions/0004-webp/\" _blank 0004-webp:::mermaid-proposed 0004-webp:::mermaid-common 0005-flutter-app[0005 Catalyst Voices Frontend App Architecture] click 0005-flutter-app \"/catalyst-docs/architecture/09_architecture_decisions/0005-flutter-app/\" _blank 0005-flutter-app:::mermaid-proposed 0005-flutter-app:::mermaid-common 0006-cursor-pegination-cat-data-service[0006 Cursor-based pagination for Catalyst Data Service] click 0006-cursor-pegination-cat-data-service \"/catalyst-docs/architecture/09_architecture_decisions/0006-cursor-pegination-cat-data-service/\" _blank 0006-cursor-pegination-cat-data-service:::mermaid-accepted 0006-cursor-pegination-cat-data-service:::mermaid-common classDef mermaid-draft fill:#a3a3a3; classDef mermaid-common color:#595959; classDef mermaid-proposed fill:#b6d8ff; classDef mermaid-common color:#595959; classDef mermaid-accepted fill:#b4eda0; classDef mermaid-common color:#595959; classDef mermaid-rejected fill:#ffd5d1; classDef mermaid-common color:#595959; classDef mermaid-superseded fill:#ffebb6; classDef mermaid-common color:#595959;","title":"Architecture Decisions"},{"location":"appendix/tags/","text":"Tag Index \u00b6 ADR \u00b6 0002 Architecture Decision Records api \u00b6 0006 Cursor-based pagination for Catalyst Data Service arc42 \u00b6 Index 0001 Architecture Documentation Standard 0002 Architecture Decision Records dart \u00b6 0003 Flutter for Catalyst Voting Frontend flutter \u00b6 0003 Flutter for Catalyst Voting Frontend 0005 Catalyst Voices Frontend App Architecture images \u00b6 0004 Store/Display images in WebP format.","title":"Tag Index"},{"location":"appendix/tags/#tag-index","text":"","title":"Tag Index"},{"location":"appendix/tags/#adr","text":"0002 Architecture Decision Records","title":"ADR"},{"location":"appendix/tags/#api","text":"0006 Cursor-based pagination for Catalyst Data Service","title":"api"},{"location":"appendix/tags/#arc42","text":"Index 0001 Architecture Documentation Standard 0002 Architecture Decision Records","title":"arc42"},{"location":"appendix/tags/#dart","text":"0003 Flutter for Catalyst Voting Frontend","title":"dart"},{"location":"appendix/tags/#flutter","text":"0003 Flutter for Catalyst Voting Frontend 0005 Catalyst Voices Frontend App Architecture","title":"flutter"},{"location":"appendix/tags/#images","text":"0004 Store/Display images in WebP format.","title":"images"}]}