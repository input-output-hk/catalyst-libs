{"uid":"a1f08111e388c0f9","name":"tests::it_works","historyId":"cbork-cddl-parser:cbork-cddl-parser#tests::it_works","time":{"duration":285},"status":"passed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"steps":[{"name":"","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false,"stepsCount":0,"hasContent":false},{"name":"running 1 test","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false,"stepsCount":0,"hasContent":false},{"name":"CDDL([Pair { rule: cddl, span: Span { str: \"\\n\\n; CDDL Standard Postlude as defined by Appendix D of RFC8610\\n; https://www.rfc-editor.org/rfc/rfc8610#appendix-D\\n\\n; cspell: words nint tstr tdate biguint decfrac bigfloat cbor bignint\\n\\nany = #\\n\\nuint = #0\\nnint = #1\\nint = uint / nint\\n\\nbstr = #2\\nbytes = bstr\\ntstr = #3\\ntext = tstr\\n\\ntdate = #6.0(tstr)\\ntime = #6.1(number)\\nnumber = int / float\\nbiguint = #6.2(bstr)\\nbignint = #6.3(bstr)\\nbigint = biguint / bignint\\ninteger = int / bigint\\nunsigned = uint / biguint\\ndecfrac = #6.4([e10: int, m: integer])\\nbigfloat = #6.5([e2: int, m: integer])\\neb64url = #6.21(any)\\neb64legacy = #6.22(any)\\neb16 = #6.23(any)\\nencoded-cbor = #6.24(bstr)\\nuri = #6.32(tstr)\\nb64url = #6.33(tstr)\\nb64legacy = #6.34(tstr)\\nregexp = #6.35(tstr)\\nmime-message = #6.36(tstr)\\ncbor-any = #6.55799(any)\\n\\nfloat16 = #7.25\\nfloat32 = #7.26\\nfloat64 = #7.27\\nfloat16-32 = float16 / float32\\nfloat32-64 = float32 / float64\\nfloat = float16-32 / float64\\n\\nfalse = #7.20\\ntrue = #7.21\\nbool = false / true\\nnil = #7.22\\nnull = nil\\nundefined = #7.23\", start: 0, end: 991 }, inner: [Pair { rule: COMMENT, span: Span { str: \"; CDDL Standard Postlude as defined by Appendix D of RFC8610\\n\", start: 2, end: 63 }, inner: [] }, Pair { rule: COMMENT, span: Span { str: \"; https://www.rfc-editor.org/rfc/rfc8610#appendix-D\\n\", start: 63, end: 115 }, inner: [] }, Pair { rule: COMMENT, span: Span { str: \"; cspell: words nint tstr tdate biguint decfrac bigfloat cbor bignint\\n\", start: 116, end: 186 }, inner: [] }, Pair { rule: rule, span: Span { str: \"any = #\", start: 187, end: 194 }, inner: [Pair { rule: typename, span: Span { str: \"any\", start: 187, end: 190 }, inner: [Pair { rule: id, span: Span { str: \"any\", start: 187, end: 190 }, inner: [Pair { rule: name, span: Span { str: \"any\", start: 187, end: 190 }, inner: [] }] }] }, Pair { rule: assignt, span: Span { str: \"=\", start: 191, end: 192 }, inner: [] }, Pair { rule: type, span: Span { str: \"#\", start: 193, end: 194 }, inner: [Pair { rule: type1, span: Span { str: \"#\", start: 193, end: 194 }, inner: [Pair { rule: type2, span: Span { str: \"#\", start: 193, end: 194 }, inner: [] }] }] }] }, Pair { rule: rule, span: Span { str: \"uint = #0\", start: 196, end: 205 }, inner: [Pair { rule: typename, span: Span { str: \"uint\", start: 196, end: 200 }, inner: [Pair { rule: id, span: Span { str: \"uint\", start: 196, end: 200 }, inner: [Pair { rule: name, span: Span { str: \"uint\", start: 196, end: 200 }, inner: [] }] }] }, Pair { rule: assignt, span: Span { str: \"=\", start: 201, end: 202 }, inner: [] }, Pair { rule: type, span: Span { str: \"#0\", start: 203, end: 205 }, inner: [Pair { rule: type1, span: Span { str: \"#0\", start: 203, end: 205 }, inner: [Pair { rule: type2, span: Span { str: \"#0\", start: 203, end: 205 }, inner: [] }] }] }] }, Pair { rule: rule, span: Span { str: \"nint = #1\", start: 206, end: 215 }, inner: [Pair { rule: typename, span: Span { str: \"nint\", start: 206, end: 210 }, inner: [Pair { rule: id, span: Span { str: \"nint\", start: 206, end: 210 }, inner: [Pair { rule: name, span: Span { str: \"nint\", start: 206, end: 210 }, inner: [] }] }] }, Pair { rule: assignt, span: Span { str: \"=\", start: 211, end: 212 }, inner: [] }, Pair { rule: type, span: Span { str: \"#1\", start: 213, end: 215 }, inner: [Pair { rule: type1, span: Span { str: \"#1\", start: 213, end: 215 }, inner: [Pair { rule: type2, span: Span { str: \"#1\", start: 213, end: 215 }, inner: [] }] }] }] }, Pair { rule: rule, span: Span { str: \"int = uint / nint\", start: 216, end: 233 }, inner: [Pair { rule: typename, span: Span { str: \"int\", start: 216, end: 219 }, inner: [Pair { rule: id, span: Span { str: \"int\", start: 216, end: 219 }, inner: [Pair { rule: name, span: Span { str: \"int\", start: 216, end: 219 }, inner: [] }] }] }, Pair { rule: assignt, span: Span { str: \"=\", start: 220, end: 221 }, inner: [] }, Pair { rule: type, span: Span { str: \"uint / nint\", start: 222, end: 233 }, inner: [Pair { rule: type1, span: Span { str: \"uint\", start: 222, end: 226 }, inner: [Pair { rule: type2, span: Span { str: \"uint\", start: 222, end: 226 }, inner: [Pair { rule: typename, span: Span { str: \"uint\", start: 222, end: 226 }, inner: [Pair { rule: id, span: Span { str: \"uint\", start: 222, end: 226 }, inner: [Pair { rule: name, span: Span { str: \"uint\", start: 222, end: 226 }, inner: [] }] }] }] }] }, Pair { rule: type1, span: Span { str: \"nint\", start: 229, end: 233 }, inner: [Pair { rule: type2, span: Span { str: \"nint\", start: 229, end: 233 }, inner: [Pair { rule: typename, span: Span { str: \"nint\", start: 229, end: 233 }, inner: [Pair { rule: id, span: Span { str: \"nint\", start: 229, end: 233 }, inner: [Pair { rule: name, span: Span { str: \"nint\", start: 229, end: 233 }, inner: [] }] }] }] }] }] }] }, Pair { rule: rule, span: Span { str: \"bstr = #2\", start: 235, end: 244 }, inner: [Pair { rule: typename, span: Span { str: \"bstr\", start: 235, end: 239 }, inner: [Pair { rule: id, span: Span { str: \"bstr\", start: 235, end: 239 }, inner: [Pair { rule: name, span: Span { str: \"bstr\", start: 235, end: 239 }, inner: [] }] }] }, Pair { rule: assignt, span: Span { str: \"=\", start: 240, end: 241 }, inner: [] }, Pair { rule: type, span: Span { str: \"#2\", start: 242, end: 244 }, inner: [Pair { rule: type1, span: Span { str: \"#2\", start: 242, end: 244 }, inner: [Pair { rule: type2, span: Span { str: \"#2\", start: 242, end: 244 }, inner: [] }] }] }] }, Pair { rule: rule, span: Span { str: \"bytes = bstr\", start: 245, end: 257 }, inner: [Pair { rule: typename, span: Span { str: \"bytes\", start: 245, end: 250 }, inner: [Pair { rule: id, span: Span { str: \"bytes\", start: 245, end: 250 }, inner: [Pair { rule: name, span: Span { str: \"bytes\", start: 245, end: 250 }, inner: [] }] }] }, Pair { rule: assignt, span: Span { str: \"=\", start: 251, end: 252 }, inner: [] }, Pair { rule: type, span: Span { str: \"bstr\", start: 253, end: 257 }, inner: [Pair { rule: type1, span: Span { str: \"bstr\", start: 253, end: 257 }, inner: [Pair { rule: type2, span: Span { str: \"bstr\", start: 253, end: 257 }, inner: [Pair { rule: typename, span: Span { str: \"bstr\", start: 253, end: 257 }, inner: [Pair { rule: id, span: Span { str: \"bstr\", start: 253, end: 257 }, inner: [Pair { rule: name, span: Span { str: \"bstr\", start: 253, end: 257 }, inner: [] }] }] }] }] }] }] }, Pair { rule: rule, span: Span { str: \"tstr = #3\", start: 258, end: 267 }, inner: [Pair { rule: typename, span: Span { str: \"tstr\", start: 258, end: 262 }, inner: [Pair { rule: id, span: Span { str: \"tstr\", start: 258, end: 262 }, inner: [Pair { rule: name, span: Span { str: \"tstr\", start: 258, end: 262 }, inner: [] }] }] }, Pair { rule: assignt, span: Span { str: \"=\", start: 263, end: 264 }, inner: [] }, Pair { rule: type, span: Span { str: \"#3\", start: 265, end: 267 }, inner: [Pair { rule: type1, span: Span { str: \"#3\", start: 265, end: 267 }, inner: [Pair { rule: type2, span: Span { str: \"#3\", start: 265, end: 267 }, inner: [] }] }] }] }, Pair { rule: rule, span: Span { str: \"text = tstr\", start: 268, end: 279 }, inner: [Pair { rule: typename, span: Span { str: \"text\", start: 268, end: 272 }, inner: [Pair { rule: id, span: Span { str: \"text\", start: 268, end: 272 }, inner: [Pair { rule: name, span: Span { str: \"text\", start: 268, end: 272 }, inner: [] }] }] }, Pair { rule: assignt, span: Span { str: \"=\", start: 273, end: 274 }, inner: [] }, Pair { rule: type, span: Span { str: \"tstr\", start: 275, end: 279 }, inner: [Pair { rule: type1, span: Span { str: \"tstr\", start: 275, end: 279 }, inner: [Pair { rule: type2, span: Span { str: \"tstr\", start: 275, end: 279 }, inner: [Pair { rule: typename, span: Span { str: \"tstr\", start: 275, end: 279 }, inner: [Pair { rule: id, span: Span { str: \"tstr\", start: 275, end: 279 }, inner: [Pair { rule: name, span: Span { str: \"tstr\", start: 275, end: 279 }, inner: [] }] }] }] }] }] }] }, Pair { rule: rule, span: Span { str: \"tdate = #6.0(tstr)\", start: 281, end: 299 }, inner: [Pair { rule: typename, span: Span { str: \"tdate\", start: 281, end: 286 }, inner: [Pair { rule: id, span: Span { str: \"tdate\", start: 281, end: 286 }, inner: [Pair { rule: name, span: Span { str: \"tdate\", start: 281, end: 286 }, inner: [] }] }] }, Pair { rule: assignt, span: Span { str: \"=\", start: 287, end: 288 }, inner: [] }, Pair { rule: type, span: Span { str: \"#6.0(tstr)\", start: 289, end: 299 }, inner: [Pair { rule: type1, span: Span { str: \"#6.0(tstr)\", start: 289, end: 299 }, inner: [Pair { rule: type2, span: Span { str: \"#6.0(tstr)\", start: 289, end: 299 }, inner: [Pair { rule: uint, span: Span { str: \"0\", start: 292, end: 293 }, inner: [] }, Pair { rule: type, span: Span { str: \"tstr\", start: 294, end: 298 }, inner: [Pair { rule: type1, span: Span { str: \"tstr\", start: 294, end: 298 }, inner: [Pair { rule: type2, span: Span { str: \"tstr\", start: 294, end: 298 }, inner: [Pair { rule: typename, span: Span { str: \"tstr\", start: 294, end: 298 }, inner: [Pair { rule: id, span: Span { str: \"tstr\", start: 294, end: 298 }, inner: [Pair { rule: name, span: Span { str: \"tstr\", start: 294, end: 298 }, inner: [] }] }] }] }] }] }] }] }] }] }, Pair { rule: rule, span: Span { str: \"time = #6.1(number)\", start: 300, end: 319 }, inner: [Pair { rule: typename, span: Span { str: \"time\", start: 300, end: 304 }, inner: [Pair { rule: id, span: Span { str: \"time\", start: 300, end: 304 }, inner: [Pair { rule: name, span: Span { str: \"time\", start: 300, end: 304 }, inner: [] }] }] }, Pair { rule: assignt, span: Span { str: \"=\", start: 305, end: 306 }, inner: [] }, Pair { rule: type, span: Span { str: \"#6.1(number)\", start: 307, end: 319 }, inner: [Pair { rule: type1, span: Span { str: \"#6.1(number)\", start: 307, end: 319 }, inner: [Pair { rule: type2, span: Span { str: \"#6.1(number)\", start: 307, end: 319 }, inner: [Pair { rule: uint, span: Span { str: \"1\", start: 310, end: 311 }, inner: [] }, Pair { rule: type, span: Span { str: \"number\", start: 312, end: 318 }, inner: [Pair { rule: type1, span: Span { str: \"number\", start: 312, end: 318 }, inner: [Pair { rule: type2, span: Span { str: \"number\", start: 312, end: 318 }, inner: [Pair { rule: typename, span: Span { str: \"number\", start: 312, end: 318 }, inner: [Pair { rule: id, span: Span { str: \"number\", start: 312, end: 318 }, inner: [Pair { rule: name, span: Span { str: \"number\", start: 312, end: 318 }, inner: [] }] }] }] }] }] }] }] }] }] }, Pair { rule: rule, span: Span { str: \"number = int / float\", start: 320, end: 340 }, inner: [Pair { rule: typename, span: Span { str: \"number\", start: 320, end: 326 }, inner: [Pair { rule: id, span: Span { str: \"number\", start: 320, end: 326 }, inner: [Pair { rule: name, span: Span { str: \"number\", start: 320, end: 326 }, inner: [] }] }] }, Pair { rule: assignt, span: Span { str: \"=\", start: 327, end: 328 }, inner: [] }, Pair { rule: type, span: Span { str: \"int / float\", start: 329, end: 340 }, inner: [Pair { rule: type1, span: Span { str: \"int\", start: 329, end: 332 }, inner: [Pair { rule: type2, span: Span { str: \"int\", start: 329, end: 332 }, inner: [Pair { rule: typename, span: Span { str: \"int\", start: 329, end: 332 }, inner: [Pair { rule: id, span: Span { str: \"int\", start: 329, end: 332 }, inner: [Pair { rule: name, span: Span { str: \"int\", start: 329, end: 332 }, inner: [] }] }] }] }] }, Pair { rule: type1, span: Span { str: \"float\", start: 335, end: 340 }, inner: [Pair { rule: type2, span: Span { str: \"float\", start: 335, end: 340 }, inner: [Pair { rule: typename, span: Span { str: \"float\", start: 335, end: 340 }, inner: [Pair { rule: id, span: Span { str: \"float\", start: 335, end: 340 }, inner: [Pair { rule: name, span: Span { str: \"float\", start: 335, end: 340 }, inner: [] }] }] }] }] }] }] }, Pair { rule: rule, span: Span { str: \"biguint = #6.2(bstr)\", start: 341, end: 361 }, inner: [Pair { rule: typename, span: Span { str: \"biguint\", start: 341, end: 348 }, inner: [Pair { rule: id, span: Span { str: \"biguint\", start: 341, end: 348 }, inner: [Pair { rule: name, span: Span { str: \"biguint\", start: 341, end: 348 }, inner: [] }] }] }, Pair { rule: assignt, span: Span { str: \"=\", start: 349, end: 350 }, inner: [] }, Pair { rule: type, span: Span { str: \"#6.2(bstr)\", start: 351, end: 361 }, inner: [Pair { rule: type1, span: Span { str: \"#6.2(bstr)\", start: 351, end: 361 }, inner: [Pair { rule: type2, span: Span { str: \"#6.2(bstr)\", start: 351, end: 361 }, inner: [Pair { rule: uint, span: Span { str: \"2\", start: 354, end: 355 }, inner: [] }, Pair { rule: type, span: Span { str: \"bstr\", start: 356, end: 360 }, inner: [Pair { rule: type1, span: Span { str: \"bstr\", start: 356, end: 360 }, inner: [Pair { rule: type2, span: Span { str: \"bstr\", start: 356, end: 360 }, inner: [Pair { rule: typename, span: Span { str: \"bstr\", start: 356, end: 360 }, inner: [Pair { rule: id, span: Span { str: \"bstr\", start: 356, end: 360 }, inner: [Pair { rule: name, span: Span { str: \"bstr\", start: 356, end: 360 }, inner: [] }] }] }] }] }] }] }] }] }] }, Pair { rule: rule, span: Span { str: \"bignint = #6.3(bstr)\", start: 362, end: 382 }, inner: [Pair { rule: typename, span: Span { str: \"bignint\", start: 362, end: 369 }, inner: [Pair { rule: id, span: Span { str: \"bignint\", start: 362, end: 369 }, inner: [Pair { rule: name, span: Span { str: \"bignint\", start: 362, end: 369 }, inner: [] }] }] }, Pair { rule: assignt, span: Span { str: \"=\", start: 370, end: 371 }, inner: [] }, Pair { rule: type, span: Span { str: \"#6.3(bstr)\", start: 372, end: 382 }, inner: [Pair { rule: type1, span: Span { str: \"#6.3(bstr)\", start: 372, end: 382 }, inner: [Pair { rule: type2, span: Span { str: \"#6.3(bstr)\", start: 372, end: 382 }, inner: [Pair { rule: uint, span: Span { str: \"3\", start: 375, end: 376 }, inner: [] }, Pair { rule: type, span: Span { str: \"bstr\", start: 377, end: 381 }, inner: [Pair { rule: type1, span: Span { str: \"bstr\", start: 377, end: 381 }, inner: [Pair { rule: type2, span: Span { str: \"bstr\", start: 377, end: 381 }, inner: [Pair { rule: typename, span: Span { str: \"bstr\", start: 377, end: 381 }, inner: [Pair { rule: id, span: Span { str: \"bstr\", start: 377, end: 381 }, inner: [Pair { rule: name, span: Span { str: \"bstr\", start: 377, end: 381 }, inner: [] }] }] }] }] }] }] }] }] }] }, Pair { rule: rule, span: Span { str: \"bigint = biguint / bignint\", start: 383, end: 409 }, inner: [Pair { rule: typename, span: Span { str: \"bigint\", start: 383, end: 389 }, inner: [Pair { rule: id, span: Span { str: \"bigint\", start: 383, end: 389 }, inner: [Pair { rule: name, span: Span { str: \"bigint\", start: 383, end: 389 }, inner: [] }] }] }, Pair { rule: assignt, span: Span { str: \"=\", start: 390, end: 391 }, inner: [] }, Pair { rule: type, span: Span { str: \"biguint / bignint\", start: 392, end: 409 }, inner: [Pair { rule: type1, span: Span { str: \"biguint\", start: 392, end: 399 }, inner: [Pair { rule: type2, span: Span { str: \"biguint\", start: 392, end: 399 }, inner: [Pair { rule: typename, span: Span { str: \"biguint\", start: 392, end: 399 }, inner: [Pair { rule: id, span: Span { str: \"biguint\", start: 392, end: 399 }, inner: [Pair { rule: name, span: Span { str: \"biguint\", start: 392, end: 399 }, inner: [] }] }] }] }] }, Pair { rule: type1, span: Span { str: \"bignint\", start: 402, end: 409 }, inner: [Pair { rule: type2, span: Span { str: \"bignint\", start: 402, end: 409 }, inner: [Pair { rule: typename, span: Span { str: \"bignint\", start: 402, end: 409 }, inner: [Pair { rule: id, span: Span { str: \"bignint\", start: 402, end: 409 }, inner: [Pair { rule: name, span: Span { str: \"bignint\", start: 402, end: 409 }, inner: [] }] }] }] }] }] }] }, Pair { rule: rule, span: Span { str: \"integer = int / bigint\", start: 410, end: 432 }, inner: [Pair { rule: typename, span: Span { str: \"integer\", start: 410, end: 417 }, inner: [Pair { rule: id, span: Span { str: \"integer\", start: 410, end: 417 }, inner: [Pair { rule: name, span: Span { str: \"integer\", start: 410, end: 417 }, inner: [] }] }] }, Pair { rule: assignt, span: Span { str: \"=\", start: 418, end: 419 }, inner: [] }, Pair { rule: type, span: Span { str: \"int / bigint\", start: 420, end: 432 }, inner: [Pair { rule: type1, span: Span { str: \"int\", start: 420, end: 423 }, inner: [Pair { rule: type2, span: Span { str: \"int\", start: 420, end: 423 }, inner: [Pair { rule: typename, span: Span { str: \"int\", start: 420, end: 423 }, inner: [Pair { rule: id, span: Span { str: \"int\", start: 420, end: 423 }, inner: [Pair { rule: name, span: Span { str: \"int\", start: 420, end: 423 }, inner: [] }] }] }] }] }, Pair { rule: type1, span: Span { str: \"bigint\", start: 426, end: 432 }, inner: [Pair { rule: type2, span: Span { str: \"bigint\", start: 426, end: 432 }, inner: [Pair { rule: typename, span: Span { str: \"bigint\", start: 426, end: 432 }, inner: [Pair { rule: id, span: Span { str: \"bigint\", start: 426, end: 432 }, inner: [Pair { rule: name, span: Span { str: \"bigint\", start: 426, end: 432 }, inner: [] }] }] }] }] }] }] }, Pair { rule: rule, span: Span { str: \"unsigned = uint / biguint\", start: 433, end: 458 }, inner: [Pair { rule: typename, span: Span { str: \"unsigned\", start: 433, end: 441 }, inner: [Pair { rule: id, span: Span { str: \"unsigned\", start: 433, end: 441 }, inner: [Pair { rule: name, span: Span { str: \"unsigned\", start: 433, end: 441 }, inner: [] }] }] }, Pair { rule: assignt, span: Span { str: \"=\", start: 442, end: 443 }, inner: [] }, Pair { rule: type, span: Span { str: \"uint / biguint\", start: 444, end: 458 }, inner: [Pair { rule: type1, span: Span { str: \"uint\", start: 444, end: 448 }, inner: [Pair { rule: type2, span: Span { str: \"uint\", start: 444, end: 448 }, inner: [Pair { rule: typename, span: Span { str: \"uint\", start: 444, end: 448 }, inner: [Pair { rule: id, span: Span { str: \"uint\", start: 444, end: 448 }, inner: [Pair { rule: name, span: Span { str: \"uint\", start: 444, end: 448 }, inner: [] }] }] }] }] }, Pair { rule: type1, span: Span { str: \"biguint\", start: 451, end: 458 }, inner: [Pair { rule: type2, span: Span { str: \"biguint\", start: 451, end: 458 }, inner: [Pair { rule: typename, span: Span { str: \"biguint\", start: 451, end: 458 }, inner: [Pair { rule: id, span: Span { str: \"biguint\", start: 451, end: 458 }, inner: [Pair { rule: name, span: Span { str: \"biguint\", start: 451, end: 458 }, inner: [] }] }] }] }] }] }] }, Pair { rule: rule, span: Span { str: \"decfrac = #6.4([e10: int, m: integer])\", start: 459, end: 497 }, inner: [Pair { rule: typename, span: Span { str: \"decfrac\", start: 459, end: 466 }, inner: [Pair { rule: id, span: Span { str: \"decfrac\", start: 459, end: 466 }, inner: [Pair { rule: name, span: Span { str: \"decfrac\", start: 459, end: 466 }, inner: [] }] }] }, Pair { rule: assignt, span: Span { str: \"=\", start: 467, end: 468 }, inner: [] }, Pair { rule: type, span: Span { str: \"#6.4([e10: int, m: integer])\", start: 469, end: 497 }, inner: [Pair { rule: type1, span: Span { str: \"#6.4([e10: int, m: integer])\", start: 469, end: 497 }, inner: [Pair { rule: type2, span: Span { str: \"#6.4([e10: int, m: integer])\", start: 469, end: 497 }, inner: [Pair { rule: uint, span: Span { str: \"4\", start: 472, end: 473 }, inner: [] }, Pair { rule: type, span: Span { str: \"[e10: int, m: integer]\", start: 474, end: 496 }, inner: [Pair { rule: type1, span: Span { str: \"[e10: int, m: integer]\", start: 474, end: 496 }, inner: [Pair { rule: type2, span: Span { str: \"[e10: int, m: integer]\", start: 474, end: 496 }, inner: [Pair { rule: group, span: Span { str: \"e10: int, m: integer\", start: 475, end: 495 }, inner: [Pair { rule: grpchoice, span: Span { str: \"e10: int, m: integer\", start: 475, end: 495 }, inner: [Pair { rule: grpent, span: Span { str: \"e10: int\", start: 475, end: 483 }, inner: [Pair { rule: memberkey, span: Span { str: \"e10:\", start: 475, end: 479 }, inner: [Pair { rule: bareword, span: Span { str: \"e10\", start: 475, end: 478 }, inner: [Pair { rule: id, span: Span { str: \"e10\", start: 475, end: 478 }, inner: [Pair { rule: name, span: Span { str: \"e10\", start: 475, end: 478 }, inner: [] }] }] }] }, Pair { rule: type, span: Span { str: \"int\", start: 480, end: 483 }, inner: [Pair { rule: type1, span: Span { str: \"int\", start: 480, end: 483 }, inner: [Pair { rule: type2, span: Span { str: \"int\", start: 480, end: 483 }, inner: [Pair { rule: typename, span: Span { str: \"int\", start: 480, end: 483 }, inner: [Pair { rule: id, span: Span { str: \"int\", start: 480, end: 483 }, inner: [Pair { rule: name, span: Span { str: \"int\", start: 480, end: 483 }, inner: [] }] }] }] }] }] }] }, Pair { rule: optcom, span: Span { str: \", \", start: 483, end: 485 }, inner: [] }, Pair { rule: grpent, span: Span { str: \"m: integer\", start: 485, end: 495 }, inner: [Pair { rule: memberkey, span: Span { str: \"m:\", start: 485, end: 487 }, inner: [Pair { rule: bareword, span: Span { str: \"m\", start: 485, end: 486 }, inner: [Pair { rule: id, span: Span { str: \"m\", start: 485, end: 486 }, inner: [Pair { rule: name, span: Span { str: \"m\", start: 485, end: 486 }, inner: [] }] }] }] }, Pair { rule: type, span: Span { str: \"integer\", start: 488, end: 495 }, inner: [Pair { rule: type1, span: Span { str: \"integer\", start: 488, end: 495 }, inner: [Pair { rule: type2, span: Span { str: \"integer\", start: 488, end: 495 }, inner: [Pair { rule: typename, span: Span { str: \"integer\", start: 488, end: 495 }, inner: [Pair { rule: id, span: Span { str: \"integer\", start: 488, end: 495 }, inner: [Pair { rule: name, span: Span { str: \"integer\", start: 488, end: 495 }, inner: [] }] }] }] }] }] }] }, Pair { rule: optcom, span: Span { str: \"\", start: 495, end: 495 }, inner: [] }] }] }] }] }] }] }] }] }] }, Pair { rule: rule, span: Span { str: \"bigfloat = #6.5([e2: int, m: integer])\", start: 498, end: 536 }, inner: [Pair { rule: typename, span: Span { str: \"bigfloat\", start: 498, end: 506 }, inner: [Pair { rule: id, span: Span { str: \"bigfloat\", start: 498, end: 506 }, inner: [Pair { rule: name, span: Span { str: \"bigfloat\", start: 498, end: 506 }, inner: [] }] }] }, Pair { rule: assignt, span: Span { str: \"=\", start: 507, end: 508 }, inner: [] }, Pair { rule: type, span: Span { str: \"#6.5([e2: int, m: integer])\", start: 509, end: 536 }, inner: [Pair { rule: type1, span: Span { str: \"#6.5([e2: int, m: integer])\", start: 509, end: 536 }, inner: [Pair { rule: type2, span: Span { str: \"#6.5([e2: int, m: integer])\", start: 509, end: 536 }, inner: [Pair { rule: uint, span: Span { str: \"5\", start: 512, end: 513 }, inner: [] }, Pair { rule: type, span: Span { str: \"[e2: int, m: integer]\", start: 514, end: 535 }, inner: [Pair { rule: type1, span: Span { str: \"[e2: int, m: integer]\", start: 514, end: 535 }, inner: [Pair { rule: type2, span: Span { str: \"[e2: int, m: integer]\", start: 514, end: 535 }, inner: [Pair { rule: group, span: Span { str: \"e2: int, m: integer\", start: 515, end: 534 }, inner: [Pair { rule: grpchoice, span: Span { str: \"e2: int, m: integer\", start: 515, end: 534 }, inner: [Pair { rule: grpent, span: Span { str: \"e2: int\", start: 515, end: 522 }, inner: [Pair { rule: memberkey, span: Span { str: \"e2:\", start: 515, end: 518 }, inner: [Pair { rule: bareword, span: Span { str: \"e2\", start: 515, end: 517 }, inner: [Pair { rule: id, span: Span { str: \"e2\", start: 515, end: 517 }, inner: [Pair { rule: name, span: Span { str: \"e2\", start: 515, end: 517 }, inner: [] }] }] }] }, Pair { rule: type, span: Span { str: \"int\", start: 519, end: 522 }, inner: [Pair { rule: type1, span: Span { str: \"int\", start: 519, end: 522 }, inner: [Pair { rule: type2, span: Span { str: \"int\", start: 519, end: 522 }, inner: [Pair { rule: typename, span: Span { str: \"int\", start: 519, end: 522 }, inner: [Pair { rule: id, span: Span { str: \"int\", start: 519, end: 522 }, inner: [Pair { rule: name, span: Span { str: \"int\", start: 519, end: 522 }, inner: [] }] }] }] }] }] }] }, Pair { rule: optcom, span: Span { str: \", \", start: 522, end: 524 }, inner: [] }, Pair { rule: grpent, span: Span { str: \"m: integer\", start: 524, end: 534 }, inner: [Pair { rule: memberkey, span: Span { str: \"m:\", start: 524, end: 526 }, inner: [Pair { rule: bareword, span: Span { str: \"m\", start: 524, end: 525 }, inner: [Pair { rule: id, span: Span { str: \"m\", start: 524, end: 525 }, inner: [Pair { rule: name, span: Span { str: \"m\", start: 524, end: 525 }, inner: [] }] }] }] }, Pair { rule: type, span: Span { str: \"integer\", start: 527, end: 534 }, inner: [Pair { rule: type1, span: Span { str: \"integer\", start: 527, end: 534 }, inner: [Pair { rule: type2, span: Span { str: \"integer\", start: 527, end: 534 }, inner: [Pair { rule: typename, span: Span { str: \"integer\", start: 527, end: 534 }, inner: [Pair { rule: id, span: Span { str: \"integer\", start: 527, end: 534 }, inner: [Pair { rule: name, span: Span { str: \"integer\", start: 527, end: 534 }, inner: [] }] }] }] }] }] }] }, Pair { rule: optcom, span: Span { str: \"\", start: 534, end: 534 }, inner: [] }] }] }] }] }] }] }] }] }] }, Pair { rule: rule, span: Span { str: \"eb64url = #6.21(any)\", start: 537, end: 557 }, inner: [Pair { rule: typename, span: Span { str: \"eb64url\", start: 537, end: 544 }, inner: [Pair { rule: id, span: Span { str: \"eb64url\", start: 537, end: 544 }, inner: [Pair { rule: name, span: Span { str: \"eb64url\", start: 537, end: 544 }, inner: [] }] }] }, Pair { rule: assignt, span: Span { str: \"=\", start: 545, end: 546 }, inner: [] }, Pair { rule: type, span: Span { str: \"#6.21(any)\", start: 547, end: 557 }, inner: [Pair { rule: type1, span: Span { str: \"#6.21(any)\", start: 547, end: 557 }, inner: [Pair { rule: type2, span: Span { str: \"#6.21(any)\", start: 547, end: 557 }, inner: [Pair { rule: uint, span: Span { str: \"21\", start: 550, end: 552 }, inner: [] }, Pair { rule: type, span: Span { str: \"any\", start: 553, end: 556 }, inner: [Pair { rule: type1, span: Span { str: \"any\", start: 553, end: 556 }, inner: [Pair { rule: type2, span: Span { str: \"any\", start: 553, end: 556 }, inner: [Pair { rule: typename, span: Span { str: \"any\", start: 553, end: 556 }, inner: [Pair { rule: id, span: Span { str: \"any\", start: 553, end: 556 }, inner: [Pair { rule: name, span: Span { str: \"any\", start: 553, end: 556 }, inner: [] }] }] }] }] }] }] }] }] }] }, Pair { rule: rule, span: Span { str: \"eb64legacy = #6.22(any)\", start: 558, end: 581 }, inner: [Pair { rule: typename, span: Span { str: \"eb64legacy\", start: 558, end: 568 }, inner: [Pair { rule: id, span: Span { str: \"eb64legacy\", start: 558, end: 568 }, inner: [Pair { rule: name, span: Span { str: \"eb64legacy\", start: 558, end: 568 }, inner: [] }] }] }, Pair { rule: assignt, span: Span { str: \"=\", start: 569, end: 570 }, inner: [] }, Pair { rule: type, span: Span { str: \"#6.22(any)\", start: 571, end: 581 }, inner: [Pair { rule: type1, span: Span { str: \"#6.22(any)\", start: 571, end: 581 }, inner: [Pair { rule: type2, span: Span { str: \"#6.22(any)\", start: 571, end: 581 }, inner: [Pair { rule: uint, span: Span { str: \"22\", start: 574, end: 576 }, inner: [] }, Pair { rule: type, span: Span { str: \"any\", start: 577, end: 580 }, inner: [Pair { rule: type1, span: Span { str: \"any\", start: 577, end: 580 }, inner: [Pair { rule: type2, span: Span { str: \"any\", start: 577, end: 580 }, inner: [Pair { rule: typename, span: Span { str: \"any\", start: 577, end: 580 }, inner: [Pair { rule: id, span: Span { str: \"any\", start: 577, end: 580 }, inner: [Pair { rule: name, span: Span { str: \"any\", start: 577, end: 580 }, inner: [] }] }] }] }] }] }] }] }] }] }, Pair { rule: rule, span: Span { str: \"eb16 = #6.23(any)\", start: 582, end: 599 }, inner: [Pair { rule: typename, span: Span { str: \"eb16\", start: 582, end: 586 }, inner: [Pair { rule: id, span: Span { str: \"eb16\", start: 582, end: 586 }, inner: [Pair { rule: name, span: Span { str: \"eb16\", start: 582, end: 586 }, inner: [] }] }] }, Pair { rule: assignt, span: Span { str: \"=\", start: 587, end: 588 }, inner: [] }, Pair { rule: type, span: Span { str: \"#6.23(any)\", start: 589, end: 599 }, inner: [Pair { rule: type1, span: Span { str: \"#6.23(any)\", start: 589, end: 599 }, inner: [Pair { rule: type2, span: Span { str: \"#6.23(any)\", start: 589, end: 599 }, inner: [Pair { rule: uint, span: Span { str: \"23\", start: 592, end: 594 }, inner: [] }, Pair { rule: type, span: Span { str: \"any\", start: 595, end: 598 }, inner: [Pair { rule: type1, span: Span { str: \"any\", start: 595, end: 598 }, inner: [Pair { rule: type2, span: Span { str: \"any\", start: 595, end: 598 }, inner: [Pair { rule: typename, span: Span { str: \"any\", start: 595, end: 598 }, inner: [Pair { rule: id, span: Span { str: \"any\", start: 595, end: 598 }, inner: [Pair { rule: name, span: Span { str: \"any\", start: 595, end: 598 }, inner: [] }] }] }] }] }] }] }] }] }] }, Pair { rule: rule, span: Span { str: \"encoded-cbor = #6.24(bstr)\", start: 600, end: 626 }, inner: [Pair { rule: typename, span: Span { str: \"encoded-cbor\", start: 600, end: 612 }, inner: [Pair { rule: id, span: Span { str: \"encoded-cbor\", start: 600, end: 612 }, inner: [Pair { rule: name, span: Span { str: \"encoded-cbor\", start: 600, end: 612 }, inner: [] }] }] }, Pair { rule: assignt, span: Span { str: \"=\", start: 613, end: 614 }, inner: [] }, Pair { rule: type, span: Span { str: \"#6.24(bstr)\", start: 615, end: 626 }, inner: [Pair { rule: type1, span: Span { str: \"#6.24(bstr)\", start: 615, end: 626 }, inner: [Pair { rule: type2, span: Span { str: \"#6.24(bstr)\", start: 615, end: 626 }, inner: [Pair { rule: uint, span: Span { str: \"24\", start: 618, end: 620 }, inner: [] }, Pair { rule: type, span: Span { str: \"bstr\", start: 621, end: 625 }, inner: [Pair { rule: type1, span: Span { str: \"bstr\", start: 621, end: 625 }, inner: [Pair { rule: type2, span: Span { str: \"bstr\", start: 621, end: 625 }, inner: [Pair { rule: typename, span: Span { str: \"bstr\", start: 621, end: 625 }, inner: [Pair { rule: id, span: Span { str: \"bstr\", start: 621, end: 625 }, inner: [Pair { rule: name, span: Span { str: \"bstr\", start: 621, end: 625 }, inner: [] }] }] }] }] }] }] }] }] }] }, Pair { rule: rule, span: Span { str: \"uri = #6.32(tstr)\", start: 627, end: 644 }, inner: [Pair { rule: typename, span: Span { str: \"uri\", start: 627, end: 630 }, inner: [Pair { rule: id, span: Span { str: \"uri\", start: 627, end: 630 }, inner: [Pair { rule: name, span: Span { str: \"uri\", start: 627, end: 630 }, inner: [] }] }] }, Pair { rule: assignt, span: Span { str: \"=\", start: 631, end: 632 }, inner: [] }, Pair { rule: type, span: Span { str: \"#6.32(tstr)\", start: 633, end: 644 }, inner: [Pair { rule: type1, span: Span { str: \"#6.32(tstr)\", start: 633, end: 644 }, inner: [Pair { rule: type2, span: Span { str: \"#6.32(tstr)\", start: 633, end: 644 }, inner: [Pair { rule: uint, span: Span { str: \"32\", start: 636, end: 638 }, inner: [] }, Pair { rule: type, span: Span { str: \"tstr\", start: 639, end: 643 }, inner: [Pair { rule: type1, span: Span { str: \"tstr\", start: 639, end: 643 }, inner: [Pair { rule: type2, span: Span { str: \"tstr\", start: 639, end: 643 }, inner: [Pair { rule: typename, span: Span { str: \"tstr\", start: 639, end: 643 }, inner: [Pair { rule: id, span: Span { str: \"tstr\", start: 639, end: 643 }, inner: [Pair { rule: name, span: Span { str: \"tstr\", start: 639, end: 643 }, inner: [] }] }] }] }] }] }] }] }] }] }, Pair { rule: rule, span: Span { str: \"b64url = #6.33(tstr)\", start: 645, end: 665 }, inner: [Pair { rule: typename, span: Span { str: \"b64url\", start: 645, end: 651 }, inner: [Pair { rule: id, span: Span { str: \"b64url\", start: 645, end: 651 }, inner: [Pair { rule: name, span: Span { str: \"b64url\", start: 645, end: 651 }, inner: [] }] }] }, Pair { rule: assignt, span: Span { str: \"=\", start: 652, end: 653 }, inner: [] }, Pair { rule: type, span: Span { str: \"#6.33(tstr)\", start: 654, end: 665 }, inner: [Pair { rule: type1, span: Span { str: \"#6.33(tstr)\", start: 654, end: 665 }, inner: [Pair { rule: type2, span: Span { str: \"#6.33(tstr)\", start: 654, end: 665 }, inner: [Pair { rule: uint, span: Span { str: \"33\", start: 657, end: 659 }, inner: [] }, Pair { rule: type, span: Span { str: \"tstr\", start: 660, end: 664 }, inner: [Pair { rule: type1, span: Span { str: \"tstr\", start: 660, end: 664 }, inner: [Pair { rule: type2, span: Span { str: \"tstr\", start: 660, end: 664 }, inner: [Pair { rule: typename, span: Span { str: \"tstr\", start: 660, end: 664 }, inner: [Pair { rule: id, span: Span { str: \"tstr\", start: 660, end: 664 }, inner: [Pair { rule: name, span: Span { str: \"tstr\", start: 660, end: 664 }, inner: [] }] }] }] }] }] }] }] }] }] }, Pair { rule: rule, span: Span { str: \"b64legacy = #6.34(tstr)\", start: 666, end: 689 }, inner: [Pair { rule: typename, span: Span { str: \"b64legacy\", start: 666, end: 675 }, inner: [Pair { rule: id, span: Span { str: \"b64legacy\", start: 666, end: 675 }, inner: [Pair { rule: name, span: Span { str: \"b64legacy\", start: 666, end: 675 }, inner: [] }] }] }, Pair { rule: assignt, span: Span { str: \"=\", start: 676, end: 677 }, inner: [] }, Pair { rule: type, span: Span { str: \"#6.34(tstr)\", start: 678, end: 689 }, inner: [Pair { rule: type1, span: Span { str: \"#6.34(tstr)\", start: 678, end: 689 }, inner: [Pair { rule: type2, span: Span { str: \"#6.34(tstr)\", start: 678, end: 689 }, inner: [Pair { rule: uint, span: Span { str: \"34\", start: 681, end: 683 }, inner: [] }, Pair { rule: type, span: Span { str: \"tstr\", start: 684, end: 688 }, inner: [Pair { rule: type1, span: Span { str: \"tstr\", start: 684, end: 688 }, inner: [Pair { rule: type2, span: Span { str: \"tstr\", start: 684, end: 688 }, inner: [Pair { rule: typename, span: Span { str: \"tstr\", start: 684, end: 688 }, inner: [Pair { rule: id, span: Span { str: \"tstr\", start: 684, end: 688 }, inner: [Pair { rule: name, span: Span { str: \"tstr\", start: 684, end: 688 }, inner: [] }] }] }] }] }] }] }] }] }] }, Pair { rule: rule, span: Span { str: \"regexp = #6.35(tstr)\", start: 690, end: 710 }, inner: [Pair { rule: typename, span: Span { str: \"regexp\", start: 690, end: 696 }, inner: [Pair { rule: id, span: Span { str: \"regexp\", start: 690, end: 696 }, inner: [Pair { rule: name, span: Span { str: \"regexp\", start: 690, end: 696 }, inner: [] }] }] }, Pair { rule: assignt, span: Span { str: \"=\", start: 697, end: 698 }, inner: [] }, Pair { rule: type, span: Span { str: \"#6.35(tstr)\", start: 699, end: 710 }, inner: [Pair { rule: type1, span: Span { str: \"#6.35(tstr)\", start: 699, end: 710 }, inner: [Pair { rule: type2, span: Span { str: \"#6.35(tstr)\", start: 699, end: 710 }, inner: [Pair { rule: uint, span: Span { str: \"35\", start: 702, end: 704 }, inner: [] }, Pair { rule: type, span: Span { str: \"tstr\", start: 705, end: 709 }, inner: [Pair { rule: type1, span: Span { str: \"tstr\", start: 705, end: 709 }, inner: [Pair { rule: type2, span: Span { str: \"tstr\", start: 705, end: 709 }, inner: [Pair { rule: typename, span: Span { str: \"tstr\", start: 705, end: 709 }, inner: [Pair { rule: id, span: Span { str: \"tstr\", start: 705, end: 709 }, inner: [Pair { rule: name, span: Span { str: \"tstr\", start: 705, end: 709 }, inner: [] }] }] }] }] }] }] }] }] }] }, Pair { rule: rule, span: Span { str: \"mime-message = #6.36(tstr)\", start: 711, end: 737 }, inner: [Pair { rule: typename, span: Span { str: \"mime-message\", start: 711, end: 723 }, inner: [Pair { rule: id, span: Span { str: \"mime-message\", start: 711, end: 723 }, inner: [Pair { rule: name, span: Span { str: \"mime-message\", start: 711, end: 723 }, inner: [] }] }] }, Pair { rule: assignt, span: Span { str: \"=\", start: 724, end: 725 }, inner: [] }, Pair { rule: type, span: Span { str: \"#6.36(tstr)\", start: 726, end: 737 }, inner: [Pair { rule: type1, span: Span { str: \"#6.36(tstr)\", start: 726, end: 737 }, inner: [Pair { rule: type2, span: Span { str: \"#6.36(tstr)\", start: 726, end: 737 }, inner: [Pair { rule: uint, span: Span { str: \"36\", start: 729, end: 731 }, inner: [] }, Pair { rule: type, span: Span { str: \"tstr\", start: 732, end: 736 }, inner: [Pair { rule: type1, span: Span { str: \"tstr\", start: 732, end: 736 }, inner: [Pair { rule: type2, span: Span { str: \"tstr\", start: 732, end: 736 }, inner: [Pair { rule: typename, span: Span { str: \"tstr\", start: 732, end: 736 }, inner: [Pair { rule: id, span: Span { str: \"tstr\", start: 732, end: 736 }, inner: [Pair { rule: name, span: Span { str: \"tstr\", start: 732, end: 736 }, inner: [] }] }] }] }] }] }] }] }] }] }, Pair { rule: rule, span: Span { str: \"cbor-any = #6.55799(any)\", start: 738, end: 762 }, inner: [Pair { rule: typename, span: Span { str: \"cbor-any\", start: 738, end: 746 }, inner: [Pair { rule: id, span: Span { str: \"cbor-any\", start: 738, end: 746 }, inner: [Pair { rule: name, span: Span { str: \"cbor-any\", start: 738, end: 746 }, inner: [] }] }] }, Pair { rule: assignt, span: Span { str: \"=\", start: 747, end: 748 }, inner: [] }, Pair { rule: type, span: Span { str: \"#6.55799(any)\", start: 749, end: 762 }, inner: [Pair { rule: type1, span: Span { str: \"#6.55799(any)\", start: 749, end: 762 }, inner: [Pair { rule: type2, span: Span { str: \"#6.55799(any)\", start: 749, end: 762 }, inner: [Pair { rule: uint, span: Span { str: \"55799\", start: 752, end: 757 }, inner: [] }, Pair { rule: type, span: Span { str: \"any\", start: 758, end: 761 }, inner: [Pair { rule: type1, span: Span { str: \"any\", start: 758, end: 761 }, inner: [Pair { rule: type2, span: Span { str: \"any\", start: 758, end: 761 }, inner: [Pair { rule: typename, span: Span { str: \"any\", start: 758, end: 761 }, inner: [Pair { rule: id, span: Span { str: \"any\", start: 758, end: 761 }, inner: [Pair { rule: name, span: Span { str: \"any\", start: 758, end: 761 }, inner: [] }] }] }] }] }] }] }] }] }] }, Pair { rule: rule, span: Span { str: \"float16 = #7.25\", start: 764, end: 779 }, inner: [Pair { rule: typename, span: Span { str: \"float16\", start: 764, end: 771 }, inner: [Pair { rule: id, span: Span { str: \"float16\", start: 764, end: 771 }, inner: [Pair { rule: name, span: Span { str: \"float16\", start: 764, end: 771 }, inner: [] }] }] }, Pair { rule: assignt, span: Span { str: \"=\", start: 772, end: 773 }, inner: [] }, Pair { rule: type, span: Span { str: \"#7.25\", start: 774, end: 779 }, inner: [Pair { rule: type1, span: Span { str: \"#7.25\", start: 774, end: 779 }, inner: [Pair { rule: type2, span: Span { str: \"#7.25\", start: 774, end: 779 }, inner: [Pair { rule: uint, span: Span { str: \"25\", start: 777, end: 779 }, inner: [] }] }] }] }] }, Pair { rule: rule, span: Span { str: \"float32 = #7.26\", start: 780, end: 795 }, inner: [Pair { rule: typename, span: Span { str: \"float32\", start: 780, end: 787 }, inner: [Pair { rule: id, span: Span { str: \"float32\", start: 780, end: 787 }, inner: [Pair { rule: name, span: Span { str: \"float32\", start: 780, end: 787 }, inner: [] }] }] }, Pair { rule: assignt, span: Span { str: \"=\", start: 788, end: 789 }, inner: [] }, Pair { rule: type, span: Span { str: \"#7.26\", start: 790, end: 795 }, inner: [Pair { rule: type1, span: Span { str: \"#7.26\", start: 790, end: 795 }, inner: [Pair { rule: type2, span: Span { str: \"#7.26\", start: 790, end: 795 }, inner: [Pair { rule: uint, span: Span { str: \"26\", start: 793, end: 795 }, inner: [] }] }] }] }] }, Pair { rule: rule, span: Span { str: \"float64 = #7.27\", start: 796, end: 811 }, inner: [Pair { rule: typename, span: Span { str: \"float64\", start: 796, end: 803 }, inner: [Pair { rule: id, span: Span { str: \"float64\", start: 796, end: 803 }, inner: [Pair { rule: name, span: Span { str: \"float64\", start: 796, end: 803 }, inner: [] }] }] }, Pair { rule: assignt, span: Span { str: \"=\", start: 804, end: 805 }, inner: [] }, Pair { rule: type, span: Span { str: \"#7.27\", start: 806, end: 811 }, inner: [Pair { rule: type1, span: Span { str: \"#7.27\", start: 806, end: 811 }, inner: [Pair { rule: type2, span: Span { str: \"#7.27\", start: 806, end: 811 }, inner: [Pair { rule: uint, span: Span { str: \"27\", start: 809, end: 811 }, inner: [] }] }] }] }] }, Pair { rule: rule, span: Span { str: \"float16-32 = float16 / float32\", start: 812, end: 842 }, inner: [Pair { rule: typename, span: Span { str: \"float16-32\", start: 812, end: 822 }, inner: [Pair { rule: id, span: Span { str: \"float16-32\", start: 812, end: 822 }, inner: [Pair { rule: name, span: Span { str: \"float16-32\", start: 812, end: 822 }, inner: [] }] }] }, Pair { rule: assignt, span: Span { str: \"=\", start: 823, end: 824 }, inner: [] }, Pair { rule: type, span: Span { str: \"float16 / float32\", start: 825, end: 842 }, inner: [Pair { rule: type1, span: Span { str: \"float16\", start: 825, end: 832 }, inner: [Pair { rule: type2, span: Span { str: \"float16\", start: 825, end: 832 }, inner: [Pair { rule: typename, span: Span { str: \"float16\", start: 825, end: 832 }, inner: [Pair { rule: id, span: Span { str: \"float16\", start: 825, end: 832 }, inner: [Pair { rule: name, span: Span { str: \"float16\", start: 825, end: 832 }, inner: [] }] }] }] }] }, Pair { rule: type1, span: Span { str: \"float32\", start: 835, end: 842 }, inner: [Pair { rule: type2, span: Span { str: \"float32\", start: 835, end: 842 }, inner: [Pair { rule: typename, span: Span { str: \"float32\", start: 835, end: 842 }, inner: [Pair { rule: id, span: Span { str: \"float32\", start: 835, end: 842 }, inner: [Pair { rule: name, span: Span { str: \"float32\", start: 835, end: 842 }, inner: [] }] }] }] }] }] }] }, Pair { rule: rule, span: Span { str: \"float32-64 = float32 / float64\", start: 843, end: 873 }, inner: [Pair { rule: typename, span: Span { str: \"float32-64\", start: 843, end: 853 }, inner: [Pair { rule: id, span: Span { str: \"float32-64\", start: 843, end: 853 }, inner: [Pair { rule: name, span: Span { str: \"float32-64\", start: 843, end: 853 }, inner: [] }] }] }, Pair { rule: assignt, span: Span { str: \"=\", start: 854, end: 855 }, inner: [] }, Pair { rule: type, span: Span { str: \"float32 / float64\", start: 856, end: 873 }, inner: [Pair { rule: type1, span: Span { str: \"float32\", start: 856, end: 863 }, inner: [Pair { rule: type2, span: Span { str: \"float32\", start: 856, end: 863 }, inner: [Pair { rule: typename, span: Span { str: \"float32\", start: 856, end: 863 }, inner: [Pair { rule: id, span: Span { str: \"float32\", start: 856, end: 863 }, inner: [Pair { rule: name, span: Span { str: \"float32\", start: 856, end: 863 }, inner: [] }] }] }] }] }, Pair { rule: type1, span: Span { str: \"float64\", start: 866, end: 873 }, inner: [Pair { rule: type2, span: Span { str: \"float64\", start: 866, end: 873 }, inner: [Pair { rule: typename, span: Span { str: \"float64\", start: 866, end: 873 }, inner: [Pair { rule: id, span: Span { str: \"float64\", start: 866, end: 873 }, inner: [Pair { rule: name, span: Span { str: \"float64\", start: 866, end: 873 }, inner: [] }] }] }] }] }] }] }, Pair { rule: rule, span: Span { str: \"float = float16-32 / float64\", start: 874, end: 902 }, inner: [Pair { rule: typename, span: Span { str: \"float\", start: 874, end: 879 }, inner: [Pair { rule: id, span: Span { str: \"float\", start: 874, end: 879 }, inner: [Pair { rule: name, span: Span { str: \"float\", start: 874, end: 879 }, inner: [] }] }] }, Pair { rule: assignt, span: Span { str: \"=\", start: 880, end: 881 }, inner: [] }, Pair { rule: type, span: Span { str: \"float16-32 / float64\", start: 882, end: 902 }, inner: [Pair { rule: type1, span: Span { str: \"float16-32\", start: 882, end: 892 }, inner: [Pair { rule: type2, span: Span { str: \"float16-32\", start: 882, end: 892 }, inner: [Pair { rule: typename, span: Span { str: \"float16-32\", start: 882, end: 892 }, inner: [Pair { rule: id, span: Span { str: \"float16-32\", start: 882, end: 892 }, inner: [Pair { rule: name, span: Span { str: \"float16-32\", start: 882, end: 892 }, inner: [] }] }] }] }] }, Pair { rule: type1, span: Span { str: \"float64\", start: 895, end: 902 }, inner: [Pair { rule: type2, span: Span { str: \"float64\", start: 895, end: 902 }, inner: [Pair { rule: typename, span: Span { str: \"float64\", start: 895, end: 902 }, inner: [Pair { rule: id, span: Span { str: \"float64\", start: 895, end: 902 }, inner: [Pair { rule: name, span: Span { str: \"float64\", start: 895, end: 902 }, inner: [] }] }] }] }] }] }] }, Pair { rule: rule, span: Span { str: \"false = #7.20\", start: 904, end: 917 }, inner: [Pair { rule: typename, span: Span { str: \"false\", start: 904, end: 909 }, inner: [Pair { rule: id, span: Span { str: \"false\", start: 904, end: 909 }, inner: [Pair { rule: name, span: Span { str: \"false\", start: 904, end: 909 }, inner: [] }] }] }, Pair { rule: assignt, span: Span { str: \"=\", start: 910, end: 911 }, inner: [] }, Pair { rule: type, span: Span { str: \"#7.20\", start: 912, end: 917 }, inner: [Pair { rule: type1, span: Span { str: \"#7.20\", start: 912, end: 917 }, inner: [Pair { rule: type2, span: Span { str: \"#7.20\", start: 912, end: 917 }, inner: [Pair { rule: uint, span: Span { str: \"20\", start: 915, end: 917 }, inner: [] }] }] }] }] }, Pair { rule: rule, span: Span { str: \"true = #7.21\", start: 918, end: 930 }, inner: [Pair { rule: typename, span: Span { str: \"true\", start: 918, end: 922 }, inner: [Pair { rule: id, span: Span { str: \"true\", start: 918, end: 922 }, inner: [Pair { rule: name, span: Span { str: \"true\", start: 918, end: 922 }, inner: [] }] }] }, Pair { rule: assignt, span: Span { str: \"=\", start: 923, end: 924 }, inner: [] }, Pair { rule: type, span: Span { str: \"#7.21\", start: 925, end: 930 }, inner: [Pair { rule: type1, span: Span { str: \"#7.21\", start: 925, end: 930 }, inner: [Pair { rule: type2, span: Span { str: \"#7.21\", start: 925, end: 930 }, inner: [Pair { rule: uint, span: Span { str: \"21\", start: 928, end: 930 }, inner: [] }] }] }] }] }, Pair { rule: rule, span: Span { str: \"bool = false / true\", start: 931, end: 950 }, inner: [Pair { rule: typename, span: Span { str: \"bool\", start: 931, end: 935 }, inner: [Pair { rule: id, span: Span { str: \"bool\", start: 931, end: 935 }, inner: [Pair { rule: name, span: Span { str: \"bool\", start: 931, end: 935 }, inner: [] }] }] }, Pair { rule: assignt, span: Span { str: \"=\", start: 936, end: 937 }, inner: [] }, Pair { rule: type, span: Span { str: \"false / true\", start: 938, end: 950 }, inner: [Pair { rule: type1, span: Span { str: \"false\", start: 938, end: 943 }, inner: [Pair { rule: type2, span: Span { str: \"false\", start: 938, end: 943 }, inner: [Pair { rule: typename, span: Span { str: \"false\", start: 938, end: 943 }, inner: [Pair { rule: id, span: Span { str: \"false\", start: 938, end: 943 }, inner: [Pair { rule: name, span: Span { str: \"false\", start: 938, end: 943 }, inner: [] }] }] }] }] }, Pair { rule: type1, span: Span { str: \"true\", start: 946, end: 950 }, inner: [Pair { rule: type2, span: Span { str: \"true\", start: 946, end: 950 }, inner: [Pair { rule: typename, span: Span { str: \"true\", start: 946, end: 950 }, inner: [Pair { rule: id, span: Span { str: \"true\", start: 946, end: 950 }, inner: [Pair { rule: name, span: Span { str: \"true\", start: 946, end: 950 }, inner: [] }] }] }] }] }] }] }, Pair { rule: rule, span: Span { str: \"nil = #7.22\", start: 951, end: 962 }, inner: [Pair { rule: typename, span: Span { str: \"nil\", start: 951, end: 954 }, inner: [Pair { rule: id, span: Span { str: \"nil\", start: 951, end: 954 }, inner: [Pair { rule: name, span: Span { str: \"nil\", start: 951, end: 954 }, inner: [] }] }] }, Pair { rule: assignt, span: Span { str: \"=\", start: 955, end: 956 }, inner: [] }, Pair { rule: type, span: Span { str: \"#7.22\", start: 957, end: 962 }, inner: [Pair { rule: type1, span: Span { str: \"#7.22\", start: 957, end: 962 }, inner: [Pair { rule: type2, span: Span { str: \"#7.22\", start: 957, end: 962 }, inner: [Pair { rule: uint, span: Span { str: \"22\", start: 960, end: 962 }, inner: [] }] }] }] }] }, Pair { rule: rule, span: Span { str: \"null = nil\", start: 963, end: 973 }, inner: [Pair { rule: typename, span: Span { str: \"null\", start: 963, end: 967 }, inner: [Pair { rule: id, span: Span { str: \"null\", start: 963, end: 967 }, inner: [Pair { rule: name, span: Span { str: \"null\", start: 963, end: 967 }, inner: [] }] }] }, Pair { rule: assignt, span: Span { str: \"=\", start: 968, end: 969 }, inner: [] }, Pair { rule: type, span: Span { str: \"nil\", start: 970, end: 973 }, inner: [Pair { rule: type1, span: Span { str: \"nil\", start: 970, end: 973 }, inner: [Pair { rule: type2, span: Span { str: \"nil\", start: 970, end: 973 }, inner: [Pair { rule: typename, span: Span { str: \"nil\", start: 970, end: 973 }, inner: [Pair { rule: id, span: Span { str: \"nil\", start: 970, end: 973 }, inner: [Pair { rule: name, span: Span { str: \"nil\", start: 970, end: 973 }, inner: [] }] }] }] }] }] }] }, Pair { rule: rule, span: Span { str: \"undefined = #7.23\", start: 974, end: 991 }, inner: [Pair { rule: typename, span: Span { str: \"undefined\", start: 974, end: 983 }, inner: [Pair { rule: id, span: Span { str: \"undefined\", start: 974, end: 983 }, inner: [Pair { rule: name, span: Span { str: \"undefined\", start: 974, end: 983 }, inner: [] }] }] }, Pair { rule: assignt, span: Span { str: \"=\", start: 984, end: 985 }, inner: [] }, Pair { rule: type, span: Span { str: \"#7.23\", start: 986, end: 991 }, inner: [Pair { rule: type1, span: Span { str: \"#7.23\", start: 986, end: 991 }, inner: [Pair { rule: type2, span: Span { str: \"#7.23\", start: 986, end: 991 }, inner: [Pair { rule: uint, span: Span { str: \"23\", start: 989, end: 991 }, inner: [] }] }] }] }] }, Pair { rule: EOI, span: Span { str: \"\", start: 991, end: 991 }, inner: [] }] }])","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false,"stepsCount":0,"hasContent":false},{"name":"test tests::it_works ... ok","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false,"stepsCount":0,"hasContent":false},{"name":"","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false,"stepsCount":0,"hasContent":false},{"name":"test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.01s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false,"stepsCount":0,"hasContent":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false,"stepsCount":6,"hasContent":true},"afterStages":[],"labels":[{"name":"resultFormat","value":"junit"},{"name":"suite","value":"cbork-cddl-parser"},{"name":"testClass","value":"cbork-cddl-parser"},{"name":"package","value":"cbork-cddl-parser"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"history":{"statistic":{"failed":0,"broken":0,"skipped":0,"passed":4,"unknown":0,"total":4},"items":[{"uid":"d1f4349608ca91e8","reportUrl":"https://input-output-hk.github.io/catalyst-libs/allure-action/refactor_chain-follower-decoder/test-report/11593838917_1730293702940/#testresult/d1f4349608ca91e8","status":"passed","time":{"duration":8}},{"uid":"81755fffa486bbd2","reportUrl":"https://input-output-hk.github.io/catalyst-libs/allure-action/refactor_chain-follower-decoder/test-report/11593743906_1730293608158/#testresult/81755fffa486bbd2","status":"passed","time":{"duration":8}},{"uid":"664d625e350dfc67","reportUrl":"https://input-output-hk.github.io/catalyst-libs/allure-action/refactor_chain-follower-decoder/test-report/11461915646_1729606075485/#testresult/664d625e350dfc67","status":"passed","time":{"duration":8}}]},"tags":[]},"source":"a1f08111e388c0f9.json","parameterValues":[]}